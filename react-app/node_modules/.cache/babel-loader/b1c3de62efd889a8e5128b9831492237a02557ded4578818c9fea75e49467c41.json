{"ast":null,"code":"'use strict';\n\n/*eslint-disable max-len,no-use-before-define*/\nvar common = require('./common');\nvar YAMLException = require('./exception');\nvar Mark = require('./mark');\nvar DEFAULT_SAFE_SCHEMA = require('./schema/default_safe');\nvar DEFAULT_FULL_SCHEMA = require('./schema/default_full');\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\nvar CONTEXT_FLOW_IN = 1;\nvar CONTEXT_FLOW_OUT = 2;\nvar CONTEXT_BLOCK_IN = 3;\nvar CONTEXT_BLOCK_OUT = 4;\nvar CHOMPING_CLIP = 1;\nvar CHOMPING_STRIP = 2;\nvar CHOMPING_KEEP = 3;\nvar PATTERN_NON_PRINTABLE = /[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F-\\x84\\x86-\\x9F\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\nvar PATTERN_NON_ASCII_LINE_BREAKS = /[\\x85\\u2028\\u2029]/;\nvar PATTERN_FLOW_INDICATORS = /[,\\[\\]\\{\\}]/;\nvar PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\\-]+!)$/i;\nvar PATTERN_TAG_URI = /^(?:!|[^,\\[\\]\\{\\}])(?:%[0-9a-f]{2}|[0-9a-z\\-#;\\/\\?:@&=\\+\\$,_\\.!~\\*'\\(\\)\\[\\]])*$/i;\nfunction is_EOL(c) {\n  return c === 0x0A /* LF */ || c === 0x0D /* CR */;\n}\n\nfunction is_WHITE_SPACE(c) {\n  return c === 0x09 /* Tab */ || c === 0x20 /* Space */;\n}\n\nfunction is_WS_OR_EOL(c) {\n  return c === 0x09 /* Tab */ || c === 0x20 /* Space */ || c === 0x0A /* LF */ || c === 0x0D /* CR */;\n}\n\nfunction is_FLOW_INDICATOR(c) {\n  return 0x2C /* , */ === c || 0x5B /* [ */ === c || 0x5D /* ] */ === c || 0x7B /* { */ === c || 0x7D /* } */ === c;\n}\nfunction fromHexCode(c) {\n  var lc;\n  if (0x30 /* 0 */ <= c && c <= 0x39 /* 9 */) {\n    return c - 0x30;\n  }\n\n  /*eslint-disable no-bitwise*/\n  lc = c | 0x20;\n  if (0x61 /* a */ <= lc && lc <= 0x66 /* f */) {\n    return lc - 0x61 + 10;\n  }\n  return -1;\n}\nfunction escapedHexLen(c) {\n  if (c === 0x78 /* x */) {\n    return 2;\n  }\n  if (c === 0x75 /* u */) {\n    return 4;\n  }\n  if (c === 0x55 /* U */) {\n    return 8;\n  }\n  return 0;\n}\nfunction fromDecimalCode(c) {\n  if (0x30 /* 0 */ <= c && c <= 0x39 /* 9 */) {\n    return c - 0x30;\n  }\n  return -1;\n}\nfunction simpleEscapeSequence(c) {\n  return c === 0x30 /* 0 */ ? '\\x00' : c === 0x61 /* a */ ? '\\x07' : c === 0x62 /* b */ ? '\\x08' : c === 0x74 /* t */ ? '\\x09' : c === 0x09 /* Tab */ ? '\\x09' : c === 0x6E /* n */ ? '\\x0A' : c === 0x76 /* v */ ? '\\x0B' : c === 0x66 /* f */ ? '\\x0C' : c === 0x72 /* r */ ? '\\x0D' : c === 0x65 /* e */ ? '\\x1B' : c === 0x20 /* Space */ ? ' ' : c === 0x22 /* \" */ ? '\\x22' : c === 0x2F /* / */ ? '/' : c === 0x5C /* \\ */ ? '\\x5C' : c === 0x4E /* N */ ? '\\x85' : c === 0x5F /* _ */ ? '\\xA0' : c === 0x4C /* L */ ? '\\u2028' : c === 0x50 /* P */ ? '\\u2029' : '';\n}\nfunction charFromCodepoint(c) {\n  if (c <= 0xFFFF) {\n    return String.fromCharCode(c);\n  }\n  // Encode UTF-16 surrogate pair\n  // https://en.wikipedia.org/wiki/UTF-16#Code_points_U.2B010000_to_U.2B10FFFF\n  return String.fromCharCode((c - 0x010000 >> 10) + 0xD800, (c - 0x010000 & 0x03FF) + 0xDC00);\n}\nvar simpleEscapeCheck = new Array(256); // integer, for fast access\nvar simpleEscapeMap = new Array(256);\nfor (var i = 0; i < 256; i++) {\n  simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;\n  simpleEscapeMap[i] = simpleEscapeSequence(i);\n}\nfunction State(input, options) {\n  this.input = input;\n  this.filename = options['filename'] || null;\n  this.schema = options['schema'] || DEFAULT_FULL_SCHEMA;\n  this.onWarning = options['onWarning'] || null;\n  this.legacy = options['legacy'] || false;\n  this.implicitTypes = this.schema.compiledImplicit;\n  this.typeMap = this.schema.compiledTypeMap;\n  this.length = input.length;\n  this.position = 0;\n  this.line = 0;\n  this.lineStart = 0;\n  this.lineIndent = 0;\n  this.documents = [];\n\n  /*\n  this.version;\n  this.checkLineBreaks;\n  this.tagMap;\n  this.anchorMap;\n  this.tag;\n  this.anchor;\n  this.kind;\n  this.result;*/\n}\n\nfunction generateError(state, message) {\n  return new YAMLException(message, new Mark(state.filename, state.input, state.position, state.line, state.position - state.lineStart));\n}\nfunction throwError(state, message) {\n  throw generateError(state, message);\n}\nfunction throwWarning(state, message) {\n  var error = generateError(state, message);\n  if (state.onWarning) {\n    state.onWarning.call(null, error);\n  } else {\n    throw error;\n  }\n}\nvar directiveHandlers = {\n  YAML: function handleYamlDirective(state, name, args) {\n    var match, major, minor;\n    if (null !== state.version) {\n      throwError(state, 'duplication of %YAML directive');\n    }\n    if (1 !== args.length) {\n      throwError(state, 'YAML directive accepts exactly one argument');\n    }\n    match = /^([0-9]+)\\.([0-9]+)$/.exec(args[0]);\n    if (null === match) {\n      throwError(state, 'ill-formed argument of the YAML directive');\n    }\n    major = parseInt(match[1], 10);\n    minor = parseInt(match[2], 10);\n    if (1 !== major) {\n      throwError(state, 'unacceptable YAML version of the document');\n    }\n    state.version = args[0];\n    state.checkLineBreaks = minor < 2;\n    if (1 !== minor && 2 !== minor) {\n      throwWarning(state, 'unsupported YAML version of the document');\n    }\n  },\n  TAG: function handleTagDirective(state, name, args) {\n    var handle, prefix;\n    if (2 !== args.length) {\n      throwError(state, 'TAG directive accepts exactly two arguments');\n    }\n    handle = args[0];\n    prefix = args[1];\n    if (!PATTERN_TAG_HANDLE.test(handle)) {\n      throwError(state, 'ill-formed tag handle (first argument) of the TAG directive');\n    }\n    if (_hasOwnProperty.call(state.tagMap, handle)) {\n      throwError(state, 'there is a previously declared suffix for \"' + handle + '\" tag handle');\n    }\n    if (!PATTERN_TAG_URI.test(prefix)) {\n      throwError(state, 'ill-formed tag prefix (second argument) of the TAG directive');\n    }\n    state.tagMap[handle] = prefix;\n  }\n};\nfunction captureSegment(state, start, end, checkJson) {\n  var _position, _length, _character, _result;\n  if (start < end) {\n    _result = state.input.slice(start, end);\n    if (checkJson) {\n      for (_position = 0, _length = _result.length; _position < _length; _position += 1) {\n        _character = _result.charCodeAt(_position);\n        if (!(0x09 === _character || 0x20 <= _character && _character <= 0x10FFFF)) {\n          throwError(state, 'expected valid JSON character');\n        }\n      }\n    }\n    state.result += _result;\n  }\n}\nfunction mergeMappings(state, destination, source) {\n  var sourceKeys, key, index, quantity;\n  if (!common.isObject(source)) {\n    throwError(state, 'cannot merge mappings; the provided source object is unacceptable');\n  }\n  sourceKeys = Object.keys(source);\n  for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {\n    key = sourceKeys[index];\n    if (!_hasOwnProperty.call(destination, key)) {\n      destination[key] = source[key];\n    }\n  }\n}\nfunction storeMappingPair(state, _result, keyTag, keyNode, valueNode) {\n  var index, quantity;\n  keyNode = String(keyNode);\n  if (null === _result) {\n    _result = {};\n  }\n  if ('tag:yaml.org,2002:merge' === keyTag) {\n    if (Array.isArray(valueNode)) {\n      for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {\n        mergeMappings(state, _result, valueNode[index]);\n      }\n    } else {\n      mergeMappings(state, _result, valueNode);\n    }\n  } else {\n    _result[keyNode] = valueNode;\n  }\n  return _result;\n}\nfunction readLineBreak(state) {\n  var ch;\n  ch = state.input.charCodeAt(state.position);\n  if (0x0A /* LF */ === ch) {\n    state.position++;\n  } else if (0x0D /* CR */ === ch) {\n    state.position++;\n    if (0x0A /* LF */ === state.input.charCodeAt(state.position)) {\n      state.position++;\n    }\n  } else {\n    throwError(state, 'a line break is expected');\n  }\n  state.line += 1;\n  state.lineStart = state.position;\n}\nfunction skipSeparationSpace(state, allowComments, checkIndent) {\n  var lineBreaks = 0,\n    ch = state.input.charCodeAt(state.position);\n  while (0 !== ch) {\n    while (is_WHITE_SPACE(ch)) {\n      ch = state.input.charCodeAt(++state.position);\n    }\n    if (allowComments && 0x23 /* # */ === ch) {\n      do {\n        ch = state.input.charCodeAt(++state.position);\n      } while (ch !== 0x0A /* LF */ && ch !== 0x0D /* CR */ && 0 !== ch);\n    }\n    if (is_EOL(ch)) {\n      readLineBreak(state);\n      ch = state.input.charCodeAt(state.position);\n      lineBreaks++;\n      state.lineIndent = 0;\n      while (0x20 /* Space */ === ch) {\n        state.lineIndent++;\n        ch = state.input.charCodeAt(++state.position);\n      }\n    } else {\n      break;\n    }\n  }\n  if (-1 !== checkIndent && 0 !== lineBreaks && state.lineIndent < checkIndent) {\n    throwWarning(state, 'deficient indentation');\n  }\n  return lineBreaks;\n}\nfunction testDocumentSeparator(state) {\n  var _position = state.position,\n    ch;\n  ch = state.input.charCodeAt(_position);\n\n  // Condition state.position === state.lineStart is tested\n  // in parent on each call, for efficiency. No needs to test here again.\n  if ((0x2D /* - */ === ch || 0x2E /* . */ === ch) && state.input.charCodeAt(_position + 1) === ch && state.input.charCodeAt(_position + 2) === ch) {\n    _position += 3;\n    ch = state.input.charCodeAt(_position);\n    if (ch === 0 || is_WS_OR_EOL(ch)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction writeFoldedLines(state, count) {\n  if (1 === count) {\n    state.result += ' ';\n  } else if (count > 1) {\n    state.result += common.repeat('\\n', count - 1);\n  }\n}\nfunction readPlainScalar(state, nodeIndent, withinFlowCollection) {\n  var preceding,\n    following,\n    captureStart,\n    captureEnd,\n    hasPendingContent,\n    _line,\n    _lineStart,\n    _lineIndent,\n    _kind = state.kind,\n    _result = state.result,\n    ch;\n  ch = state.input.charCodeAt(state.position);\n  if (is_WS_OR_EOL(ch) || is_FLOW_INDICATOR(ch) || 0x23 /* # */ === ch || 0x26 /* & */ === ch || 0x2A /* * */ === ch || 0x21 /* ! */ === ch || 0x7C /* | */ === ch || 0x3E /* > */ === ch || 0x27 /* ' */ === ch || 0x22 /* \" */ === ch || 0x25 /* % */ === ch || 0x40 /* @ */ === ch || 0x60 /* ` */ === ch) {\n    return false;\n  }\n  if (0x3F /* ? */ === ch || 0x2D /* - */ === ch) {\n    following = state.input.charCodeAt(state.position + 1);\n    if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {\n      return false;\n    }\n  }\n  state.kind = 'scalar';\n  state.result = '';\n  captureStart = captureEnd = state.position;\n  hasPendingContent = false;\n  while (0 !== ch) {\n    if (0x3A /* : */ === ch) {\n      following = state.input.charCodeAt(state.position + 1);\n      if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {\n        break;\n      }\n    } else if (0x23 /* # */ === ch) {\n      preceding = state.input.charCodeAt(state.position - 1);\n      if (is_WS_OR_EOL(preceding)) {\n        break;\n      }\n    } else if (state.position === state.lineStart && testDocumentSeparator(state) || withinFlowCollection && is_FLOW_INDICATOR(ch)) {\n      break;\n    } else if (is_EOL(ch)) {\n      _line = state.line;\n      _lineStart = state.lineStart;\n      _lineIndent = state.lineIndent;\n      skipSeparationSpace(state, false, -1);\n      if (state.lineIndent >= nodeIndent) {\n        hasPendingContent = true;\n        ch = state.input.charCodeAt(state.position);\n        continue;\n      } else {\n        state.position = captureEnd;\n        state.line = _line;\n        state.lineStart = _lineStart;\n        state.lineIndent = _lineIndent;\n        break;\n      }\n    }\n    if (hasPendingContent) {\n      captureSegment(state, captureStart, captureEnd, false);\n      writeFoldedLines(state, state.line - _line);\n      captureStart = captureEnd = state.position;\n      hasPendingContent = false;\n    }\n    if (!is_WHITE_SPACE(ch)) {\n      captureEnd = state.position + 1;\n    }\n    ch = state.input.charCodeAt(++state.position);\n  }\n  captureSegment(state, captureStart, captureEnd, false);\n  if (state.result) {\n    return true;\n  }\n  state.kind = _kind;\n  state.result = _result;\n  return false;\n}\nfunction readSingleQuotedScalar(state, nodeIndent) {\n  var ch, captureStart, captureEnd;\n  ch = state.input.charCodeAt(state.position);\n  if (0x27 /* ' */ !== ch) {\n    return false;\n  }\n  state.kind = 'scalar';\n  state.result = '';\n  state.position++;\n  captureStart = captureEnd = state.position;\n  while (0 !== (ch = state.input.charCodeAt(state.position))) {\n    if (0x27 /* ' */ === ch) {\n      captureSegment(state, captureStart, state.position, true);\n      ch = state.input.charCodeAt(++state.position);\n      if (0x27 /* ' */ === ch) {\n        captureStart = captureEnd = state.position;\n        state.position++;\n      } else {\n        return true;\n      }\n    } else if (is_EOL(ch)) {\n      captureSegment(state, captureStart, captureEnd, true);\n      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));\n      captureStart = captureEnd = state.position;\n    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {\n      throwError(state, 'unexpected end of the document within a single quoted scalar');\n    } else {\n      state.position++;\n      captureEnd = state.position;\n    }\n  }\n  throwError(state, 'unexpected end of the stream within a single quoted scalar');\n}\nfunction readDoubleQuotedScalar(state, nodeIndent) {\n  var captureStart, captureEnd, hexLength, hexResult, tmp, tmpEsc, ch;\n  ch = state.input.charCodeAt(state.position);\n  if (0x22 /* \" */ !== ch) {\n    return false;\n  }\n  state.kind = 'scalar';\n  state.result = '';\n  state.position++;\n  captureStart = captureEnd = state.position;\n  while (0 !== (ch = state.input.charCodeAt(state.position))) {\n    if (0x22 /* \" */ === ch) {\n      captureSegment(state, captureStart, state.position, true);\n      state.position++;\n      return true;\n    } else if (0x5C /* \\ */ === ch) {\n      captureSegment(state, captureStart, state.position, true);\n      ch = state.input.charCodeAt(++state.position);\n      if (is_EOL(ch)) {\n        skipSeparationSpace(state, false, nodeIndent);\n\n        // TODO: rework to inline fn with no type cast?\n      } else if (ch < 256 && simpleEscapeCheck[ch]) {\n        state.result += simpleEscapeMap[ch];\n        state.position++;\n      } else if ((tmp = escapedHexLen(ch)) > 0) {\n        hexLength = tmp;\n        hexResult = 0;\n        for (; hexLength > 0; hexLength--) {\n          ch = state.input.charCodeAt(++state.position);\n          if ((tmp = fromHexCode(ch)) >= 0) {\n            hexResult = (hexResult << 4) + tmp;\n          } else {\n            throwError(state, 'expected hexadecimal character');\n          }\n        }\n        state.result += charFromCodepoint(hexResult);\n        state.position++;\n      } else {\n        throwError(state, 'unknown escape sequence');\n      }\n      captureStart = captureEnd = state.position;\n    } else if (is_EOL(ch)) {\n      captureSegment(state, captureStart, captureEnd, true);\n      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));\n      captureStart = captureEnd = state.position;\n    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {\n      throwError(state, 'unexpected end of the document within a double quoted scalar');\n    } else {\n      state.position++;\n      captureEnd = state.position;\n    }\n  }\n  throwError(state, 'unexpected end of the stream within a double quoted scalar');\n}\nfunction readFlowCollection(state, nodeIndent) {\n  var readNext = true,\n    _line,\n    _tag = state.tag,\n    _result,\n    _anchor = state.anchor,\n    following,\n    terminator,\n    isPair,\n    isExplicitPair,\n    isMapping,\n    keyNode,\n    keyTag,\n    valueNode,\n    ch;\n  ch = state.input.charCodeAt(state.position);\n  if (ch === 0x5B /* [ */) {\n    terminator = 0x5D; /* ] */\n    isMapping = false;\n    _result = [];\n  } else if (ch === 0x7B /* { */) {\n    terminator = 0x7D; /* } */\n    isMapping = true;\n    _result = {};\n  } else {\n    return false;\n  }\n  if (null !== state.anchor) {\n    state.anchorMap[state.anchor] = _result;\n  }\n  ch = state.input.charCodeAt(++state.position);\n  while (0 !== ch) {\n    skipSeparationSpace(state, true, nodeIndent);\n    ch = state.input.charCodeAt(state.position);\n    if (ch === terminator) {\n      state.position++;\n      state.tag = _tag;\n      state.anchor = _anchor;\n      state.kind = isMapping ? 'mapping' : 'sequence';\n      state.result = _result;\n      return true;\n    } else if (!readNext) {\n      throwError(state, 'missed comma between flow collection entries');\n    }\n    keyTag = keyNode = valueNode = null;\n    isPair = isExplicitPair = false;\n    if (0x3F /* ? */ === ch) {\n      following = state.input.charCodeAt(state.position + 1);\n      if (is_WS_OR_EOL(following)) {\n        isPair = isExplicitPair = true;\n        state.position++;\n        skipSeparationSpace(state, true, nodeIndent);\n      }\n    }\n    _line = state.line;\n    composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);\n    keyTag = state.tag;\n    keyNode = state.result;\n    skipSeparationSpace(state, true, nodeIndent);\n    ch = state.input.charCodeAt(state.position);\n    if ((isExplicitPair || state.line === _line) && 0x3A /* : */ === ch) {\n      isPair = true;\n      ch = state.input.charCodeAt(++state.position);\n      skipSeparationSpace(state, true, nodeIndent);\n      composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);\n      valueNode = state.result;\n    }\n    if (isMapping) {\n      storeMappingPair(state, _result, keyTag, keyNode, valueNode);\n    } else if (isPair) {\n      _result.push(storeMappingPair(state, null, keyTag, keyNode, valueNode));\n    } else {\n      _result.push(keyNode);\n    }\n    skipSeparationSpace(state, true, nodeIndent);\n    ch = state.input.charCodeAt(state.position);\n    if (0x2C /* , */ === ch) {\n      readNext = true;\n      ch = state.input.charCodeAt(++state.position);\n    } else {\n      readNext = false;\n    }\n  }\n  throwError(state, 'unexpected end of the stream within a flow collection');\n}\nfunction readBlockScalar(state, nodeIndent) {\n  var captureStart,\n    folding,\n    chomping = CHOMPING_CLIP,\n    detectedIndent = false,\n    textIndent = nodeIndent,\n    emptyLines = 0,\n    atMoreIndented = false,\n    tmp,\n    ch;\n  ch = state.input.charCodeAt(state.position);\n  if (ch === 0x7C /* | */) {\n    folding = false;\n  } else if (ch === 0x3E /* > */) {\n    folding = true;\n  } else {\n    return false;\n  }\n  state.kind = 'scalar';\n  state.result = '';\n  while (0 !== ch) {\n    ch = state.input.charCodeAt(++state.position);\n    if (0x2B /* + */ === ch || 0x2D /* - */ === ch) {\n      if (CHOMPING_CLIP === chomping) {\n        chomping = 0x2B /* + */ === ch ? CHOMPING_KEEP : CHOMPING_STRIP;\n      } else {\n        throwError(state, 'repeat of a chomping mode identifier');\n      }\n    } else if ((tmp = fromDecimalCode(ch)) >= 0) {\n      if (tmp === 0) {\n        throwError(state, 'bad explicit indentation width of a block scalar; it cannot be less than one');\n      } else if (!detectedIndent) {\n        textIndent = nodeIndent + tmp - 1;\n        detectedIndent = true;\n      } else {\n        throwError(state, 'repeat of an indentation width identifier');\n      }\n    } else {\n      break;\n    }\n  }\n  if (is_WHITE_SPACE(ch)) {\n    do {\n      ch = state.input.charCodeAt(++state.position);\n    } while (is_WHITE_SPACE(ch));\n    if (0x23 /* # */ === ch) {\n      do {\n        ch = state.input.charCodeAt(++state.position);\n      } while (!is_EOL(ch) && 0 !== ch);\n    }\n  }\n  while (0 !== ch) {\n    readLineBreak(state);\n    state.lineIndent = 0;\n    ch = state.input.charCodeAt(state.position);\n    while ((!detectedIndent || state.lineIndent < textIndent) && 0x20 /* Space */ === ch) {\n      state.lineIndent++;\n      ch = state.input.charCodeAt(++state.position);\n    }\n    if (!detectedIndent && state.lineIndent > textIndent) {\n      textIndent = state.lineIndent;\n    }\n    if (is_EOL(ch)) {\n      emptyLines++;\n      continue;\n    }\n\n    // End of the scalar.\n    if (state.lineIndent < textIndent) {\n      // Perform the chomping.\n      if (chomping === CHOMPING_KEEP) {\n        state.result += common.repeat('\\n', emptyLines);\n      } else if (chomping === CHOMPING_CLIP) {\n        if (detectedIndent) {\n          // i.e. only if the scalar is not empty.\n          state.result += '\\n';\n        }\n      }\n\n      // Break this `while` cycle and go to the funciton's epilogue.\n      break;\n    }\n\n    // Folded style: use fancy rules to handle line breaks.\n    if (folding) {\n      // Lines starting with white space characters (more-indented lines) are not folded.\n      if (is_WHITE_SPACE(ch)) {\n        atMoreIndented = true;\n        state.result += common.repeat('\\n', emptyLines + 1);\n\n        // End of more-indented block.\n      } else if (atMoreIndented) {\n        atMoreIndented = false;\n        state.result += common.repeat('\\n', emptyLines + 1);\n\n        // Just one line break - perceive as the same line.\n      } else if (0 === emptyLines) {\n        if (detectedIndent) {\n          // i.e. only if we have already read some scalar content.\n          state.result += ' ';\n        }\n\n        // Several line breaks - perceive as different lines.\n      } else {\n        state.result += common.repeat('\\n', emptyLines);\n      }\n\n      // Literal style: just add exact number of line breaks between content lines.\n    } else if (detectedIndent) {\n      // If current line isn't the first one - count line break from the last content line.\n      state.result += common.repeat('\\n', emptyLines + 1);\n    } else {\n      // In case of the first content line - count only empty lines.\n    }\n    detectedIndent = true;\n    emptyLines = 0;\n    captureStart = state.position;\n    while (!is_EOL(ch) && 0 !== ch) {\n      ch = state.input.charCodeAt(++state.position);\n    }\n    captureSegment(state, captureStart, state.position, false);\n  }\n  return true;\n}\nfunction readBlockSequence(state, nodeIndent) {\n  var _line,\n    _tag = state.tag,\n    _anchor = state.anchor,\n    _result = [],\n    following,\n    detected = false,\n    ch;\n  if (null !== state.anchor) {\n    state.anchorMap[state.anchor] = _result;\n  }\n  ch = state.input.charCodeAt(state.position);\n  while (0 !== ch) {\n    if (0x2D /* - */ !== ch) {\n      break;\n    }\n    following = state.input.charCodeAt(state.position + 1);\n    if (!is_WS_OR_EOL(following)) {\n      break;\n    }\n    detected = true;\n    state.position++;\n    if (skipSeparationSpace(state, true, -1)) {\n      if (state.lineIndent <= nodeIndent) {\n        _result.push(null);\n        ch = state.input.charCodeAt(state.position);\n        continue;\n      }\n    }\n    _line = state.line;\n    composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);\n    _result.push(state.result);\n    skipSeparationSpace(state, true, -1);\n    ch = state.input.charCodeAt(state.position);\n    if ((state.line === _line || state.lineIndent > nodeIndent) && 0 !== ch) {\n      throwError(state, 'bad indentation of a sequence entry');\n    } else if (state.lineIndent < nodeIndent) {\n      break;\n    }\n  }\n  if (detected) {\n    state.tag = _tag;\n    state.anchor = _anchor;\n    state.kind = 'sequence';\n    state.result = _result;\n    return true;\n  }\n  return false;\n}\nfunction readBlockMapping(state, nodeIndent, flowIndent) {\n  var following,\n    allowCompact,\n    _line,\n    _tag = state.tag,\n    _anchor = state.anchor,\n    _result = {},\n    keyTag = null,\n    keyNode = null,\n    valueNode = null,\n    atExplicitKey = false,\n    detected = false,\n    ch;\n  if (null !== state.anchor) {\n    state.anchorMap[state.anchor] = _result;\n  }\n  ch = state.input.charCodeAt(state.position);\n  while (0 !== ch) {\n    following = state.input.charCodeAt(state.position + 1);\n    _line = state.line; // Save the current line.\n\n    //\n    // Explicit notation case. There are two separate blocks:\n    // first for the key (denoted by \"?\") and second for the value (denoted by \":\")\n    //\n    if ((0x3F /* ? */ === ch || 0x3A /* : */ === ch) && is_WS_OR_EOL(following)) {\n      if (0x3F /* ? */ === ch) {\n        if (atExplicitKey) {\n          storeMappingPair(state, _result, keyTag, keyNode, null);\n          keyTag = keyNode = valueNode = null;\n        }\n        detected = true;\n        atExplicitKey = true;\n        allowCompact = true;\n      } else if (atExplicitKey) {\n        // i.e. 0x3A/* : */ === character after the explicit key.\n        atExplicitKey = false;\n        allowCompact = true;\n      } else {\n        throwError(state, 'incomplete explicit mapping pair; a key node is missed');\n      }\n      state.position += 1;\n      ch = following;\n\n      //\n      // Implicit notation case. Flow-style node as the key first, then \":\", and the value.\n      //\n    } else if (composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {\n      if (state.line === _line) {\n        ch = state.input.charCodeAt(state.position);\n        while (is_WHITE_SPACE(ch)) {\n          ch = state.input.charCodeAt(++state.position);\n        }\n        if (0x3A /* : */ === ch) {\n          ch = state.input.charCodeAt(++state.position);\n          if (!is_WS_OR_EOL(ch)) {\n            throwError(state, 'a whitespace character is expected after the key-value separator within a block mapping');\n          }\n          if (atExplicitKey) {\n            storeMappingPair(state, _result, keyTag, keyNode, null);\n            keyTag = keyNode = valueNode = null;\n          }\n          detected = true;\n          atExplicitKey = false;\n          allowCompact = false;\n          keyTag = state.tag;\n          keyNode = state.result;\n        } else if (detected) {\n          throwError(state, 'can not read an implicit mapping pair; a colon is missed');\n        } else {\n          state.tag = _tag;\n          state.anchor = _anchor;\n          return true; // Keep the result of `composeNode`.\n        }\n      } else if (detected) {\n        throwError(state, 'can not read a block mapping entry; a multiline key may not be an implicit key');\n      } else {\n        state.tag = _tag;\n        state.anchor = _anchor;\n        return true; // Keep the result of `composeNode`.\n      }\n    } else {\n      break; // Reading is done. Go to the epilogue.\n    }\n\n    //\n    // Common reading code for both explicit and implicit notations.\n    //\n    if (state.line === _line || state.lineIndent > nodeIndent) {\n      if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {\n        if (atExplicitKey) {\n          keyNode = state.result;\n        } else {\n          valueNode = state.result;\n        }\n      }\n      if (!atExplicitKey) {\n        storeMappingPair(state, _result, keyTag, keyNode, valueNode);\n        keyTag = keyNode = valueNode = null;\n      }\n      skipSeparationSpace(state, true, -1);\n      ch = state.input.charCodeAt(state.position);\n    }\n    if (state.lineIndent > nodeIndent && 0 !== ch) {\n      throwError(state, 'bad indentation of a mapping entry');\n    } else if (state.lineIndent < nodeIndent) {\n      break;\n    }\n  }\n\n  //\n  // Epilogue.\n  //\n\n  // Special case: last mapping's node contains only the key in explicit notation.\n  if (atExplicitKey) {\n    storeMappingPair(state, _result, keyTag, keyNode, null);\n  }\n\n  // Expose the resulting mapping.\n  if (detected) {\n    state.tag = _tag;\n    state.anchor = _anchor;\n    state.kind = 'mapping';\n    state.result = _result;\n  }\n  return detected;\n}\nfunction readTagProperty(state) {\n  var _position,\n    isVerbatim = false,\n    isNamed = false,\n    tagHandle,\n    tagName,\n    ch;\n  ch = state.input.charCodeAt(state.position);\n  if (0x21 /* ! */ !== ch) {\n    return false;\n  }\n  if (null !== state.tag) {\n    throwError(state, 'duplication of a tag property');\n  }\n  ch = state.input.charCodeAt(++state.position);\n  if (0x3C /* < */ === ch) {\n    isVerbatim = true;\n    ch = state.input.charCodeAt(++state.position);\n  } else if (0x21 /* ! */ === ch) {\n    isNamed = true;\n    tagHandle = '!!';\n    ch = state.input.charCodeAt(++state.position);\n  } else {\n    tagHandle = '!';\n  }\n  _position = state.position;\n  if (isVerbatim) {\n    do {\n      ch = state.input.charCodeAt(++state.position);\n    } while (0 !== ch && 0x3E /* > */ !== ch);\n    if (state.position < state.length) {\n      tagName = state.input.slice(_position, state.position);\n      ch = state.input.charCodeAt(++state.position);\n    } else {\n      throwError(state, 'unexpected end of the stream within a verbatim tag');\n    }\n  } else {\n    while (0 !== ch && !is_WS_OR_EOL(ch)) {\n      if (0x21 /* ! */ === ch) {\n        if (!isNamed) {\n          tagHandle = state.input.slice(_position - 1, state.position + 1);\n          if (!PATTERN_TAG_HANDLE.test(tagHandle)) {\n            throwError(state, 'named tag handle cannot contain such characters');\n          }\n          isNamed = true;\n          _position = state.position + 1;\n        } else {\n          throwError(state, 'tag suffix cannot contain exclamation marks');\n        }\n      }\n      ch = state.input.charCodeAt(++state.position);\n    }\n    tagName = state.input.slice(_position, state.position);\n    if (PATTERN_FLOW_INDICATORS.test(tagName)) {\n      throwError(state, 'tag suffix cannot contain flow indicator characters');\n    }\n  }\n  if (tagName && !PATTERN_TAG_URI.test(tagName)) {\n    throwError(state, 'tag name cannot contain such characters: ' + tagName);\n  }\n  if (isVerbatim) {\n    state.tag = tagName;\n  } else if (_hasOwnProperty.call(state.tagMap, tagHandle)) {\n    state.tag = state.tagMap[tagHandle] + tagName;\n  } else if ('!' === tagHandle) {\n    state.tag = '!' + tagName;\n  } else if ('!!' === tagHandle) {\n    state.tag = 'tag:yaml.org,2002:' + tagName;\n  } else {\n    throwError(state, 'undeclared tag handle \"' + tagHandle + '\"');\n  }\n  return true;\n}\nfunction readAnchorProperty(state) {\n  var _position, ch;\n  ch = state.input.charCodeAt(state.position);\n  if (0x26 /* & */ !== ch) {\n    return false;\n  }\n  if (null !== state.anchor) {\n    throwError(state, 'duplication of an anchor property');\n  }\n  ch = state.input.charCodeAt(++state.position);\n  _position = state.position;\n  while (0 !== ch && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {\n    ch = state.input.charCodeAt(++state.position);\n  }\n  if (state.position === _position) {\n    throwError(state, 'name of an anchor node must contain at least one character');\n  }\n  state.anchor = state.input.slice(_position, state.position);\n  return true;\n}\nfunction readAlias(state) {\n  var _position,\n    alias,\n    len = state.length,\n    input = state.input,\n    ch;\n  ch = state.input.charCodeAt(state.position);\n  if (0x2A /* * */ !== ch) {\n    return false;\n  }\n  ch = state.input.charCodeAt(++state.position);\n  _position = state.position;\n  while (0 !== ch && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {\n    ch = state.input.charCodeAt(++state.position);\n  }\n  if (state.position === _position) {\n    throwError(state, 'name of an alias node must contain at least one character');\n  }\n  alias = state.input.slice(_position, state.position);\n  if (!state.anchorMap.hasOwnProperty(alias)) {\n    throwError(state, 'unidentified alias \"' + alias + '\"');\n  }\n  state.result = state.anchorMap[alias];\n  skipSeparationSpace(state, true, -1);\n  return true;\n}\nfunction composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {\n  var allowBlockStyles,\n    allowBlockScalars,\n    allowBlockCollections,\n    indentStatus = 1,\n    // 1: this>parent, 0: this=parent, -1: this<parent\n    atNewLine = false,\n    hasContent = false,\n    typeIndex,\n    typeQuantity,\n    type,\n    flowIndent,\n    blockIndent,\n    _result;\n  state.tag = null;\n  state.anchor = null;\n  state.kind = null;\n  state.result = null;\n  allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT === nodeContext || CONTEXT_BLOCK_IN === nodeContext;\n  if (allowToSeek) {\n    if (skipSeparationSpace(state, true, -1)) {\n      atNewLine = true;\n      if (state.lineIndent > parentIndent) {\n        indentStatus = 1;\n      } else if (state.lineIndent === parentIndent) {\n        indentStatus = 0;\n      } else if (state.lineIndent < parentIndent) {\n        indentStatus = -1;\n      }\n    }\n  }\n  if (1 === indentStatus) {\n    while (readTagProperty(state) || readAnchorProperty(state)) {\n      if (skipSeparationSpace(state, true, -1)) {\n        atNewLine = true;\n        allowBlockCollections = allowBlockStyles;\n        if (state.lineIndent > parentIndent) {\n          indentStatus = 1;\n        } else if (state.lineIndent === parentIndent) {\n          indentStatus = 0;\n        } else if (state.lineIndent < parentIndent) {\n          indentStatus = -1;\n        }\n      } else {\n        allowBlockCollections = false;\n      }\n    }\n  }\n  if (allowBlockCollections) {\n    allowBlockCollections = atNewLine || allowCompact;\n  }\n  if (1 === indentStatus || CONTEXT_BLOCK_OUT === nodeContext) {\n    if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {\n      flowIndent = parentIndent;\n    } else {\n      flowIndent = parentIndent + 1;\n    }\n    blockIndent = state.position - state.lineStart;\n    if (1 === indentStatus) {\n      if (allowBlockCollections && (readBlockSequence(state, blockIndent) || readBlockMapping(state, blockIndent, flowIndent)) || readFlowCollection(state, flowIndent)) {\n        hasContent = true;\n      } else {\n        if (allowBlockScalars && readBlockScalar(state, flowIndent) || readSingleQuotedScalar(state, flowIndent) || readDoubleQuotedScalar(state, flowIndent)) {\n          hasContent = true;\n        } else if (readAlias(state)) {\n          hasContent = true;\n          if (null !== state.tag || null !== state.anchor) {\n            throwError(state, 'alias node should not have any properties');\n          }\n        } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {\n          hasContent = true;\n          if (null === state.tag) {\n            state.tag = '?';\n          }\n        }\n        if (null !== state.anchor) {\n          state.anchorMap[state.anchor] = state.result;\n        }\n      }\n    } else if (0 === indentStatus) {\n      // Special case: block sequences are allowed to have same indentation level as the parent.\n      // http://www.yaml.org/spec/1.2/spec.html#id2799784\n      hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);\n    }\n  }\n  if (null !== state.tag && '!' !== state.tag) {\n    if ('?' === state.tag) {\n      for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {\n        type = state.implicitTypes[typeIndex];\n\n        // Implicit resolving is not allowed for non-scalar types, and '?'\n        // non-specific tag is only assigned to plain scalars. So, it isn't\n        // needed to check for 'kind' conformity.\n\n        if (type.resolve(state.result)) {\n          // `state.result` updated in resolver if matched\n          state.result = type.construct(state.result);\n          state.tag = type.tag;\n          if (null !== state.anchor) {\n            state.anchorMap[state.anchor] = state.result;\n          }\n          break;\n        }\n      }\n    } else if (_hasOwnProperty.call(state.typeMap, state.tag)) {\n      type = state.typeMap[state.tag];\n      if (null !== state.result && type.kind !== state.kind) {\n        throwError(state, 'unacceptable node kind for !<' + state.tag + '> tag; it should be \"' + type.kind + '\", not \"' + state.kind + '\"');\n      }\n      if (!type.resolve(state.result)) {\n        // `state.result` updated in resolver if matched\n        throwError(state, 'cannot resolve a node with !<' + state.tag + '> explicit tag');\n      } else {\n        state.result = type.construct(state.result);\n        if (null !== state.anchor) {\n          state.anchorMap[state.anchor] = state.result;\n        }\n      }\n    } else {\n      throwWarning(state, 'unknown tag !<' + state.tag + '>');\n    }\n  }\n  return null !== state.tag || null !== state.anchor || hasContent;\n}\nfunction readDocument(state) {\n  var documentStart = state.position,\n    _position,\n    directiveName,\n    directiveArgs,\n    hasDirectives = false,\n    ch;\n  state.version = null;\n  state.checkLineBreaks = state.legacy;\n  state.tagMap = {};\n  state.anchorMap = {};\n  while (0 !== (ch = state.input.charCodeAt(state.position))) {\n    skipSeparationSpace(state, true, -1);\n    ch = state.input.charCodeAt(state.position);\n    if (state.lineIndent > 0 || 0x25 /* % */ !== ch) {\n      break;\n    }\n    hasDirectives = true;\n    ch = state.input.charCodeAt(++state.position);\n    _position = state.position;\n    while (0 !== ch && !is_WS_OR_EOL(ch)) {\n      ch = state.input.charCodeAt(++state.position);\n    }\n    directiveName = state.input.slice(_position, state.position);\n    directiveArgs = [];\n    if (directiveName.length < 1) {\n      throwError(state, 'directive name must not be less than one character in length');\n    }\n    while (0 !== ch) {\n      while (is_WHITE_SPACE(ch)) {\n        ch = state.input.charCodeAt(++state.position);\n      }\n      if (0x23 /* # */ === ch) {\n        do {\n          ch = state.input.charCodeAt(++state.position);\n        } while (0 !== ch && !is_EOL(ch));\n        break;\n      }\n      if (is_EOL(ch)) {\n        break;\n      }\n      _position = state.position;\n      while (0 !== ch && !is_WS_OR_EOL(ch)) {\n        ch = state.input.charCodeAt(++state.position);\n      }\n      directiveArgs.push(state.input.slice(_position, state.position));\n    }\n    if (0 !== ch) {\n      readLineBreak(state);\n    }\n    if (_hasOwnProperty.call(directiveHandlers, directiveName)) {\n      directiveHandlers[directiveName](state, directiveName, directiveArgs);\n    } else {\n      throwWarning(state, 'unknown document directive \"' + directiveName + '\"');\n    }\n  }\n  skipSeparationSpace(state, true, -1);\n  if (0 === state.lineIndent && 0x2D /* - */ === state.input.charCodeAt(state.position) && 0x2D /* - */ === state.input.charCodeAt(state.position + 1) && 0x2D /* - */ === state.input.charCodeAt(state.position + 2)) {\n    state.position += 3;\n    skipSeparationSpace(state, true, -1);\n  } else if (hasDirectives) {\n    throwError(state, 'directives end mark is expected');\n  }\n  composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);\n  skipSeparationSpace(state, true, -1);\n  if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {\n    throwWarning(state, 'non-ASCII line breaks are interpreted as content');\n  }\n  state.documents.push(state.result);\n  if (state.position === state.lineStart && testDocumentSeparator(state)) {\n    if (0x2E /* . */ === state.input.charCodeAt(state.position)) {\n      state.position += 3;\n      skipSeparationSpace(state, true, -1);\n    }\n    return;\n  }\n  if (state.position < state.length - 1) {\n    throwError(state, 'end of the stream or a document separator is expected');\n  } else {\n    return;\n  }\n}\nfunction loadDocuments(input, options) {\n  input = String(input);\n  options = options || {};\n  if (input.length !== 0) {\n    // Add tailing `\\n` if not exists\n    if (0x0A /* LF */ !== input.charCodeAt(input.length - 1) && 0x0D /* CR */ !== input.charCodeAt(input.length - 1)) {\n      input += '\\n';\n    }\n\n    // Strip BOM\n    if (input.charCodeAt(0) === 0xFEFF) {\n      input = input.slice(1);\n    }\n  }\n  var state = new State(input, options);\n  if (PATTERN_NON_PRINTABLE.test(state.input)) {\n    throwError(state, 'the stream contains non-printable characters');\n  }\n\n  // Use 0 as string terminator. That significantly simplifies bounds check.\n  state.input += '\\0';\n  while (0x20 /* Space */ === state.input.charCodeAt(state.position)) {\n    state.lineIndent += 1;\n    state.position += 1;\n  }\n  while (state.position < state.length - 1) {\n    readDocument(state);\n  }\n  return state.documents;\n}\nfunction loadAll(input, iterator, options) {\n  var documents = loadDocuments(input, options),\n    index,\n    length;\n  for (index = 0, length = documents.length; index < length; index += 1) {\n    iterator(documents[index]);\n  }\n}\nfunction load(input, options) {\n  var documents = loadDocuments(input, options),\n    index,\n    length;\n  if (0 === documents.length) {\n    /*eslint-disable no-undefined*/\n    return undefined;\n  } else if (1 === documents.length) {\n    return documents[0];\n  }\n  throw new YAMLException('expected a single document in the stream, but found more');\n}\nfunction safeLoadAll(input, output, options) {\n  loadAll(input, output, common.extend({\n    schema: DEFAULT_SAFE_SCHEMA\n  }, options));\n}\nfunction safeLoad(input, options) {\n  return load(input, common.extend({\n    schema: DEFAULT_SAFE_SCHEMA\n  }, options));\n}\nmodule.exports.loadAll = loadAll;\nmodule.exports.load = load;\nmodule.exports.safeLoadAll = safeLoadAll;\nmodule.exports.safeLoad = safeLoad;","map":{"version":3,"names":["common","require","YAMLException","Mark","DEFAULT_SAFE_SCHEMA","DEFAULT_FULL_SCHEMA","_hasOwnProperty","Object","prototype","hasOwnProperty","CONTEXT_FLOW_IN","CONTEXT_FLOW_OUT","CONTEXT_BLOCK_IN","CONTEXT_BLOCK_OUT","CHOMPING_CLIP","CHOMPING_STRIP","CHOMPING_KEEP","PATTERN_NON_PRINTABLE","PATTERN_NON_ASCII_LINE_BREAKS","PATTERN_FLOW_INDICATORS","PATTERN_TAG_HANDLE","PATTERN_TAG_URI","is_EOL","c","is_WHITE_SPACE","is_WS_OR_EOL","is_FLOW_INDICATOR","fromHexCode","lc","escapedHexLen","fromDecimalCode","simpleEscapeSequence","charFromCodepoint","String","fromCharCode","simpleEscapeCheck","Array","simpleEscapeMap","i","State","input","options","filename","schema","onWarning","legacy","implicitTypes","compiledImplicit","typeMap","compiledTypeMap","length","position","line","lineStart","lineIndent","documents","generateError","state","message","throwError","throwWarning","error","call","directiveHandlers","YAML","handleYamlDirective","name","args","match","major","minor","version","exec","parseInt","checkLineBreaks","TAG","handleTagDirective","handle","prefix","test","tagMap","captureSegment","start","end","checkJson","_position","_length","_character","_result","slice","charCodeAt","result","mergeMappings","destination","source","sourceKeys","key","index","quantity","isObject","keys","storeMappingPair","keyTag","keyNode","valueNode","isArray","readLineBreak","ch","skipSeparationSpace","allowComments","checkIndent","lineBreaks","testDocumentSeparator","writeFoldedLines","count","repeat","readPlainScalar","nodeIndent","withinFlowCollection","preceding","following","captureStart","captureEnd","hasPendingContent","_line","_lineStart","_lineIndent","_kind","kind","readSingleQuotedScalar","readDoubleQuotedScalar","hexLength","hexResult","tmp","tmpEsc","readFlowCollection","readNext","_tag","tag","_anchor","anchor","terminator","isPair","isExplicitPair","isMapping","anchorMap","composeNode","push","readBlockScalar","folding","chomping","detectedIndent","textIndent","emptyLines","atMoreIndented","readBlockSequence","detected","readBlockMapping","flowIndent","allowCompact","atExplicitKey","readTagProperty","isVerbatim","isNamed","tagHandle","tagName","readAnchorProperty","readAlias","alias","len","parentIndent","nodeContext","allowToSeek","allowBlockStyles","allowBlockScalars","allowBlockCollections","indentStatus","atNewLine","hasContent","typeIndex","typeQuantity","type","blockIndent","resolve","construct","readDocument","documentStart","directiveName","directiveArgs","hasDirectives","loadDocuments","loadAll","iterator","load","undefined","safeLoadAll","output","extend","safeLoad","module","exports"],"sources":["C:/Users/SashinTulsiram/Documents/Software/react-frontend-bulma/node_modules/svgo/node_modules/js-yaml/lib/js-yaml/loader.js"],"sourcesContent":["'use strict';\n\n/*eslint-disable max-len,no-use-before-define*/\n\nvar common              = require('./common');\nvar YAMLException       = require('./exception');\nvar Mark                = require('./mark');\nvar DEFAULT_SAFE_SCHEMA = require('./schema/default_safe');\nvar DEFAULT_FULL_SCHEMA = require('./schema/default_full');\n\n\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\n\n\nvar CONTEXT_FLOW_IN   = 1;\nvar CONTEXT_FLOW_OUT  = 2;\nvar CONTEXT_BLOCK_IN  = 3;\nvar CONTEXT_BLOCK_OUT = 4;\n\n\nvar CHOMPING_CLIP  = 1;\nvar CHOMPING_STRIP = 2;\nvar CHOMPING_KEEP  = 3;\n\n\nvar PATTERN_NON_PRINTABLE         = /[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F-\\x84\\x86-\\x9F\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\nvar PATTERN_NON_ASCII_LINE_BREAKS = /[\\x85\\u2028\\u2029]/;\nvar PATTERN_FLOW_INDICATORS       = /[,\\[\\]\\{\\}]/;\nvar PATTERN_TAG_HANDLE            = /^(?:!|!!|![a-z\\-]+!)$/i;\nvar PATTERN_TAG_URI               = /^(?:!|[^,\\[\\]\\{\\}])(?:%[0-9a-f]{2}|[0-9a-z\\-#;\\/\\?:@&=\\+\\$,_\\.!~\\*'\\(\\)\\[\\]])*$/i;\n\n\nfunction is_EOL(c) {\n  return (c === 0x0A/* LF */) || (c === 0x0D/* CR */);\n}\n\nfunction is_WHITE_SPACE(c) {\n  return (c === 0x09/* Tab */) || (c === 0x20/* Space */);\n}\n\nfunction is_WS_OR_EOL(c) {\n  return (c === 0x09/* Tab */) ||\n         (c === 0x20/* Space */) ||\n         (c === 0x0A/* LF */) ||\n         (c === 0x0D/* CR */);\n}\n\nfunction is_FLOW_INDICATOR(c) {\n  return 0x2C/* , */ === c ||\n         0x5B/* [ */ === c ||\n         0x5D/* ] */ === c ||\n         0x7B/* { */ === c ||\n         0x7D/* } */ === c;\n}\n\nfunction fromHexCode(c) {\n  var lc;\n\n  if ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) {\n    return c - 0x30;\n  }\n\n  /*eslint-disable no-bitwise*/\n  lc = c | 0x20;\n\n  if ((0x61/* a */ <= lc) && (lc <= 0x66/* f */)) {\n    return lc - 0x61 + 10;\n  }\n\n  return -1;\n}\n\nfunction escapedHexLen(c) {\n  if (c === 0x78/* x */) { return 2; }\n  if (c === 0x75/* u */) { return 4; }\n  if (c === 0x55/* U */) { return 8; }\n  return 0;\n}\n\nfunction fromDecimalCode(c) {\n  if ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) {\n    return c - 0x30;\n  }\n\n  return -1;\n}\n\nfunction simpleEscapeSequence(c) {\n  return (c === 0x30/* 0 */) ? '\\x00' :\n        (c === 0x61/* a */) ? '\\x07' :\n        (c === 0x62/* b */) ? '\\x08' :\n        (c === 0x74/* t */) ? '\\x09' :\n        (c === 0x09/* Tab */) ? '\\x09' :\n        (c === 0x6E/* n */) ? '\\x0A' :\n        (c === 0x76/* v */) ? '\\x0B' :\n        (c === 0x66/* f */) ? '\\x0C' :\n        (c === 0x72/* r */) ? '\\x0D' :\n        (c === 0x65/* e */) ? '\\x1B' :\n        (c === 0x20/* Space */) ? ' ' :\n        (c === 0x22/* \" */) ? '\\x22' :\n        (c === 0x2F/* / */) ? '/' :\n        (c === 0x5C/* \\ */) ? '\\x5C' :\n        (c === 0x4E/* N */) ? '\\x85' :\n        (c === 0x5F/* _ */) ? '\\xA0' :\n        (c === 0x4C/* L */) ? '\\u2028' :\n        (c === 0x50/* P */) ? '\\u2029' : '';\n}\n\nfunction charFromCodepoint(c) {\n  if (c <= 0xFFFF) {\n    return String.fromCharCode(c);\n  }\n  // Encode UTF-16 surrogate pair\n  // https://en.wikipedia.org/wiki/UTF-16#Code_points_U.2B010000_to_U.2B10FFFF\n  return String.fromCharCode(((c - 0x010000) >> 10) + 0xD800,\n                             ((c - 0x010000) & 0x03FF) + 0xDC00);\n}\n\nvar simpleEscapeCheck = new Array(256); // integer, for fast access\nvar simpleEscapeMap = new Array(256);\nfor (var i = 0; i < 256; i++) {\n  simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;\n  simpleEscapeMap[i] = simpleEscapeSequence(i);\n}\n\n\nfunction State(input, options) {\n  this.input = input;\n\n  this.filename  = options['filename']  || null;\n  this.schema    = options['schema']    || DEFAULT_FULL_SCHEMA;\n  this.onWarning = options['onWarning'] || null;\n  this.legacy    = options['legacy']    || false;\n\n  this.implicitTypes = this.schema.compiledImplicit;\n  this.typeMap       = this.schema.compiledTypeMap;\n\n  this.length     = input.length;\n  this.position   = 0;\n  this.line       = 0;\n  this.lineStart  = 0;\n  this.lineIndent = 0;\n\n  this.documents = [];\n\n  /*\n  this.version;\n  this.checkLineBreaks;\n  this.tagMap;\n  this.anchorMap;\n  this.tag;\n  this.anchor;\n  this.kind;\n  this.result;*/\n\n}\n\n\nfunction generateError(state, message) {\n  return new YAMLException(\n    message,\n    new Mark(state.filename, state.input, state.position, state.line, (state.position - state.lineStart)));\n}\n\nfunction throwError(state, message) {\n  throw generateError(state, message);\n}\n\nfunction throwWarning(state, message) {\n  var error = generateError(state, message);\n\n  if (state.onWarning) {\n    state.onWarning.call(null, error);\n  } else {\n    throw error;\n  }\n}\n\n\nvar directiveHandlers = {\n\n  YAML: function handleYamlDirective(state, name, args) {\n\n      var match, major, minor;\n\n      if (null !== state.version) {\n        throwError(state, 'duplication of %YAML directive');\n      }\n\n      if (1 !== args.length) {\n        throwError(state, 'YAML directive accepts exactly one argument');\n      }\n\n      match = /^([0-9]+)\\.([0-9]+)$/.exec(args[0]);\n\n      if (null === match) {\n        throwError(state, 'ill-formed argument of the YAML directive');\n      }\n\n      major = parseInt(match[1], 10);\n      minor = parseInt(match[2], 10);\n\n      if (1 !== major) {\n        throwError(state, 'unacceptable YAML version of the document');\n      }\n\n      state.version = args[0];\n      state.checkLineBreaks = (minor < 2);\n\n      if (1 !== minor && 2 !== minor) {\n        throwWarning(state, 'unsupported YAML version of the document');\n      }\n    },\n\n  TAG: function handleTagDirective(state, name, args) {\n\n      var handle, prefix;\n\n      if (2 !== args.length) {\n        throwError(state, 'TAG directive accepts exactly two arguments');\n      }\n\n      handle = args[0];\n      prefix = args[1];\n\n      if (!PATTERN_TAG_HANDLE.test(handle)) {\n        throwError(state, 'ill-formed tag handle (first argument) of the TAG directive');\n      }\n\n      if (_hasOwnProperty.call(state.tagMap, handle)) {\n        throwError(state, 'there is a previously declared suffix for \"' + handle + '\" tag handle');\n      }\n\n      if (!PATTERN_TAG_URI.test(prefix)) {\n        throwError(state, 'ill-formed tag prefix (second argument) of the TAG directive');\n      }\n\n      state.tagMap[handle] = prefix;\n    }\n};\n\n\nfunction captureSegment(state, start, end, checkJson) {\n  var _position, _length, _character, _result;\n\n  if (start < end) {\n    _result = state.input.slice(start, end);\n\n    if (checkJson) {\n      for (_position = 0, _length = _result.length;\n           _position < _length;\n           _position += 1) {\n        _character = _result.charCodeAt(_position);\n        if (!(0x09 === _character ||\n              0x20 <= _character && _character <= 0x10FFFF)) {\n          throwError(state, 'expected valid JSON character');\n        }\n      }\n    }\n\n    state.result += _result;\n  }\n}\n\nfunction mergeMappings(state, destination, source) {\n  var sourceKeys, key, index, quantity;\n\n  if (!common.isObject(source)) {\n    throwError(state, 'cannot merge mappings; the provided source object is unacceptable');\n  }\n\n  sourceKeys = Object.keys(source);\n\n  for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {\n    key = sourceKeys[index];\n\n    if (!_hasOwnProperty.call(destination, key)) {\n      destination[key] = source[key];\n    }\n  }\n}\n\nfunction storeMappingPair(state, _result, keyTag, keyNode, valueNode) {\n  var index, quantity;\n\n  keyNode = String(keyNode);\n\n  if (null === _result) {\n    _result = {};\n  }\n\n  if ('tag:yaml.org,2002:merge' === keyTag) {\n    if (Array.isArray(valueNode)) {\n      for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {\n        mergeMappings(state, _result, valueNode[index]);\n      }\n    } else {\n      mergeMappings(state, _result, valueNode);\n    }\n  } else {\n    _result[keyNode] = valueNode;\n  }\n\n  return _result;\n}\n\nfunction readLineBreak(state) {\n  var ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (0x0A/* LF */ === ch) {\n    state.position++;\n  } else if (0x0D/* CR */ === ch) {\n    state.position++;\n    if (0x0A/* LF */ === state.input.charCodeAt(state.position)) {\n      state.position++;\n    }\n  } else {\n    throwError(state, 'a line break is expected');\n  }\n\n  state.line += 1;\n  state.lineStart = state.position;\n}\n\nfunction skipSeparationSpace(state, allowComments, checkIndent) {\n  var lineBreaks = 0,\n      ch = state.input.charCodeAt(state.position);\n\n  while (0 !== ch) {\n    while (is_WHITE_SPACE(ch)) {\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    if (allowComments && 0x23/* # */ === ch) {\n      do {\n        ch = state.input.charCodeAt(++state.position);\n      } while (ch !== 0x0A/* LF */ && ch !== 0x0D/* CR */ && 0 !== ch);\n    }\n\n    if (is_EOL(ch)) {\n      readLineBreak(state);\n\n      ch = state.input.charCodeAt(state.position);\n      lineBreaks++;\n      state.lineIndent = 0;\n\n      while (0x20/* Space */ === ch) {\n        state.lineIndent++;\n        ch = state.input.charCodeAt(++state.position);\n      }\n    } else {\n      break;\n    }\n  }\n\n  if (-1 !== checkIndent && 0 !== lineBreaks && state.lineIndent < checkIndent) {\n    throwWarning(state, 'deficient indentation');\n  }\n\n  return lineBreaks;\n}\n\nfunction testDocumentSeparator(state) {\n  var _position = state.position,\n      ch;\n\n  ch = state.input.charCodeAt(_position);\n\n  // Condition state.position === state.lineStart is tested\n  // in parent on each call, for efficiency. No needs to test here again.\n  if ((0x2D/* - */ === ch || 0x2E/* . */ === ch) &&\n      state.input.charCodeAt(_position + 1) === ch &&\n      state.input.charCodeAt(_position + 2) === ch) {\n\n    _position += 3;\n\n    ch = state.input.charCodeAt(_position);\n\n    if (ch === 0 || is_WS_OR_EOL(ch)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction writeFoldedLines(state, count) {\n  if (1 === count) {\n    state.result += ' ';\n  } else if (count > 1) {\n    state.result += common.repeat('\\n', count - 1);\n  }\n}\n\n\nfunction readPlainScalar(state, nodeIndent, withinFlowCollection) {\n  var preceding,\n      following,\n      captureStart,\n      captureEnd,\n      hasPendingContent,\n      _line,\n      _lineStart,\n      _lineIndent,\n      _kind = state.kind,\n      _result = state.result,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (is_WS_OR_EOL(ch)             ||\n      is_FLOW_INDICATOR(ch)        ||\n      0x23/* # */           === ch ||\n      0x26/* & */           === ch ||\n      0x2A/* * */           === ch ||\n      0x21/* ! */           === ch ||\n      0x7C/* | */           === ch ||\n      0x3E/* > */           === ch ||\n      0x27/* ' */           === ch ||\n      0x22/* \" */           === ch ||\n      0x25/* % */           === ch ||\n      0x40/* @ */           === ch ||\n      0x60/* ` */           === ch) {\n    return false;\n  }\n\n  if (0x3F/* ? */ === ch || 0x2D/* - */ === ch) {\n    following = state.input.charCodeAt(state.position + 1);\n\n    if (is_WS_OR_EOL(following) ||\n        withinFlowCollection && is_FLOW_INDICATOR(following)) {\n      return false;\n    }\n  }\n\n  state.kind = 'scalar';\n  state.result = '';\n  captureStart = captureEnd = state.position;\n  hasPendingContent = false;\n\n  while (0 !== ch) {\n    if (0x3A/* : */ === ch) {\n      following = state.input.charCodeAt(state.position + 1);\n\n      if (is_WS_OR_EOL(following) ||\n          withinFlowCollection && is_FLOW_INDICATOR(following)) {\n        break;\n      }\n\n    } else if (0x23/* # */ === ch) {\n      preceding = state.input.charCodeAt(state.position - 1);\n\n      if (is_WS_OR_EOL(preceding)) {\n        break;\n      }\n\n    } else if ((state.position === state.lineStart && testDocumentSeparator(state)) ||\n               withinFlowCollection && is_FLOW_INDICATOR(ch)) {\n      break;\n\n    } else if (is_EOL(ch)) {\n      _line = state.line;\n      _lineStart = state.lineStart;\n      _lineIndent = state.lineIndent;\n      skipSeparationSpace(state, false, -1);\n\n      if (state.lineIndent >= nodeIndent) {\n        hasPendingContent = true;\n        ch = state.input.charCodeAt(state.position);\n        continue;\n      } else {\n        state.position = captureEnd;\n        state.line = _line;\n        state.lineStart = _lineStart;\n        state.lineIndent = _lineIndent;\n        break;\n      }\n    }\n\n    if (hasPendingContent) {\n      captureSegment(state, captureStart, captureEnd, false);\n      writeFoldedLines(state, state.line - _line);\n      captureStart = captureEnd = state.position;\n      hasPendingContent = false;\n    }\n\n    if (!is_WHITE_SPACE(ch)) {\n      captureEnd = state.position + 1;\n    }\n\n    ch = state.input.charCodeAt(++state.position);\n  }\n\n  captureSegment(state, captureStart, captureEnd, false);\n\n  if (state.result) {\n    return true;\n  }\n\n  state.kind = _kind;\n  state.result = _result;\n  return false;\n}\n\nfunction readSingleQuotedScalar(state, nodeIndent) {\n  var ch,\n      captureStart, captureEnd;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (0x27/* ' */ !== ch) {\n    return false;\n  }\n\n  state.kind = 'scalar';\n  state.result = '';\n  state.position++;\n  captureStart = captureEnd = state.position;\n\n  while (0 !== (ch = state.input.charCodeAt(state.position))) {\n    if (0x27/* ' */ === ch) {\n      captureSegment(state, captureStart, state.position, true);\n      ch = state.input.charCodeAt(++state.position);\n\n      if (0x27/* ' */ === ch) {\n        captureStart = captureEnd = state.position;\n        state.position++;\n      } else {\n        return true;\n      }\n\n    } else if (is_EOL(ch)) {\n      captureSegment(state, captureStart, captureEnd, true);\n      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));\n      captureStart = captureEnd = state.position;\n\n    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {\n      throwError(state, 'unexpected end of the document within a single quoted scalar');\n\n    } else {\n      state.position++;\n      captureEnd = state.position;\n    }\n  }\n\n  throwError(state, 'unexpected end of the stream within a single quoted scalar');\n}\n\nfunction readDoubleQuotedScalar(state, nodeIndent) {\n  var captureStart,\n      captureEnd,\n      hexLength,\n      hexResult,\n      tmp, tmpEsc,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (0x22/* \" */ !== ch) {\n    return false;\n  }\n\n  state.kind = 'scalar';\n  state.result = '';\n  state.position++;\n  captureStart = captureEnd = state.position;\n\n  while (0 !== (ch = state.input.charCodeAt(state.position))) {\n    if (0x22/* \" */ === ch) {\n      captureSegment(state, captureStart, state.position, true);\n      state.position++;\n      return true;\n\n    } else if (0x5C/* \\ */ === ch) {\n      captureSegment(state, captureStart, state.position, true);\n      ch = state.input.charCodeAt(++state.position);\n\n      if (is_EOL(ch)) {\n        skipSeparationSpace(state, false, nodeIndent);\n\n        // TODO: rework to inline fn with no type cast?\n      } else if (ch < 256 && simpleEscapeCheck[ch]) {\n        state.result += simpleEscapeMap[ch];\n        state.position++;\n\n      } else if ((tmp = escapedHexLen(ch)) > 0) {\n        hexLength = tmp;\n        hexResult = 0;\n\n        for (; hexLength > 0; hexLength--) {\n          ch = state.input.charCodeAt(++state.position);\n\n          if ((tmp = fromHexCode(ch)) >= 0) {\n            hexResult = (hexResult << 4) + tmp;\n\n          } else {\n            throwError(state, 'expected hexadecimal character');\n          }\n        }\n\n        state.result += charFromCodepoint(hexResult);\n\n        state.position++;\n\n      } else {\n        throwError(state, 'unknown escape sequence');\n      }\n\n      captureStart = captureEnd = state.position;\n\n    } else if (is_EOL(ch)) {\n      captureSegment(state, captureStart, captureEnd, true);\n      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));\n      captureStart = captureEnd = state.position;\n\n    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {\n      throwError(state, 'unexpected end of the document within a double quoted scalar');\n\n    } else {\n      state.position++;\n      captureEnd = state.position;\n    }\n  }\n\n  throwError(state, 'unexpected end of the stream within a double quoted scalar');\n}\n\nfunction readFlowCollection(state, nodeIndent) {\n  var readNext = true,\n      _line,\n      _tag     = state.tag,\n      _result,\n      _anchor  = state.anchor,\n      following,\n      terminator,\n      isPair,\n      isExplicitPair,\n      isMapping,\n      keyNode,\n      keyTag,\n      valueNode,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch === 0x5B/* [ */) {\n    terminator = 0x5D;/* ] */\n    isMapping = false;\n    _result = [];\n  } else if (ch === 0x7B/* { */) {\n    terminator = 0x7D;/* } */\n    isMapping = true;\n    _result = {};\n  } else {\n    return false;\n  }\n\n  if (null !== state.anchor) {\n    state.anchorMap[state.anchor] = _result;\n  }\n\n  ch = state.input.charCodeAt(++state.position);\n\n  while (0 !== ch) {\n    skipSeparationSpace(state, true, nodeIndent);\n\n    ch = state.input.charCodeAt(state.position);\n\n    if (ch === terminator) {\n      state.position++;\n      state.tag = _tag;\n      state.anchor = _anchor;\n      state.kind = isMapping ? 'mapping' : 'sequence';\n      state.result = _result;\n      return true;\n    } else if (!readNext) {\n      throwError(state, 'missed comma between flow collection entries');\n    }\n\n    keyTag = keyNode = valueNode = null;\n    isPair = isExplicitPair = false;\n\n    if (0x3F/* ? */ === ch) {\n      following = state.input.charCodeAt(state.position + 1);\n\n      if (is_WS_OR_EOL(following)) {\n        isPair = isExplicitPair = true;\n        state.position++;\n        skipSeparationSpace(state, true, nodeIndent);\n      }\n    }\n\n    _line = state.line;\n    composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);\n    keyTag = state.tag;\n    keyNode = state.result;\n    skipSeparationSpace(state, true, nodeIndent);\n\n    ch = state.input.charCodeAt(state.position);\n\n    if ((isExplicitPair || state.line === _line) && 0x3A/* : */ === ch) {\n      isPair = true;\n      ch = state.input.charCodeAt(++state.position);\n      skipSeparationSpace(state, true, nodeIndent);\n      composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);\n      valueNode = state.result;\n    }\n\n    if (isMapping) {\n      storeMappingPair(state, _result, keyTag, keyNode, valueNode);\n    } else if (isPair) {\n      _result.push(storeMappingPair(state, null, keyTag, keyNode, valueNode));\n    } else {\n      _result.push(keyNode);\n    }\n\n    skipSeparationSpace(state, true, nodeIndent);\n\n    ch = state.input.charCodeAt(state.position);\n\n    if (0x2C/* , */ === ch) {\n      readNext = true;\n      ch = state.input.charCodeAt(++state.position);\n    } else {\n      readNext = false;\n    }\n  }\n\n  throwError(state, 'unexpected end of the stream within a flow collection');\n}\n\nfunction readBlockScalar(state, nodeIndent) {\n  var captureStart,\n      folding,\n      chomping       = CHOMPING_CLIP,\n      detectedIndent = false,\n      textIndent     = nodeIndent,\n      emptyLines     = 0,\n      atMoreIndented = false,\n      tmp,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch === 0x7C/* | */) {\n    folding = false;\n  } else if (ch === 0x3E/* > */) {\n    folding = true;\n  } else {\n    return false;\n  }\n\n  state.kind = 'scalar';\n  state.result = '';\n\n  while (0 !== ch) {\n    ch = state.input.charCodeAt(++state.position);\n\n    if (0x2B/* + */ === ch || 0x2D/* - */ === ch) {\n      if (CHOMPING_CLIP === chomping) {\n        chomping = (0x2B/* + */ === ch) ? CHOMPING_KEEP : CHOMPING_STRIP;\n      } else {\n        throwError(state, 'repeat of a chomping mode identifier');\n      }\n\n    } else if ((tmp = fromDecimalCode(ch)) >= 0) {\n      if (tmp === 0) {\n        throwError(state, 'bad explicit indentation width of a block scalar; it cannot be less than one');\n      } else if (!detectedIndent) {\n        textIndent = nodeIndent + tmp - 1;\n        detectedIndent = true;\n      } else {\n        throwError(state, 'repeat of an indentation width identifier');\n      }\n\n    } else {\n      break;\n    }\n  }\n\n  if (is_WHITE_SPACE(ch)) {\n    do { ch = state.input.charCodeAt(++state.position); }\n    while (is_WHITE_SPACE(ch));\n\n    if (0x23/* # */ === ch) {\n      do { ch = state.input.charCodeAt(++state.position); }\n      while (!is_EOL(ch) && (0 !== ch));\n    }\n  }\n\n  while (0 !== ch) {\n    readLineBreak(state);\n    state.lineIndent = 0;\n\n    ch = state.input.charCodeAt(state.position);\n\n    while ((!detectedIndent || state.lineIndent < textIndent) &&\n           (0x20/* Space */ === ch)) {\n      state.lineIndent++;\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    if (!detectedIndent && state.lineIndent > textIndent) {\n      textIndent = state.lineIndent;\n    }\n\n    if (is_EOL(ch)) {\n      emptyLines++;\n      continue;\n    }\n\n    // End of the scalar.\n    if (state.lineIndent < textIndent) {\n\n      // Perform the chomping.\n      if (chomping === CHOMPING_KEEP) {\n        state.result += common.repeat('\\n', emptyLines);\n      } else if (chomping === CHOMPING_CLIP) {\n        if (detectedIndent) { // i.e. only if the scalar is not empty.\n          state.result += '\\n';\n        }\n      }\n\n      // Break this `while` cycle and go to the funciton's epilogue.\n      break;\n    }\n\n    // Folded style: use fancy rules to handle line breaks.\n    if (folding) {\n\n      // Lines starting with white space characters (more-indented lines) are not folded.\n      if (is_WHITE_SPACE(ch)) {\n        atMoreIndented = true;\n        state.result += common.repeat('\\n', emptyLines + 1);\n\n      // End of more-indented block.\n      } else if (atMoreIndented) {\n        atMoreIndented = false;\n        state.result += common.repeat('\\n', emptyLines + 1);\n\n      // Just one line break - perceive as the same line.\n      } else if (0 === emptyLines) {\n        if (detectedIndent) { // i.e. only if we have already read some scalar content.\n          state.result += ' ';\n        }\n\n      // Several line breaks - perceive as different lines.\n      } else {\n        state.result += common.repeat('\\n', emptyLines);\n      }\n\n    // Literal style: just add exact number of line breaks between content lines.\n    } else if (detectedIndent) {\n      // If current line isn't the first one - count line break from the last content line.\n      state.result += common.repeat('\\n', emptyLines + 1);\n    } else {\n      // In case of the first content line - count only empty lines.\n    }\n\n    detectedIndent = true;\n    emptyLines = 0;\n    captureStart = state.position;\n\n    while (!is_EOL(ch) && (0 !== ch)) {\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    captureSegment(state, captureStart, state.position, false);\n  }\n\n  return true;\n}\n\nfunction readBlockSequence(state, nodeIndent) {\n  var _line,\n      _tag      = state.tag,\n      _anchor   = state.anchor,\n      _result   = [],\n      following,\n      detected  = false,\n      ch;\n\n  if (null !== state.anchor) {\n    state.anchorMap[state.anchor] = _result;\n  }\n\n  ch = state.input.charCodeAt(state.position);\n\n  while (0 !== ch) {\n\n    if (0x2D/* - */ !== ch) {\n      break;\n    }\n\n    following = state.input.charCodeAt(state.position + 1);\n\n    if (!is_WS_OR_EOL(following)) {\n      break;\n    }\n\n    detected = true;\n    state.position++;\n\n    if (skipSeparationSpace(state, true, -1)) {\n      if (state.lineIndent <= nodeIndent) {\n        _result.push(null);\n        ch = state.input.charCodeAt(state.position);\n        continue;\n      }\n    }\n\n    _line = state.line;\n    composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);\n    _result.push(state.result);\n    skipSeparationSpace(state, true, -1);\n\n    ch = state.input.charCodeAt(state.position);\n\n    if ((state.line === _line || state.lineIndent > nodeIndent) && (0 !== ch)) {\n      throwError(state, 'bad indentation of a sequence entry');\n    } else if (state.lineIndent < nodeIndent) {\n      break;\n    }\n  }\n\n  if (detected) {\n    state.tag = _tag;\n    state.anchor = _anchor;\n    state.kind = 'sequence';\n    state.result = _result;\n    return true;\n  }\n  return false;\n}\n\nfunction readBlockMapping(state, nodeIndent, flowIndent) {\n  var following,\n      allowCompact,\n      _line,\n      _tag          = state.tag,\n      _anchor       = state.anchor,\n      _result       = {},\n      keyTag        = null,\n      keyNode       = null,\n      valueNode     = null,\n      atExplicitKey = false,\n      detected      = false,\n      ch;\n\n  if (null !== state.anchor) {\n    state.anchorMap[state.anchor] = _result;\n  }\n\n  ch = state.input.charCodeAt(state.position);\n\n  while (0 !== ch) {\n    following = state.input.charCodeAt(state.position + 1);\n    _line = state.line; // Save the current line.\n\n    //\n    // Explicit notation case. There are two separate blocks:\n    // first for the key (denoted by \"?\") and second for the value (denoted by \":\")\n    //\n    if ((0x3F/* ? */ === ch || 0x3A/* : */  === ch) && is_WS_OR_EOL(following)) {\n\n      if (0x3F/* ? */ === ch) {\n        if (atExplicitKey) {\n          storeMappingPair(state, _result, keyTag, keyNode, null);\n          keyTag = keyNode = valueNode = null;\n        }\n\n        detected = true;\n        atExplicitKey = true;\n        allowCompact = true;\n\n      } else if (atExplicitKey) {\n        // i.e. 0x3A/* : */ === character after the explicit key.\n        atExplicitKey = false;\n        allowCompact = true;\n\n      } else {\n        throwError(state, 'incomplete explicit mapping pair; a key node is missed');\n      }\n\n      state.position += 1;\n      ch = following;\n\n    //\n    // Implicit notation case. Flow-style node as the key first, then \":\", and the value.\n    //\n    } else if (composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {\n\n      if (state.line === _line) {\n        ch = state.input.charCodeAt(state.position);\n\n        while (is_WHITE_SPACE(ch)) {\n          ch = state.input.charCodeAt(++state.position);\n        }\n\n        if (0x3A/* : */ === ch) {\n          ch = state.input.charCodeAt(++state.position);\n\n          if (!is_WS_OR_EOL(ch)) {\n            throwError(state, 'a whitespace character is expected after the key-value separator within a block mapping');\n          }\n\n          if (atExplicitKey) {\n            storeMappingPair(state, _result, keyTag, keyNode, null);\n            keyTag = keyNode = valueNode = null;\n          }\n\n          detected = true;\n          atExplicitKey = false;\n          allowCompact = false;\n          keyTag = state.tag;\n          keyNode = state.result;\n\n        } else if (detected) {\n          throwError(state, 'can not read an implicit mapping pair; a colon is missed');\n\n        } else {\n          state.tag = _tag;\n          state.anchor = _anchor;\n          return true; // Keep the result of `composeNode`.\n        }\n\n      } else if (detected) {\n        throwError(state, 'can not read a block mapping entry; a multiline key may not be an implicit key');\n\n      } else {\n        state.tag = _tag;\n        state.anchor = _anchor;\n        return true; // Keep the result of `composeNode`.\n      }\n\n    } else {\n      break; // Reading is done. Go to the epilogue.\n    }\n\n    //\n    // Common reading code for both explicit and implicit notations.\n    //\n    if (state.line === _line || state.lineIndent > nodeIndent) {\n      if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {\n        if (atExplicitKey) {\n          keyNode = state.result;\n        } else {\n          valueNode = state.result;\n        }\n      }\n\n      if (!atExplicitKey) {\n        storeMappingPair(state, _result, keyTag, keyNode, valueNode);\n        keyTag = keyNode = valueNode = null;\n      }\n\n      skipSeparationSpace(state, true, -1);\n      ch = state.input.charCodeAt(state.position);\n    }\n\n    if (state.lineIndent > nodeIndent && (0 !== ch)) {\n      throwError(state, 'bad indentation of a mapping entry');\n    } else if (state.lineIndent < nodeIndent) {\n      break;\n    }\n  }\n\n  //\n  // Epilogue.\n  //\n\n  // Special case: last mapping's node contains only the key in explicit notation.\n  if (atExplicitKey) {\n    storeMappingPair(state, _result, keyTag, keyNode, null);\n  }\n\n  // Expose the resulting mapping.\n  if (detected) {\n    state.tag = _tag;\n    state.anchor = _anchor;\n    state.kind = 'mapping';\n    state.result = _result;\n  }\n\n  return detected;\n}\n\nfunction readTagProperty(state) {\n  var _position,\n      isVerbatim = false,\n      isNamed    = false,\n      tagHandle,\n      tagName,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (0x21/* ! */ !== ch) {\n    return false;\n  }\n\n  if (null !== state.tag) {\n    throwError(state, 'duplication of a tag property');\n  }\n\n  ch = state.input.charCodeAt(++state.position);\n\n  if (0x3C/* < */ === ch) {\n    isVerbatim = true;\n    ch = state.input.charCodeAt(++state.position);\n\n  } else if (0x21/* ! */ === ch) {\n    isNamed = true;\n    tagHandle = '!!';\n    ch = state.input.charCodeAt(++state.position);\n\n  } else {\n    tagHandle = '!';\n  }\n\n  _position = state.position;\n\n  if (isVerbatim) {\n    do { ch = state.input.charCodeAt(++state.position); }\n    while (0 !== ch && 0x3E/* > */ !== ch);\n\n    if (state.position < state.length) {\n      tagName = state.input.slice(_position, state.position);\n      ch = state.input.charCodeAt(++state.position);\n    } else {\n      throwError(state, 'unexpected end of the stream within a verbatim tag');\n    }\n  } else {\n    while (0 !== ch && !is_WS_OR_EOL(ch)) {\n\n      if (0x21/* ! */ === ch) {\n        if (!isNamed) {\n          tagHandle = state.input.slice(_position - 1, state.position + 1);\n\n          if (!PATTERN_TAG_HANDLE.test(tagHandle)) {\n            throwError(state, 'named tag handle cannot contain such characters');\n          }\n\n          isNamed = true;\n          _position = state.position + 1;\n        } else {\n          throwError(state, 'tag suffix cannot contain exclamation marks');\n        }\n      }\n\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    tagName = state.input.slice(_position, state.position);\n\n    if (PATTERN_FLOW_INDICATORS.test(tagName)) {\n      throwError(state, 'tag suffix cannot contain flow indicator characters');\n    }\n  }\n\n  if (tagName && !PATTERN_TAG_URI.test(tagName)) {\n    throwError(state, 'tag name cannot contain such characters: ' + tagName);\n  }\n\n  if (isVerbatim) {\n    state.tag = tagName;\n\n  } else if (_hasOwnProperty.call(state.tagMap, tagHandle)) {\n    state.tag = state.tagMap[tagHandle] + tagName;\n\n  } else if ('!' === tagHandle) {\n    state.tag = '!' + tagName;\n\n  } else if ('!!' === tagHandle) {\n    state.tag = 'tag:yaml.org,2002:' + tagName;\n\n  } else {\n    throwError(state, 'undeclared tag handle \"' + tagHandle + '\"');\n  }\n\n  return true;\n}\n\nfunction readAnchorProperty(state) {\n  var _position,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (0x26/* & */ !== ch) {\n    return false;\n  }\n\n  if (null !== state.anchor) {\n    throwError(state, 'duplication of an anchor property');\n  }\n\n  ch = state.input.charCodeAt(++state.position);\n  _position = state.position;\n\n  while (0 !== ch && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {\n    ch = state.input.charCodeAt(++state.position);\n  }\n\n  if (state.position === _position) {\n    throwError(state, 'name of an anchor node must contain at least one character');\n  }\n\n  state.anchor = state.input.slice(_position, state.position);\n  return true;\n}\n\nfunction readAlias(state) {\n  var _position, alias,\n      len = state.length,\n      input = state.input,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (0x2A/* * */ !== ch) {\n    return false;\n  }\n\n  ch = state.input.charCodeAt(++state.position);\n  _position = state.position;\n\n  while (0 !== ch && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {\n    ch = state.input.charCodeAt(++state.position);\n  }\n\n  if (state.position === _position) {\n    throwError(state, 'name of an alias node must contain at least one character');\n  }\n\n  alias = state.input.slice(_position, state.position);\n\n  if (!state.anchorMap.hasOwnProperty(alias)) {\n    throwError(state, 'unidentified alias \"' + alias + '\"');\n  }\n\n  state.result = state.anchorMap[alias];\n  skipSeparationSpace(state, true, -1);\n  return true;\n}\n\nfunction composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {\n  var allowBlockStyles,\n      allowBlockScalars,\n      allowBlockCollections,\n      indentStatus = 1, // 1: this>parent, 0: this=parent, -1: this<parent\n      atNewLine  = false,\n      hasContent = false,\n      typeIndex,\n      typeQuantity,\n      type,\n      flowIndent,\n      blockIndent,\n      _result;\n\n  state.tag    = null;\n  state.anchor = null;\n  state.kind   = null;\n  state.result = null;\n\n  allowBlockStyles = allowBlockScalars = allowBlockCollections =\n    CONTEXT_BLOCK_OUT === nodeContext ||\n    CONTEXT_BLOCK_IN  === nodeContext;\n\n  if (allowToSeek) {\n    if (skipSeparationSpace(state, true, -1)) {\n      atNewLine = true;\n\n      if (state.lineIndent > parentIndent) {\n        indentStatus = 1;\n      } else if (state.lineIndent === parentIndent) {\n        indentStatus = 0;\n      } else if (state.lineIndent < parentIndent) {\n        indentStatus = -1;\n      }\n    }\n  }\n\n  if (1 === indentStatus) {\n    while (readTagProperty(state) || readAnchorProperty(state)) {\n      if (skipSeparationSpace(state, true, -1)) {\n        atNewLine = true;\n        allowBlockCollections = allowBlockStyles;\n\n        if (state.lineIndent > parentIndent) {\n          indentStatus = 1;\n        } else if (state.lineIndent === parentIndent) {\n          indentStatus = 0;\n        } else if (state.lineIndent < parentIndent) {\n          indentStatus = -1;\n        }\n      } else {\n        allowBlockCollections = false;\n      }\n    }\n  }\n\n  if (allowBlockCollections) {\n    allowBlockCollections = atNewLine || allowCompact;\n  }\n\n  if (1 === indentStatus || CONTEXT_BLOCK_OUT === nodeContext) {\n    if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {\n      flowIndent = parentIndent;\n    } else {\n      flowIndent = parentIndent + 1;\n    }\n\n    blockIndent = state.position - state.lineStart;\n\n    if (1 === indentStatus) {\n      if (allowBlockCollections &&\n          (readBlockSequence(state, blockIndent) ||\n           readBlockMapping(state, blockIndent, flowIndent)) ||\n          readFlowCollection(state, flowIndent)) {\n        hasContent = true;\n      } else {\n        if ((allowBlockScalars && readBlockScalar(state, flowIndent)) ||\n            readSingleQuotedScalar(state, flowIndent) ||\n            readDoubleQuotedScalar(state, flowIndent)) {\n          hasContent = true;\n\n        } else if (readAlias(state)) {\n          hasContent = true;\n\n          if (null !== state.tag || null !== state.anchor) {\n            throwError(state, 'alias node should not have any properties');\n          }\n\n        } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {\n          hasContent = true;\n\n          if (null === state.tag) {\n            state.tag = '?';\n          }\n        }\n\n        if (null !== state.anchor) {\n          state.anchorMap[state.anchor] = state.result;\n        }\n      }\n    } else if (0 === indentStatus) {\n      // Special case: block sequences are allowed to have same indentation level as the parent.\n      // http://www.yaml.org/spec/1.2/spec.html#id2799784\n      hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);\n    }\n  }\n\n  if (null !== state.tag && '!' !== state.tag) {\n    if ('?' === state.tag) {\n      for (typeIndex = 0, typeQuantity = state.implicitTypes.length;\n           typeIndex < typeQuantity;\n           typeIndex += 1) {\n        type = state.implicitTypes[typeIndex];\n\n        // Implicit resolving is not allowed for non-scalar types, and '?'\n        // non-specific tag is only assigned to plain scalars. So, it isn't\n        // needed to check for 'kind' conformity.\n\n        if (type.resolve(state.result)) { // `state.result` updated in resolver if matched\n          state.result = type.construct(state.result);\n          state.tag = type.tag;\n          if (null !== state.anchor) {\n            state.anchorMap[state.anchor] = state.result;\n          }\n          break;\n        }\n      }\n    } else if (_hasOwnProperty.call(state.typeMap, state.tag)) {\n      type = state.typeMap[state.tag];\n\n      if (null !== state.result && type.kind !== state.kind) {\n        throwError(state, 'unacceptable node kind for !<' + state.tag + '> tag; it should be \"' + type.kind + '\", not \"' + state.kind + '\"');\n      }\n\n      if (!type.resolve(state.result)) { // `state.result` updated in resolver if matched\n        throwError(state, 'cannot resolve a node with !<' + state.tag + '> explicit tag');\n      } else {\n        state.result = type.construct(state.result);\n        if (null !== state.anchor) {\n          state.anchorMap[state.anchor] = state.result;\n        }\n      }\n    } else {\n      throwWarning(state, 'unknown tag !<' + state.tag + '>');\n    }\n  }\n\n  return null !== state.tag || null !== state.anchor || hasContent;\n}\n\nfunction readDocument(state) {\n  var documentStart = state.position,\n      _position,\n      directiveName,\n      directiveArgs,\n      hasDirectives = false,\n      ch;\n\n  state.version = null;\n  state.checkLineBreaks = state.legacy;\n  state.tagMap = {};\n  state.anchorMap = {};\n\n  while (0 !== (ch = state.input.charCodeAt(state.position))) {\n    skipSeparationSpace(state, true, -1);\n\n    ch = state.input.charCodeAt(state.position);\n\n    if (state.lineIndent > 0 || 0x25/* % */ !== ch) {\n      break;\n    }\n\n    hasDirectives = true;\n    ch = state.input.charCodeAt(++state.position);\n    _position = state.position;\n\n    while (0 !== ch && !is_WS_OR_EOL(ch)) {\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    directiveName = state.input.slice(_position, state.position);\n    directiveArgs = [];\n\n    if (directiveName.length < 1) {\n      throwError(state, 'directive name must not be less than one character in length');\n    }\n\n    while (0 !== ch) {\n      while (is_WHITE_SPACE(ch)) {\n        ch = state.input.charCodeAt(++state.position);\n      }\n\n      if (0x23/* # */ === ch) {\n        do { ch = state.input.charCodeAt(++state.position); }\n        while (0 !== ch && !is_EOL(ch));\n        break;\n      }\n\n      if (is_EOL(ch)) {\n        break;\n      }\n\n      _position = state.position;\n\n      while (0 !== ch && !is_WS_OR_EOL(ch)) {\n        ch = state.input.charCodeAt(++state.position);\n      }\n\n      directiveArgs.push(state.input.slice(_position, state.position));\n    }\n\n    if (0 !== ch) {\n      readLineBreak(state);\n    }\n\n    if (_hasOwnProperty.call(directiveHandlers, directiveName)) {\n      directiveHandlers[directiveName](state, directiveName, directiveArgs);\n    } else {\n      throwWarning(state, 'unknown document directive \"' + directiveName + '\"');\n    }\n  }\n\n  skipSeparationSpace(state, true, -1);\n\n  if (0 === state.lineIndent &&\n      0x2D/* - */ === state.input.charCodeAt(state.position) &&\n      0x2D/* - */ === state.input.charCodeAt(state.position + 1) &&\n      0x2D/* - */ === state.input.charCodeAt(state.position + 2)) {\n    state.position += 3;\n    skipSeparationSpace(state, true, -1);\n\n  } else if (hasDirectives) {\n    throwError(state, 'directives end mark is expected');\n  }\n\n  composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);\n  skipSeparationSpace(state, true, -1);\n\n  if (state.checkLineBreaks &&\n      PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {\n    throwWarning(state, 'non-ASCII line breaks are interpreted as content');\n  }\n\n  state.documents.push(state.result);\n\n  if (state.position === state.lineStart && testDocumentSeparator(state)) {\n\n    if (0x2E/* . */ === state.input.charCodeAt(state.position)) {\n      state.position += 3;\n      skipSeparationSpace(state, true, -1);\n    }\n    return;\n  }\n\n  if (state.position < (state.length - 1)) {\n    throwError(state, 'end of the stream or a document separator is expected');\n  } else {\n    return;\n  }\n}\n\n\nfunction loadDocuments(input, options) {\n  input = String(input);\n  options = options || {};\n\n  if (input.length !== 0) {\n\n    // Add tailing `\\n` if not exists\n    if (0x0A/* LF */ !== input.charCodeAt(input.length - 1) &&\n        0x0D/* CR */ !== input.charCodeAt(input.length - 1)) {\n      input += '\\n';\n    }\n\n    // Strip BOM\n    if (input.charCodeAt(0) === 0xFEFF) {\n      input = input.slice(1);\n    }\n  }\n\n  var state = new State(input, options);\n\n  if (PATTERN_NON_PRINTABLE.test(state.input)) {\n    throwError(state, 'the stream contains non-printable characters');\n  }\n\n  // Use 0 as string terminator. That significantly simplifies bounds check.\n  state.input += '\\0';\n\n  while (0x20/* Space */ === state.input.charCodeAt(state.position)) {\n    state.lineIndent += 1;\n    state.position += 1;\n  }\n\n  while (state.position < (state.length - 1)) {\n    readDocument(state);\n  }\n\n  return state.documents;\n}\n\n\nfunction loadAll(input, iterator, options) {\n  var documents = loadDocuments(input, options), index, length;\n\n  for (index = 0, length = documents.length; index < length; index += 1) {\n    iterator(documents[index]);\n  }\n}\n\n\nfunction load(input, options) {\n  var documents = loadDocuments(input, options), index, length;\n\n  if (0 === documents.length) {\n    /*eslint-disable no-undefined*/\n    return undefined;\n  } else if (1 === documents.length) {\n    return documents[0];\n  }\n  throw new YAMLException('expected a single document in the stream, but found more');\n}\n\n\nfunction safeLoadAll(input, output, options) {\n  loadAll(input, output, common.extend({ schema: DEFAULT_SAFE_SCHEMA }, options));\n}\n\n\nfunction safeLoad(input, options) {\n  return load(input, common.extend({ schema: DEFAULT_SAFE_SCHEMA }, options));\n}\n\n\nmodule.exports.loadAll     = loadAll;\nmodule.exports.load        = load;\nmodule.exports.safeLoadAll = safeLoadAll;\nmodule.exports.safeLoad    = safeLoad;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}