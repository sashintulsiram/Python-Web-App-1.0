{"ast":null,"code":"// Generated by CoffeeScript 2.4.1\n(function () {\n  var NodeType, WriterState, XMLDOMImplementation, XMLDocument, XMLDocumentCB, XMLStreamWriter, XMLStringWriter, assign, isFunction;\n  ({\n    assign,\n    isFunction\n  } = require('./Utility'));\n  XMLDOMImplementation = require('./XMLDOMImplementation');\n  XMLDocument = require('./XMLDocument');\n  XMLDocumentCB = require('./XMLDocumentCB');\n  XMLStringWriter = require('./XMLStringWriter');\n  XMLStreamWriter = require('./XMLStreamWriter');\n  NodeType = require('./NodeType');\n  WriterState = require('./WriterState');\n\n  // Creates a new document and returns the root node for\n  // chain-building the document tree\n\n  // `name` name of the root element\n\n  // `xmldec.version` A version number string, e.g. 1.0\n  // `xmldec.encoding` Encoding declaration, e.g. UTF-8\n  // `xmldec.standalone` standalone document declaration: true or false\n\n  // `doctype.pubID` public identifier of the external subset\n  // `doctype.sysID` system identifier of the external subset\n\n  // `options.headless` whether XML declaration and doctype will be included:\n  //     true or false\n  // `options.keepNullNodes` whether nodes with null values will be kept\n  //     or ignored: true or false\n  // `options.keepNullAttributes` whether attributes with null values will be\n  //     kept or ignored: true or false\n  // `options.ignoreDecorators` whether decorator strings will be ignored when\n  //     converting JS objects: true or false\n  // `options.separateArrayItems` whether array items are created as separate\n  //     nodes when passed as an object value: true or false\n  // `options.noDoubleEncoding` whether existing html entities are encoded:\n  //     true or false\n  // `options.stringify` a set of functions to use for converting values to\n  //     strings\n  // `options.writer` the default XML writer to use for converting nodes to\n  //     string. If the default writer is not set, the built-in XMLStringWriter\n  //     will be used instead.\n  module.exports.create = function (name, xmldec, doctype, options) {\n    var doc, root;\n    if (name == null) {\n      throw new Error(\"Root element needs a name.\");\n    }\n    options = assign({}, xmldec, doctype, options);\n    // create the document node\n    doc = new XMLDocument(options);\n    // add the root node\n    root = doc.element(name);\n    // prolog\n    if (!options.headless) {\n      doc.declaration(options);\n      if (options.pubID != null || options.sysID != null) {\n        doc.dtd(options);\n      }\n    }\n    return root;\n  };\n\n  // Creates a new document and returns the document node for\n  // chain-building the document tree\n\n  // `options.keepNullNodes` whether nodes with null values will be kept\n  //     or ignored: true or false\n  // `options.keepNullAttributes` whether attributes with null values will be\n  //     kept or ignored: true or false\n  // `options.ignoreDecorators` whether decorator strings will be ignored when\n  //     converting JS objects: true or false\n  // `options.separateArrayItems` whether array items are created as separate\n  //     nodes when passed as an object value: true or false\n  // `options.noDoubleEncoding` whether existing html entities are encoded:\n  //     true or false\n  // `options.stringify` a set of functions to use for converting values to\n  //     strings\n  // `options.writer` the default XML writer to use for converting nodes to\n  //     string. If the default writer is not set, the built-in XMLStringWriter\n  //     will be used instead.\n\n  // `onData` the function to be called when a new chunk of XML is output. The\n  //          string containing the XML chunk is passed to `onData` as its single\n  //          argument.\n  // `onEnd`  the function to be called when the XML document is completed with\n  //          `end`. `onEnd` does not receive any arguments.\n  module.exports.begin = function (options, onData, onEnd) {\n    if (isFunction(options)) {\n      [onData, onEnd] = [options, onData];\n      options = {};\n    }\n    if (onData) {\n      return new XMLDocumentCB(options, onData, onEnd);\n    } else {\n      return new XMLDocument(options);\n    }\n  };\n  module.exports.stringWriter = function (options) {\n    return new XMLStringWriter(options);\n  };\n  module.exports.streamWriter = function (stream, options) {\n    return new XMLStreamWriter(stream, options);\n  };\n  module.exports.implementation = new XMLDOMImplementation();\n  module.exports.nodeType = NodeType;\n  module.exports.writerState = WriterState;\n}).call(this);","map":{"version":3,"names":["NodeType","WriterState","XMLDOMImplementation","XMLDocument","XMLDocumentCB","XMLStreamWriter","XMLStringWriter","assign","isFunction","require","module","exports","create","name","xmldec","doctype","options","doc","root","Error","element","headless","declaration","pubID","sysID","dtd","begin","onData","onEnd","stringWriter","streamWriter","stream","implementation","nodeType","writerState","call"],"sources":["C:/Users/SashinTulsiram/Documents/Software/react-frontend-bulma/react-app/node_modules/xmlbuilder/lib/index.js"],"sourcesContent":["// Generated by CoffeeScript 2.4.1\n(function() {\n  var NodeType, WriterState, XMLDOMImplementation, XMLDocument, XMLDocumentCB, XMLStreamWriter, XMLStringWriter, assign, isFunction;\n\n  ({assign, isFunction} = require('./Utility'));\n\n  XMLDOMImplementation = require('./XMLDOMImplementation');\n\n  XMLDocument = require('./XMLDocument');\n\n  XMLDocumentCB = require('./XMLDocumentCB');\n\n  XMLStringWriter = require('./XMLStringWriter');\n\n  XMLStreamWriter = require('./XMLStreamWriter');\n\n  NodeType = require('./NodeType');\n\n  WriterState = require('./WriterState');\n\n  // Creates a new document and returns the root node for\n  // chain-building the document tree\n\n  // `name` name of the root element\n\n  // `xmldec.version` A version number string, e.g. 1.0\n  // `xmldec.encoding` Encoding declaration, e.g. UTF-8\n  // `xmldec.standalone` standalone document declaration: true or false\n\n  // `doctype.pubID` public identifier of the external subset\n  // `doctype.sysID` system identifier of the external subset\n\n  // `options.headless` whether XML declaration and doctype will be included:\n  //     true or false\n  // `options.keepNullNodes` whether nodes with null values will be kept\n  //     or ignored: true or false\n  // `options.keepNullAttributes` whether attributes with null values will be\n  //     kept or ignored: true or false\n  // `options.ignoreDecorators` whether decorator strings will be ignored when\n  //     converting JS objects: true or false\n  // `options.separateArrayItems` whether array items are created as separate\n  //     nodes when passed as an object value: true or false\n  // `options.noDoubleEncoding` whether existing html entities are encoded:\n  //     true or false\n  // `options.stringify` a set of functions to use for converting values to\n  //     strings\n  // `options.writer` the default XML writer to use for converting nodes to\n  //     string. If the default writer is not set, the built-in XMLStringWriter\n  //     will be used instead.\n  module.exports.create = function(name, xmldec, doctype, options) {\n    var doc, root;\n    if (name == null) {\n      throw new Error(\"Root element needs a name.\");\n    }\n    options = assign({}, xmldec, doctype, options);\n    // create the document node\n    doc = new XMLDocument(options);\n    // add the root node\n    root = doc.element(name);\n    // prolog\n    if (!options.headless) {\n      doc.declaration(options);\n      if ((options.pubID != null) || (options.sysID != null)) {\n        doc.dtd(options);\n      }\n    }\n    return root;\n  };\n\n  // Creates a new document and returns the document node for\n  // chain-building the document tree\n\n  // `options.keepNullNodes` whether nodes with null values will be kept\n  //     or ignored: true or false\n  // `options.keepNullAttributes` whether attributes with null values will be\n  //     kept or ignored: true or false\n  // `options.ignoreDecorators` whether decorator strings will be ignored when\n  //     converting JS objects: true or false\n  // `options.separateArrayItems` whether array items are created as separate\n  //     nodes when passed as an object value: true or false\n  // `options.noDoubleEncoding` whether existing html entities are encoded:\n  //     true or false\n  // `options.stringify` a set of functions to use for converting values to\n  //     strings\n  // `options.writer` the default XML writer to use for converting nodes to\n  //     string. If the default writer is not set, the built-in XMLStringWriter\n  //     will be used instead.\n\n  // `onData` the function to be called when a new chunk of XML is output. The\n  //          string containing the XML chunk is passed to `onData` as its single\n  //          argument.\n  // `onEnd`  the function to be called when the XML document is completed with\n  //          `end`. `onEnd` does not receive any arguments.\n  module.exports.begin = function(options, onData, onEnd) {\n    if (isFunction(options)) {\n      [onData, onEnd] = [options, onData];\n      options = {};\n    }\n    if (onData) {\n      return new XMLDocumentCB(options, onData, onEnd);\n    } else {\n      return new XMLDocument(options);\n    }\n  };\n\n  module.exports.stringWriter = function(options) {\n    return new XMLStringWriter(options);\n  };\n\n  module.exports.streamWriter = function(stream, options) {\n    return new XMLStreamWriter(stream, options);\n  };\n\n  module.exports.implementation = new XMLDOMImplementation();\n\n  module.exports.nodeType = NodeType;\n\n  module.exports.writerState = WriterState;\n\n}).call(this);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}