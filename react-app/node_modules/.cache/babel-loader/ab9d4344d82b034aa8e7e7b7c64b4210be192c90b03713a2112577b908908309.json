{"ast":null,"code":"// Generated by CoffeeScript 2.4.1\n(function () {\n  var NodeType, XMLDTDNotation, XMLNode;\n  XMLNode = require('./XMLNode');\n  NodeType = require('./NodeType');\n\n  // Represents a NOTATION entry in the DTD\n  module.exports = XMLDTDNotation = function () {\n    class XMLDTDNotation extends XMLNode {\n      // Initializes a new instance of `XMLDTDNotation`\n\n      // `parent` the parent `XMLDocType` element\n      // `name` the name of the notation\n      // `value` an object with external entity details\n      // `value.pubID` public identifier\n      // `value.sysID` system identifier\n      constructor(parent, name, value) {\n        super(parent);\n        if (name == null) {\n          throw new Error(\"Missing DTD notation name. \" + this.debugInfo(name));\n        }\n        if (!value.pubID && !value.sysID) {\n          throw new Error(\"Public or system identifiers are required for an external entity. \" + this.debugInfo(name));\n        }\n        this.name = this.stringify.name(name);\n        this.type = NodeType.NotationDeclaration;\n        if (value.pubID != null) {\n          this.pubID = this.stringify.dtdPubID(value.pubID);\n        }\n        if (value.sysID != null) {\n          this.sysID = this.stringify.dtdSysID(value.sysID);\n        }\n      }\n\n      // Converts the XML fragment to string\n\n      // `options.pretty` pretty prints the result\n      // `options.indent` indentation for pretty print\n      // `options.offset` how many indentations to add to every line for pretty print\n      // `options.newline` newline sequence for pretty print\n      toString(options) {\n        return this.options.writer.dtdNotation(this, this.options.writer.filterOptions(options));\n      }\n    }\n    ;\n\n    // DOM level 1\n    Object.defineProperty(XMLDTDNotation.prototype, 'publicId', {\n      get: function () {\n        return this.pubID;\n      }\n    });\n    Object.defineProperty(XMLDTDNotation.prototype, 'systemId', {\n      get: function () {\n        return this.sysID;\n      }\n    });\n    return XMLDTDNotation;\n  }.call(this);\n}).call(this);","map":{"version":3,"names":["NodeType","XMLDTDNotation","XMLNode","require","module","exports","constructor","parent","name","value","Error","debugInfo","pubID","sysID","stringify","type","NotationDeclaration","dtdPubID","dtdSysID","toString","options","writer","dtdNotation","filterOptions","Object","defineProperty","prototype","get","call"],"sources":["C:/Users/SashinTulsiram/Documents/Software/react-frontend-bulma/react-app/node_modules/xmlbuilder/lib/XMLDTDNotation.js"],"sourcesContent":["// Generated by CoffeeScript 2.4.1\n(function() {\n  var NodeType, XMLDTDNotation, XMLNode;\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  // Represents a NOTATION entry in the DTD\n  module.exports = XMLDTDNotation = (function() {\n    class XMLDTDNotation extends XMLNode {\n      // Initializes a new instance of `XMLDTDNotation`\n\n      // `parent` the parent `XMLDocType` element\n      // `name` the name of the notation\n      // `value` an object with external entity details\n      // `value.pubID` public identifier\n      // `value.sysID` system identifier\n      constructor(parent, name, value) {\n        super(parent);\n        if (name == null) {\n          throw new Error(\"Missing DTD notation name. \" + this.debugInfo(name));\n        }\n        if (!value.pubID && !value.sysID) {\n          throw new Error(\"Public or system identifiers are required for an external entity. \" + this.debugInfo(name));\n        }\n        this.name = this.stringify.name(name);\n        this.type = NodeType.NotationDeclaration;\n        if (value.pubID != null) {\n          this.pubID = this.stringify.dtdPubID(value.pubID);\n        }\n        if (value.sysID != null) {\n          this.sysID = this.stringify.dtdSysID(value.sysID);\n        }\n      }\n\n      // Converts the XML fragment to string\n\n      // `options.pretty` pretty prints the result\n      // `options.indent` indentation for pretty print\n      // `options.offset` how many indentations to add to every line for pretty print\n      // `options.newline` newline sequence for pretty print\n      toString(options) {\n        return this.options.writer.dtdNotation(this, this.options.writer.filterOptions(options));\n      }\n\n    };\n\n    // DOM level 1\n    Object.defineProperty(XMLDTDNotation.prototype, 'publicId', {\n      get: function() {\n        return this.pubID;\n      }\n    });\n\n    Object.defineProperty(XMLDTDNotation.prototype, 'systemId', {\n      get: function() {\n        return this.sysID;\n      }\n    });\n\n    return XMLDTDNotation;\n\n  }).call(this);\n\n}).call(this);\n"],"mappings":"AAAA;AACA,CAAC,YAAW;EACV,IAAIA,QAAQ,EAAEC,cAAc,EAAEC,OAAO;EAErCA,OAAO,GAAGC,OAAO,CAAC,WAAW,CAAC;EAE9BH,QAAQ,GAAGG,OAAO,CAAC,YAAY,CAAC;;EAEhC;EACAC,MAAM,CAACC,OAAO,GAAGJ,cAAc,GAAI,YAAW;IAC5C,MAAMA,cAAc,SAASC,OAAO,CAAC;MACnC;;MAEA;MACA;MACA;MACA;MACA;MACAI,WAAWA,CAACC,MAAM,EAAEC,IAAI,EAAEC,KAAK,EAAE;QAC/B,KAAK,CAACF,MAAM,CAAC;QACb,IAAIC,IAAI,IAAI,IAAI,EAAE;UAChB,MAAM,IAAIE,KAAK,CAAC,6BAA6B,GAAG,IAAI,CAACC,SAAS,CAACH,IAAI,CAAC,CAAC;QACvE;QACA,IAAI,CAACC,KAAK,CAACG,KAAK,IAAI,CAACH,KAAK,CAACI,KAAK,EAAE;UAChC,MAAM,IAAIH,KAAK,CAAC,oEAAoE,GAAG,IAAI,CAACC,SAAS,CAACH,IAAI,CAAC,CAAC;QAC9G;QACA,IAAI,CAACA,IAAI,GAAG,IAAI,CAACM,SAAS,CAACN,IAAI,CAACA,IAAI,CAAC;QACrC,IAAI,CAACO,IAAI,GAAGf,QAAQ,CAACgB,mBAAmB;QACxC,IAAIP,KAAK,CAACG,KAAK,IAAI,IAAI,EAAE;UACvB,IAAI,CAACA,KAAK,GAAG,IAAI,CAACE,SAAS,CAACG,QAAQ,CAACR,KAAK,CAACG,KAAK,CAAC;QACnD;QACA,IAAIH,KAAK,CAACI,KAAK,IAAI,IAAI,EAAE;UACvB,IAAI,CAACA,KAAK,GAAG,IAAI,CAACC,SAAS,CAACI,QAAQ,CAACT,KAAK,CAACI,KAAK,CAAC;QACnD;MACF;;MAEA;;MAEA;MACA;MACA;MACA;MACAM,QAAQA,CAACC,OAAO,EAAE;QAChB,OAAO,IAAI,CAACA,OAAO,CAACC,MAAM,CAACC,WAAW,CAAC,IAAI,EAAE,IAAI,CAACF,OAAO,CAACC,MAAM,CAACE,aAAa,CAACH,OAAO,CAAC,CAAC;MAC1F;IAEF;IAAC;;IAED;IACAI,MAAM,CAACC,cAAc,CAACxB,cAAc,CAACyB,SAAS,EAAE,UAAU,EAAE;MAC1DC,GAAG,EAAE,SAAAA,CAAA,EAAW;QACd,OAAO,IAAI,CAACf,KAAK;MACnB;IACF,CAAC,CAAC;IAEFY,MAAM,CAACC,cAAc,CAACxB,cAAc,CAACyB,SAAS,EAAE,UAAU,EAAE;MAC1DC,GAAG,EAAE,SAAAA,CAAA,EAAW;QACd,OAAO,IAAI,CAACd,KAAK;MACnB;IACF,CAAC,CAAC;IAEF,OAAOZ,cAAc;EAEvB,CAAC,CAAE2B,IAAI,CAAC,IAAI,CAAC;AAEf,CAAC,EAAEA,IAAI,CAAC,IAAI,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}