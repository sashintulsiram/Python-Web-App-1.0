{"ast":null,"code":"// Generated by CoffeeScript 2.4.1\n(function () {\n  var NodeType, XMLDTDAttList, XMLNode;\n  XMLNode = require('./XMLNode');\n  NodeType = require('./NodeType');\n\n  // Represents an attribute list\n  module.exports = XMLDTDAttList = class XMLDTDAttList extends XMLNode {\n    // Initializes a new instance of `XMLDTDAttList`\n\n    // `parent` the parent `XMLDocType` element\n    // `elementName` the name of the element containing this attribute\n    // `attributeName` attribute name\n    // `attributeType` type of the attribute\n    // `defaultValueType` default value type (either #REQUIRED, #IMPLIED,\n    //                    #FIXED or #DEFAULT)\n    // `defaultValue` default value of the attribute\n    //                (only used for #FIXED or #DEFAULT)\n    constructor(parent, elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n      super(parent);\n      if (elementName == null) {\n        throw new Error(\"Missing DTD element name. \" + this.debugInfo());\n      }\n      if (attributeName == null) {\n        throw new Error(\"Missing DTD attribute name. \" + this.debugInfo(elementName));\n      }\n      if (!attributeType) {\n        throw new Error(\"Missing DTD attribute type. \" + this.debugInfo(elementName));\n      }\n      if (!defaultValueType) {\n        throw new Error(\"Missing DTD attribute default. \" + this.debugInfo(elementName));\n      }\n      if (defaultValueType.indexOf('#') !== 0) {\n        defaultValueType = '#' + defaultValueType;\n      }\n      if (!defaultValueType.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/)) {\n        throw new Error(\"Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT. \" + this.debugInfo(elementName));\n      }\n      if (defaultValue && !defaultValueType.match(/^(#FIXED|#DEFAULT)$/)) {\n        throw new Error(\"Default value only applies to #FIXED or #DEFAULT. \" + this.debugInfo(elementName));\n      }\n      this.elementName = this.stringify.name(elementName);\n      this.type = NodeType.AttributeDeclaration;\n      this.attributeName = this.stringify.name(attributeName);\n      this.attributeType = this.stringify.dtdAttType(attributeType);\n      if (defaultValue) {\n        this.defaultValue = this.stringify.dtdAttDefault(defaultValue);\n      }\n      this.defaultValueType = defaultValueType;\n    }\n\n    // Converts the XML fragment to string\n\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation for pretty print\n    // `options.offset` how many indentations to add to every line for pretty print\n    // `options.newline` newline sequence for pretty print\n    toString(options) {\n      return this.options.writer.dtdAttList(this, this.options.writer.filterOptions(options));\n    }\n  };\n}).call(this);","map":{"version":3,"names":["NodeType","XMLDTDAttList","XMLNode","require","module","exports","constructor","parent","elementName","attributeName","attributeType","defaultValueType","defaultValue","Error","debugInfo","indexOf","match","stringify","name","type","AttributeDeclaration","dtdAttType","dtdAttDefault","toString","options","writer","dtdAttList","filterOptions","call"],"sources":["C:/Users/SashinTulsiram/Documents/Software/react-frontend-bulma/react-app/node_modules/xmlbuilder/lib/XMLDTDAttList.js"],"sourcesContent":["// Generated by CoffeeScript 2.4.1\n(function() {\n  var NodeType, XMLDTDAttList, XMLNode;\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  // Represents an attribute list\n  module.exports = XMLDTDAttList = class XMLDTDAttList extends XMLNode {\n    // Initializes a new instance of `XMLDTDAttList`\n\n    // `parent` the parent `XMLDocType` element\n    // `elementName` the name of the element containing this attribute\n    // `attributeName` attribute name\n    // `attributeType` type of the attribute\n    // `defaultValueType` default value type (either #REQUIRED, #IMPLIED,\n    //                    #FIXED or #DEFAULT)\n    // `defaultValue` default value of the attribute\n    //                (only used for #FIXED or #DEFAULT)\n    constructor(parent, elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n      super(parent);\n      if (elementName == null) {\n        throw new Error(\"Missing DTD element name. \" + this.debugInfo());\n      }\n      if (attributeName == null) {\n        throw new Error(\"Missing DTD attribute name. \" + this.debugInfo(elementName));\n      }\n      if (!attributeType) {\n        throw new Error(\"Missing DTD attribute type. \" + this.debugInfo(elementName));\n      }\n      if (!defaultValueType) {\n        throw new Error(\"Missing DTD attribute default. \" + this.debugInfo(elementName));\n      }\n      if (defaultValueType.indexOf('#') !== 0) {\n        defaultValueType = '#' + defaultValueType;\n      }\n      if (!defaultValueType.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/)) {\n        throw new Error(\"Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT. \" + this.debugInfo(elementName));\n      }\n      if (defaultValue && !defaultValueType.match(/^(#FIXED|#DEFAULT)$/)) {\n        throw new Error(\"Default value only applies to #FIXED or #DEFAULT. \" + this.debugInfo(elementName));\n      }\n      this.elementName = this.stringify.name(elementName);\n      this.type = NodeType.AttributeDeclaration;\n      this.attributeName = this.stringify.name(attributeName);\n      this.attributeType = this.stringify.dtdAttType(attributeType);\n      if (defaultValue) {\n        this.defaultValue = this.stringify.dtdAttDefault(defaultValue);\n      }\n      this.defaultValueType = defaultValueType;\n    }\n\n    // Converts the XML fragment to string\n\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation for pretty print\n    // `options.offset` how many indentations to add to every line for pretty print\n    // `options.newline` newline sequence for pretty print\n    toString(options) {\n      return this.options.writer.dtdAttList(this, this.options.writer.filterOptions(options));\n    }\n\n  };\n\n}).call(this);\n"],"mappings":"AAAA;AACA,CAAC,YAAW;EACV,IAAIA,QAAQ,EAAEC,aAAa,EAAEC,OAAO;EAEpCA,OAAO,GAAGC,OAAO,CAAC,WAAW,CAAC;EAE9BH,QAAQ,GAAGG,OAAO,CAAC,YAAY,CAAC;;EAEhC;EACAC,MAAM,CAACC,OAAO,GAAGJ,aAAa,GAAG,MAAMA,aAAa,SAASC,OAAO,CAAC;IACnE;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAI,WAAWA,CAACC,MAAM,EAAEC,WAAW,EAAEC,aAAa,EAAEC,aAAa,EAAEC,gBAAgB,EAAEC,YAAY,EAAE;MAC7F,KAAK,CAACL,MAAM,CAAC;MACb,IAAIC,WAAW,IAAI,IAAI,EAAE;QACvB,MAAM,IAAIK,KAAK,CAAC,4BAA4B,GAAG,IAAI,CAACC,SAAS,CAAC,CAAC,CAAC;MAClE;MACA,IAAIL,aAAa,IAAI,IAAI,EAAE;QACzB,MAAM,IAAII,KAAK,CAAC,8BAA8B,GAAG,IAAI,CAACC,SAAS,CAACN,WAAW,CAAC,CAAC;MAC/E;MACA,IAAI,CAACE,aAAa,EAAE;QAClB,MAAM,IAAIG,KAAK,CAAC,8BAA8B,GAAG,IAAI,CAACC,SAAS,CAACN,WAAW,CAAC,CAAC;MAC/E;MACA,IAAI,CAACG,gBAAgB,EAAE;QACrB,MAAM,IAAIE,KAAK,CAAC,iCAAiC,GAAG,IAAI,CAACC,SAAS,CAACN,WAAW,CAAC,CAAC;MAClF;MACA,IAAIG,gBAAgB,CAACI,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;QACvCJ,gBAAgB,GAAG,GAAG,GAAGA,gBAAgB;MAC3C;MACA,IAAI,CAACA,gBAAgB,CAACK,KAAK,CAAC,wCAAwC,CAAC,EAAE;QACrE,MAAM,IAAIH,KAAK,CAAC,iFAAiF,GAAG,IAAI,CAACC,SAAS,CAACN,WAAW,CAAC,CAAC;MAClI;MACA,IAAII,YAAY,IAAI,CAACD,gBAAgB,CAACK,KAAK,CAAC,qBAAqB,CAAC,EAAE;QAClE,MAAM,IAAIH,KAAK,CAAC,oDAAoD,GAAG,IAAI,CAACC,SAAS,CAACN,WAAW,CAAC,CAAC;MACrG;MACA,IAAI,CAACA,WAAW,GAAG,IAAI,CAACS,SAAS,CAACC,IAAI,CAACV,WAAW,CAAC;MACnD,IAAI,CAACW,IAAI,GAAGnB,QAAQ,CAACoB,oBAAoB;MACzC,IAAI,CAACX,aAAa,GAAG,IAAI,CAACQ,SAAS,CAACC,IAAI,CAACT,aAAa,CAAC;MACvD,IAAI,CAACC,aAAa,GAAG,IAAI,CAACO,SAAS,CAACI,UAAU,CAACX,aAAa,CAAC;MAC7D,IAAIE,YAAY,EAAE;QAChB,IAAI,CAACA,YAAY,GAAG,IAAI,CAACK,SAAS,CAACK,aAAa,CAACV,YAAY,CAAC;MAChE;MACA,IAAI,CAACD,gBAAgB,GAAGA,gBAAgB;IAC1C;;IAEA;;IAEA;IACA;IACA;IACA;IACAY,QAAQA,CAACC,OAAO,EAAE;MAChB,OAAO,IAAI,CAACA,OAAO,CAACC,MAAM,CAACC,UAAU,CAAC,IAAI,EAAE,IAAI,CAACF,OAAO,CAACC,MAAM,CAACE,aAAa,CAACH,OAAO,CAAC,CAAC;IACzF;EAEF,CAAC;AAEH,CAAC,EAAEI,IAAI,CAAC,IAAI,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}