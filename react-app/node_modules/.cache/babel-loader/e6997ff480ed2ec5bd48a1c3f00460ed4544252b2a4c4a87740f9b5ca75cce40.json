{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\n// Put elements on their own line if on the same line together\n\n/**\n * Class to create new indented stringed svg elements\n * \n */\nvar j = 0;\nvar Format = /*#__PURE__*/function () {\n  function Format() {\n    var spaces = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 4;\n    (0, _classCallCheck2[\"default\"])(this, Format);\n    this.string = '';\n    this.spaces = spaces;\n  }\n  (0, _createClass2[\"default\"])(Format, [{\n    key: \"removeSpaces\",\n    value: function removeSpaces() {\n      return this.string.replace(/[ ]{3,}/igm, ' ');\n    }\n    /* *** Not being used, refactoring *** */\n  }, {\n    key: \"trimLines\",\n    value: function trimLines(string) {\n      // Splits each line that is 180 characters or long at the very next space \n      var regex = new RegExp('(.{180}[ ])(.*)', 'igm');\n      var newArr = []; // j < 50 incase extremely long and multiple lines \n\n      if (string.match(regex) && j < 10) {\n        var strings = string.split('\\n');\n        var i = strings.length;\n        while (i--) {\n          // Each line that is too long splits and second line gets it's own\n          newArr.unshift(strings[i].replace(regex, '$1\\n$2'));\n        }\n        var newString = newArr.join('\\n');\n        j++;\n        return this.trimLines(newString);\n      } else {\n        return string.replace(/^\\s*\\n/gm, '');\n      }\n    }\n  }, {\n    key: \"newLine\",\n    value: function newLine() {\n      var string = this.removeSpaces();\n      if (typeof string !== 'string') return {\n        error: '<h1>Not a valid string</h1>'\n      };\n      return string.replace(/^\\s+|\\s+$/gm, '').match(/<.[\\s\\S]*?>(?=[^a-z])|(<\\/svg>)|(.+?}\")/gm).join('\\n');\n    }\n  }, {\n    key: \"leftFormat\",\n    value: function leftFormat() {\n      var elementOnOwnLines = this.newLine(); // console.log('elementOnOwnLines:', elementOnOwnLines)\n\n      if (!elementOnOwnLines) {\n        console.log('Can\\'t format Elements on Own Lines');\n        return {\n          error: '<h1>Can\\'t format Elements on Own Lines</h1>'\n        };\n      } // Remove spaces from both sides\n\n      var removeTabsPattern = /^\\s*|\\s*$/gm;\n      var formatLeft = elementOnOwnLines.replace(removeTabsPattern, '');\n      return formatLeft;\n    }\n  }, {\n    key: \"indent\",\n    value: function indent(string, styleElement) {\n      this.string = string;\n      var leftFormat = this.leftFormat();\n      var selectAllLines = /.+/ig;\n      var allArray = leftFormat.match(selectAllLines);\n      var prevBeginnings = '';\n      var length = allArray.length;\n      var newString = '';\n      var space = 0;\n      var spaces = this.spaces;\n      try {\n        for (var i = 0; i < length; i++) {\n          var element = allArray[i];\n          var beginnings = /<svg.+>|<style type=\"text\\/css\">|<[^\\/].*>|^<[^\\/].*[^>]$/i.test(element); // <...> or <.....\n\n          var onelines = /<.*>.*<\\/.*>|^<\\w.*\\/>$|^(\\w|-|\\.).+[^>]$|^[\\w\",-].+\\/?>$|^['\"]?\\..*|<\\/image>/gi.test(element); //  <./>...<./> or <..../>  or .... or .../>  or ...> or '.photo-st0{fill:#061E2D;}'+\n\n          var endings = /<\\/.*>|^}?<\\/style>$/gi.test(element); // Indents open elements <g> or <g className=\"someclass\" not closing..\n\n          if (beginnings) {\n            if (/<[^\\/].+[^\\/]>|^\\w.+[^\\/]>$|<[a-z]+>/gi.test(allArray[i - 1])) {\n              // Tests previous element is the same, if so add space\n              space += spaces;\n              prevBeginnings = element;\n              newString += element.replace(/^/g, '\\n' + ' '.repeat(space));\n            } else {\n              prevBeginnings = element;\n              newString += element.replace(/^/g, i === 0 ? '' : '\\n' + ' '.repeat(space)); // First line, only adds new line (\\n) if it's not the first line\n            }\n          } // Indents single open and closing elements <.../> or <..>...</..>\n          else if (onelines) {\n            if (/^<[^\\/]+>$|^<style.+{?>?$|^[\\w|-|\\.].+[^\\/]>$/gi.test(allArray[i - 1])) {\n              // tests if previouos element is <...> or <style...{ or ...> \n              space += spaces;\n              newString += element.replace(/^/g, '\\n' + ' '.repeat(space)); // Indents if previous line is different\n            } else {\n              // const extraSpace = space + 2  add more spaces if needed\n              var extraSpace = space + 1; // single lines ... or ...>\n\n              newString += element.replace(/^/g, '\\n' + ' '.repeat(extraSpace));\n            }\n          } // Doesn't indent closing elements </g>, </div>, }</style> etc etc..\n          else if (endings) {\n            var justLetters = element.replace(/[^a-zA-Z]/ig, '');\n            var regex = new RegExp(\"^<\".concat(justLetters), 'gi');\n            /* If indented tag is same ending tag */\n\n            if (regex.test(prevBeginnings) && justLetters != 'style') {\n              newString += element.replace(/^/g, '\\n' + ' '.repeat(space));\n            } else {\n              space -= spaces;\n              newString += element.replace(/^/g, '\\n' + ' '.repeat(space));\n            }\n          }\n        }\n      } catch (e) {\n        console.log(e);\n        return \"<span>\".concat(e, \"</span>\");\n      }\n      return newString;\n    }\n  }]);\n  return Format;\n}();\n;\nmodule.exports = new Format();","map":{"version":3,"names":["_interopRequireDefault","require","_classCallCheck2","_createClass2","j","Format","spaces","arguments","length","undefined","string","key","value","removeSpaces","replace","trimLines","regex","RegExp","newArr","match","strings","split","i","unshift","newString","join","newLine","error","leftFormat","elementOnOwnLines","console","log","removeTabsPattern","formatLeft","indent","styleElement","selectAllLines","allArray","prevBeginnings","space","element","beginnings","test","onelines","endings","repeat","extraSpace","justLetters","concat","e","module","exports"],"sources":["C:/Users/SashinTulsiram/Documents/Software/react-frontend-bulma/react-app/node_modules/convert-svg-react/lib/converter/format.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\n// Put elements on their own line if on the same line together\n\n/**\n * Class to create new indented stringed svg elements\n * \n */\nvar j = 0;\n\nvar Format = /*#__PURE__*/function () {\n  function Format() {\n    var spaces = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 4;\n    (0, _classCallCheck2[\"default\"])(this, Format);\n    this.string = '';\n    this.spaces = spaces;\n  }\n\n  (0, _createClass2[\"default\"])(Format, [{\n    key: \"removeSpaces\",\n    value: function removeSpaces() {\n      return this.string.replace(/[ ]{3,}/igm, ' ');\n    }\n    /* *** Not being used, refactoring *** */\n\n  }, {\n    key: \"trimLines\",\n    value: function trimLines(string) {\n      // Splits each line that is 180 characters or long at the very next space \n      var regex = new RegExp('(.{180}[ ])(.*)', 'igm');\n      var newArr = []; // j < 50 incase extremely long and multiple lines \n\n      if (string.match(regex) && j < 10) {\n        var strings = string.split('\\n');\n        var i = strings.length;\n\n        while (i--) {\n          // Each line that is too long splits and second line gets it's own\n          newArr.unshift(strings[i].replace(regex, '$1\\n$2'));\n        }\n\n        var newString = newArr.join('\\n');\n        j++;\n        return this.trimLines(newString);\n      } else {\n        return string.replace(/^\\s*\\n/gm, '');\n      }\n    }\n  }, {\n    key: \"newLine\",\n    value: function newLine() {\n      var string = this.removeSpaces();\n      if (typeof string !== 'string') return {\n        error: '<h1>Not a valid string</h1>'\n      };\n      return string.replace(/^\\s+|\\s+$/gm, '').match(/<.[\\s\\S]*?>(?=[^a-z])|(<\\/svg>)|(.+?}\")/gm).join('\\n');\n    }\n  }, {\n    key: \"leftFormat\",\n    value: function leftFormat() {\n      var elementOnOwnLines = this.newLine(); // console.log('elementOnOwnLines:', elementOnOwnLines)\n\n      if (!elementOnOwnLines) {\n        console.log('Can\\'t format Elements on Own Lines');\n        return {\n          error: '<h1>Can\\'t format Elements on Own Lines</h1>'\n        };\n      } // Remove spaces from both sides\n\n\n      var removeTabsPattern = /^\\s*|\\s*$/gm;\n      var formatLeft = elementOnOwnLines.replace(removeTabsPattern, '');\n      return formatLeft;\n    }\n  }, {\n    key: \"indent\",\n    value: function indent(string, styleElement) {\n      this.string = string;\n      var leftFormat = this.leftFormat();\n      var selectAllLines = /.+/ig;\n      var allArray = leftFormat.match(selectAllLines);\n      var prevBeginnings = '';\n      var length = allArray.length;\n      var newString = '';\n      var space = 0;\n      var spaces = this.spaces;\n\n      try {\n        for (var i = 0; i < length; i++) {\n          var element = allArray[i];\n          var beginnings = /<svg.+>|<style type=\"text\\/css\">|<[^\\/].*>|^<[^\\/].*[^>]$/i.test(element); // <...> or <.....\n\n          var onelines = /<.*>.*<\\/.*>|^<\\w.*\\/>$|^(\\w|-|\\.).+[^>]$|^[\\w\",-].+\\/?>$|^['\"]?\\..*|<\\/image>/gi.test(element); //  <./>...<./> or <..../>  or .... or .../>  or ...> or '.photo-st0{fill:#061E2D;}'+\n\n          var endings = /<\\/.*>|^}?<\\/style>$/gi.test(element); // Indents open elements <g> or <g className=\"someclass\" not closing..\n\n          if (beginnings) {\n            if (/<[^\\/].+[^\\/]>|^\\w.+[^\\/]>$|<[a-z]+>/gi.test(allArray[i - 1])) {\n              // Tests previous element is the same, if so add space\n              space += spaces;\n              prevBeginnings = element;\n              newString += element.replace(/^/g, '\\n' + ' '.repeat(space));\n            } else {\n              prevBeginnings = element;\n              newString += element.replace(/^/g, i === 0 ? '' : '\\n' + ' '.repeat(space)); // First line, only adds new line (\\n) if it's not the first line\n            }\n          } // Indents single open and closing elements <.../> or <..>...</..>\n          else if (onelines) {\n            if (/^<[^\\/]+>$|^<style.+{?>?$|^[\\w|-|\\.].+[^\\/]>$/gi.test(allArray[i - 1])) {\n              // tests if previouos element is <...> or <style...{ or ...> \n              space += spaces;\n              newString += element.replace(/^/g, '\\n' + ' '.repeat(space)); // Indents if previous line is different\n            } else {\n              // const extraSpace = space + 2  add more spaces if needed\n              var extraSpace = space + 1; // single lines ... or ...>\n\n              newString += element.replace(/^/g, '\\n' + ' '.repeat(extraSpace));\n            }\n          } // Doesn't indent closing elements </g>, </div>, }</style> etc etc..\n          else if (endings) {\n            var justLetters = element.replace(/[^a-zA-Z]/ig, '');\n            var regex = new RegExp(\"^<\".concat(justLetters), 'gi');\n            /* If indented tag is same ending tag */\n\n            if (regex.test(prevBeginnings) && justLetters != 'style') {\n              newString += element.replace(/^/g, '\\n' + ' '.repeat(space));\n            } else {\n              space -= spaces;\n              newString += element.replace(/^/g, '\\n' + ' '.repeat(space));\n            }\n          }\n        }\n      } catch (e) {\n        console.log(e);\n        return \"<span>\".concat(e, \"</span>\");\n      }\n\n      return newString;\n    }\n  }]);\n  return Format;\n}();\n\n;\nmodule.exports = new Format();"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}