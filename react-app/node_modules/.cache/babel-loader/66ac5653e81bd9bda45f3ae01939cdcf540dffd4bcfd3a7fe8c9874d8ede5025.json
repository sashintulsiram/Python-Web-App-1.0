{"ast":null,"code":"'use strict';\n\nvar FS = require('fs');\nvar yaml = require('js-yaml');\nvar EXTEND = require('whet.extend');\n\n/**\n * Read and/or extend/replace default config file,\n * prepare and optimize plugins array.\n *\n * @param {Object} [config] input config\n * @return {Object} output config\n */\nmodule.exports = function (config) {\n  var defaults;\n  if (config && config.full) {\n    defaults = config;\n    if (defaults.plugins) {\n      defaults.plugins = preparePluginsArray(defaults.plugins);\n      defaults.plugins = optimizePluginsArray(defaults.plugins);\n    }\n    defaults.multipass = config.multipass;\n  } else {\n    defaults = EXTEND({}, yaml.safeLoad(FS.readFileSync(__dirname + '/../../.svgo.yml', 'utf8')));\n    defaults.plugins = preparePluginsArray(defaults.plugins);\n    if (config) {\n      defaults = extendConfig(defaults, config);\n      defaults.multipass = config.multipass;\n      if ('floatPrecision' in config) {\n        defaults.plugins.forEach(function (plugin) {\n          if (plugin.params && 'floatPrecision' in plugin.params) {\n            plugin.params.floatPrecision = config.floatPrecision;\n          }\n        });\n      }\n    }\n    defaults.plugins = optimizePluginsArray(defaults.plugins);\n  }\n  return defaults;\n};\n\n/**\n * Require() all plugins in array.\n *\n * @param {Array} plugins input plugins array\n * @return {Array} input plugins array of arrays\n */\nfunction preparePluginsArray(plugins) {\n  var plugin, key;\n  return plugins.map(function (item) {\n    // {}\n    if (typeof item === 'object') {\n      key = Object.keys(item)[0];\n\n      // custom\n      if (typeof item[key] === 'object' && item[key].fn && typeof item[key].fn === 'function') {\n        plugin = setupCustomPlugin(key, item[key]);\n      } else {\n        plugin = EXTEND({}, require('../../plugins/' + key));\n\n        // name: {}\n        if (typeof item[key] === 'object') {\n          plugin.params = EXTEND({}, plugin.params || {}, item[key]);\n          plugin.active = true;\n\n          // name: false\n        } else if (item[key] === false) {\n          plugin.active = false;\n\n          // name: true\n        } else if (item[key] === true) {\n          plugin.active = true;\n        }\n        plugin.name = key;\n      }\n\n      // name\n    } else {\n      plugin = EXTEND({}, require('../../plugins/' + item));\n      plugin.name = item;\n    }\n    return plugin;\n  });\n}\n\n/**\n * Extend plugins with the custom config object.\n *\n * @param {Array} plugins input plugins\n * @param {Object} config config\n * @return {Array} output plugins\n */\nfunction extendConfig(defaults, config) {\n  var key;\n\n  // plugins\n  if (config.plugins) {\n    config.plugins.forEach(function (item) {\n      // {}\n      if (typeof item === 'object') {\n        key = Object.keys(item)[0];\n\n        // custom\n        if (typeof item[key] === 'object' && item[key].fn && typeof item[key].fn === 'function') {\n          defaults.plugins.push(setupCustomPlugin(key, item[key]));\n        } else {\n          defaults.plugins.forEach(function (plugin) {\n            if (plugin.name === key) {\n              // name: {}\n              if (typeof item[key] === 'object') {\n                plugin.params = EXTEND({}, plugin.params || {}, item[key]);\n                plugin.active = true;\n\n                // name: false\n              } else if (item[key] === false) {\n                plugin.active = false;\n\n                // name: true\n              } else if (item[key] === true) {\n                plugin.active = true;\n              }\n            }\n          });\n        }\n      }\n    });\n  }\n\n  // svg2js\n  if (config.svg2js) {\n    defaults.svg2js = config.svg2js;\n  }\n\n  // js2svg\n  if (config.js2svg) {\n    defaults.js2svg = config.js2svg;\n  }\n  return defaults;\n}\n\n/**\n * Setup and enable a custom plugin\n *\n * @param {String} plugin name\n * @param {Object} custom plugin\n * @return {Array} enabled plugin\n */\nfunction setupCustomPlugin(name, plugin) {\n  plugin.active = true;\n  plugin.params = EXTEND({}, plugin.params || {});\n  plugin.name = name;\n  return plugin;\n}\n\n/**\n * Try to group sequential elements of plugins array.\n *\n * @param {Object} plugins input plugins\n * @return {Array} output plugins\n */\nfunction optimizePluginsArray(plugins) {\n  var prev;\n  plugins = plugins.map(function (item) {\n    return [item];\n  });\n  plugins = plugins.filter(function (item) {\n    if (prev && item[0].type === prev[0].type) {\n      prev.push(item[0]);\n      return false;\n    }\n    prev = item;\n    return true;\n  });\n  return plugins;\n}","map":{"version":3,"names":["FS","require","yaml","EXTEND","module","exports","config","defaults","full","plugins","preparePluginsArray","optimizePluginsArray","multipass","safeLoad","readFileSync","__dirname","extendConfig","forEach","plugin","params","floatPrecision","key","map","item","Object","keys","fn","setupCustomPlugin","active","name","push","svg2js","js2svg","prev","filter","type"],"sources":["C:/Users/SashinTulsiram/Documents/Software/react-frontend-bulma/node_modules/svgo/lib/svgo/config.js"],"sourcesContent":["'use strict';\n\nvar FS = require('fs');\nvar yaml = require('js-yaml');\n\nvar EXTEND = require('whet.extend');\n\n/**\n * Read and/or extend/replace default config file,\n * prepare and optimize plugins array.\n *\n * @param {Object} [config] input config\n * @return {Object} output config\n */\nmodule.exports = function(config) {\n\n    var defaults;\n\n    if (config && config.full) {\n\n        defaults = config;\n\n        if (defaults.plugins) {\n            defaults.plugins = preparePluginsArray(defaults.plugins);\n            defaults.plugins = optimizePluginsArray(defaults.plugins);\n        }\n\n        defaults.multipass = config.multipass;\n\n    } else {\n\n        defaults = EXTEND({}, yaml.safeLoad(FS.readFileSync(__dirname + '/../../.svgo.yml', 'utf8')));\n\n        defaults.plugins = preparePluginsArray(defaults.plugins);\n\n        if (config) {\n            defaults = extendConfig(defaults, config);\n            defaults.multipass = config.multipass;\n\n            if ('floatPrecision' in config) {\n                defaults.plugins.forEach(function(plugin) {\n                    if (plugin.params && ('floatPrecision' in plugin.params)) {\n                        plugin.params.floatPrecision = config.floatPrecision;\n                    }\n                });\n            }\n        }\n\n        defaults.plugins = optimizePluginsArray(defaults.plugins);\n\n    }\n\n    return defaults;\n\n};\n\n/**\n * Require() all plugins in array.\n *\n * @param {Array} plugins input plugins array\n * @return {Array} input plugins array of arrays\n */\nfunction preparePluginsArray(plugins) {\n\n    var plugin,\n        key;\n\n    return plugins.map(function(item) {\n\n        // {}\n        if (typeof item === 'object') {\n\n            key = Object.keys(item)[0];\n\n            // custom\n            if (typeof item[key] === 'object' && item[key].fn && typeof item[key].fn === 'function') {\n                plugin = setupCustomPlugin(key, item[key]);\n\n            } else {\n\n              plugin = EXTEND({}, require('../../plugins/' + key));\n\n              // name: {}\n              if (typeof item[key] === 'object') {\n                  plugin.params = EXTEND({}, plugin.params || {}, item[key]);\n                  plugin.active = true;\n\n              // name: false\n              } else if (item[key] === false) {\n                 plugin.active = false;\n\n              // name: true\n              } else if (item[key] === true) {\n                 plugin.active = true;\n              }\n\n              plugin.name = key;\n            }\n\n        // name\n        } else {\n\n            plugin = EXTEND({}, require('../../plugins/' + item));\n            plugin.name = item;\n\n        }\n\n        return plugin;\n\n    });\n\n}\n\n/**\n * Extend plugins with the custom config object.\n *\n * @param {Array} plugins input plugins\n * @param {Object} config config\n * @return {Array} output plugins\n */\nfunction extendConfig(defaults, config) {\n\n    var key;\n\n    // plugins\n    if (config.plugins) {\n\n        config.plugins.forEach(function(item) {\n\n            // {}\n            if (typeof item === 'object') {\n\n                key = Object.keys(item)[0];\n\n                // custom\n                if (typeof item[key] === 'object' && item[key].fn && typeof item[key].fn === 'function') {\n                    defaults.plugins.push(setupCustomPlugin(key, item[key]));\n\n                } else {\n                    defaults.plugins.forEach(function(plugin) {\n\n                        if (plugin.name === key) {\n                            // name: {}\n                            if (typeof item[key] === 'object') {\n                                plugin.params = EXTEND({}, plugin.params || {}, item[key]);\n                                plugin.active = true;\n\n                            // name: false\n                            } else if (item[key] === false) {\n                               plugin.active = false;\n\n                            // name: true\n                            } else if (item[key] === true) {\n                               plugin.active = true;\n                            }\n                        }\n                    });\n                }\n\n            }\n\n        });\n\n    }\n\n    // svg2js\n    if (config.svg2js) {\n        defaults.svg2js = config.svg2js;\n    }\n\n    // js2svg\n    if (config.js2svg) {\n        defaults.js2svg = config.js2svg;\n    }\n\n    return defaults;\n\n}\n\n/**\n * Setup and enable a custom plugin\n *\n * @param {String} plugin name\n * @param {Object} custom plugin\n * @return {Array} enabled plugin\n */\nfunction setupCustomPlugin(name, plugin) {\n    plugin.active = true;\n    plugin.params = EXTEND({}, plugin.params || {});\n    plugin.name = name;\n\n    return plugin;\n}\n\n/**\n * Try to group sequential elements of plugins array.\n *\n * @param {Object} plugins input plugins\n * @return {Array} output plugins\n */\nfunction optimizePluginsArray(plugins) {\n\n    var prev;\n\n    plugins = plugins.map(function(item) {\n        return [item];\n    });\n\n    plugins = plugins.filter(function(item) {\n\n        if (prev && item[0].type === prev[0].type) {\n            prev.push(item[0]);\n            return false;\n        }\n\n        prev = item;\n\n        return true;\n\n    });\n\n    return plugins;\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}