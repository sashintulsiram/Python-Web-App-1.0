{"ast":null,"code":"'use strict';\n\nvar ELEM_SEP = ':';\nexports.type = 'perItem';\nexports.active = false;\nexports.description = 'removes specified attributes';\nexports.params = {\n  attrs: []\n};\n\n/**\n * Remove attributes\n *\n * @param attrs:\n *\n *   format: [ element* : attribute* ]\n *\n *   element   : regexp (wrapped into ^...$), single * or omitted > all elements\n *   attribute : regexp (wrapped into ^...$)\n *\n *   examples:\n *\n *     > remove fill attribute on path element\n *     ---\n *       attrs: 'path:fill'\n *\n *\n *     > remove all fill and stroke attribute\n *     ---\n *       attrs:\n *         - 'fill'\n *         - 'stroke'\n *\n *     [is same as]\n *\n *       attrs: '(fill|stroke)'\n *\n *     [is same as]\n *\n *       attrs: '*:(fill|stroke)'\n *\n *     [is same as]\n *\n *       attrs: '.*:(fill|stroke)'\n *\n *\n *     > remove all stroke related attributes\n *     ----\n *     attrs: 'stroke.*'\n *\n *\n * @param {Object} item current iteration item\n * @param {Object} params plugin params\n * @return {Boolean} if false, item will be filtered out\n *\n * @author Benny Schudel\n */\nexports.fn = function (item, params) {\n  // wrap into an array if params is not\n  if (!Array.isArray(params.attrs)) {\n    params.attrs = [params.attrs];\n  }\n  if (item.isElem()) {\n    // prepare patterns\n    var patterns = params.attrs.map(function (pattern) {\n      // apply to all elements if specifc element is omitted\n      if (pattern.indexOf(ELEM_SEP) === -1) {\n        pattern = ['.*', ELEM_SEP, pattern].join('');\n      }\n\n      // create regexps for element and attribute name\n      return pattern.split(ELEM_SEP).map(function (value) {\n        // adjust single * to match anything\n        if (value === '*') {\n          value = '.*';\n        }\n        return new RegExp(['^', value, '$'].join(''), 'i');\n      });\n    });\n\n    // loop patterns\n    patterns.forEach(function (pattern) {\n      // matches element\n      if (pattern[0].test(item.elem)) {\n        // loop attributes\n        item.eachAttr(function (attr) {\n          var name = attr.name;\n\n          // matches attribute name\n          if (pattern[1].test(name)) {\n            item.removeAttr(name);\n          }\n        });\n      }\n    });\n  }\n};","map":{"version":3,"names":["ELEM_SEP","exports","type","active","description","params","attrs","fn","item","Array","isArray","isElem","patterns","map","pattern","indexOf","join","split","value","RegExp","forEach","test","elem","eachAttr","attr","name","removeAttr"],"sources":["C:/Users/SashinTulsiram/Documents/Software/react-frontend-bulma/node_modules/svgo/plugins/removeAttrs.js"],"sourcesContent":["'use strict';\n\nvar ELEM_SEP = ':';\n\nexports.type = 'perItem';\n\nexports.active = false;\n\nexports.description = 'removes specified attributes';\n\nexports.params = {\n    attrs: []\n};\n\n/**\n * Remove attributes\n *\n * @param attrs:\n *\n *   format: [ element* : attribute* ]\n *\n *   element   : regexp (wrapped into ^...$), single * or omitted > all elements\n *   attribute : regexp (wrapped into ^...$)\n *\n *   examples:\n *\n *     > remove fill attribute on path element\n *     ---\n *       attrs: 'path:fill'\n *\n *\n *     > remove all fill and stroke attribute\n *     ---\n *       attrs:\n *         - 'fill'\n *         - 'stroke'\n *\n *     [is same as]\n *\n *       attrs: '(fill|stroke)'\n *\n *     [is same as]\n *\n *       attrs: '*:(fill|stroke)'\n *\n *     [is same as]\n *\n *       attrs: '.*:(fill|stroke)'\n *\n *\n *     > remove all stroke related attributes\n *     ----\n *     attrs: 'stroke.*'\n *\n *\n * @param {Object} item current iteration item\n * @param {Object} params plugin params\n * @return {Boolean} if false, item will be filtered out\n *\n * @author Benny Schudel\n */\nexports.fn = function(item, params) {\n\n        // wrap into an array if params is not\n    if (!Array.isArray(params.attrs)) {\n        params.attrs = [params.attrs];\n    }\n\n    if (item.isElem()) {\n\n            // prepare patterns\n        var patterns = params.attrs.map(function(pattern) {\n\n                // apply to all elements if specifc element is omitted\n            if (pattern.indexOf(ELEM_SEP) === -1) {\n                pattern = ['.*', ELEM_SEP, pattern].join('');\n            }\n\n                // create regexps for element and attribute name\n            return pattern.split(ELEM_SEP)\n                .map(function(value) {\n\n                        // adjust single * to match anything\n                    if (value === '*') { value = '.*'; }\n\n                    return new RegExp(['^', value, '$'].join(''), 'i');\n                });\n\n        });\n\n            // loop patterns\n        patterns.forEach(function(pattern) {\n\n                // matches element\n            if (pattern[0].test(item.elem)) {\n\n                    // loop attributes\n                item.eachAttr(function(attr) {\n                    var name = attr.name;\n\n                        // matches attribute name\n                    if (pattern[1].test(name)) {\n                        item.removeAttr(name);\n                    }\n\n                });\n\n            }\n\n        });\n\n    }\n\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,QAAQ,GAAG,GAAG;AAElBC,OAAO,CAACC,IAAI,GAAG,SAAS;AAExBD,OAAO,CAACE,MAAM,GAAG,KAAK;AAEtBF,OAAO,CAACG,WAAW,GAAG,8BAA8B;AAEpDH,OAAO,CAACI,MAAM,GAAG;EACbC,KAAK,EAAE;AACX,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAL,OAAO,CAACM,EAAE,GAAG,UAASC,IAAI,EAAEH,MAAM,EAAE;EAE5B;EACJ,IAAI,CAACI,KAAK,CAACC,OAAO,CAACL,MAAM,CAACC,KAAK,CAAC,EAAE;IAC9BD,MAAM,CAACC,KAAK,GAAG,CAACD,MAAM,CAACC,KAAK,CAAC;EACjC;EAEA,IAAIE,IAAI,CAACG,MAAM,CAAC,CAAC,EAAE;IAEX;IACJ,IAAIC,QAAQ,GAAGP,MAAM,CAACC,KAAK,CAACO,GAAG,CAAC,UAASC,OAAO,EAAE;MAE1C;MACJ,IAAIA,OAAO,CAACC,OAAO,CAACf,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE;QAClCc,OAAO,GAAG,CAAC,IAAI,EAAEd,QAAQ,EAAEc,OAAO,CAAC,CAACE,IAAI,CAAC,EAAE,CAAC;MAChD;;MAEI;MACJ,OAAOF,OAAO,CAACG,KAAK,CAACjB,QAAQ,CAAC,CACzBa,GAAG,CAAC,UAASK,KAAK,EAAE;QAEb;QACJ,IAAIA,KAAK,KAAK,GAAG,EAAE;UAAEA,KAAK,GAAG,IAAI;QAAE;QAEnC,OAAO,IAAIC,MAAM,CAAC,CAAC,GAAG,EAAED,KAAK,EAAE,GAAG,CAAC,CAACF,IAAI,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC;MACtD,CAAC,CAAC;IAEV,CAAC,CAAC;;IAEE;IACJJ,QAAQ,CAACQ,OAAO,CAAC,UAASN,OAAO,EAAE;MAE3B;MACJ,IAAIA,OAAO,CAAC,CAAC,CAAC,CAACO,IAAI,CAACb,IAAI,CAACc,IAAI,CAAC,EAAE;QAExB;QACJd,IAAI,CAACe,QAAQ,CAAC,UAASC,IAAI,EAAE;UACzB,IAAIC,IAAI,GAAGD,IAAI,CAACC,IAAI;;UAEhB;UACJ,IAAIX,OAAO,CAAC,CAAC,CAAC,CAACO,IAAI,CAACI,IAAI,CAAC,EAAE;YACvBjB,IAAI,CAACkB,UAAU,CAACD,IAAI,CAAC;UACzB;QAEJ,CAAC,CAAC;MAEN;IAEJ,CAAC,CAAC;EAEN;AAEJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}