{"ast":null,"code":"// Generated by CoffeeScript 2.4.1\n(function () {\n  var NodeType, XMLNode, XMLRaw;\n  NodeType = require('./NodeType');\n  XMLNode = require('./XMLNode');\n\n  // Represents a  raw node\n  module.exports = XMLRaw = class XMLRaw extends XMLNode {\n    // Initializes a new instance of `XMLRaw`\n\n    // `text` raw text\n    constructor(parent, text) {\n      super(parent);\n      if (text == null) {\n        throw new Error(\"Missing raw text. \" + this.debugInfo());\n      }\n      this.type = NodeType.Raw;\n      this.value = this.stringify.raw(text);\n    }\n\n    // Creates and returns a deep clone of `this`\n    clone() {\n      return Object.create(this);\n    }\n\n    // Converts the XML fragment to string\n\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation for pretty print\n    // `options.offset` how many indentations to add to every line for pretty print\n    // `options.newline` newline sequence for pretty print\n    toString(options) {\n      return this.options.writer.raw(this, this.options.writer.filterOptions(options));\n    }\n  };\n}).call(this);","map":{"version":3,"names":["NodeType","XMLNode","XMLRaw","require","module","exports","constructor","parent","text","Error","debugInfo","type","Raw","value","stringify","raw","clone","Object","create","toString","options","writer","filterOptions","call"],"sources":["C:/Users/SashinTulsiram/Documents/Software/react-frontend-bulma/react-app/node_modules/xmlbuilder/lib/XMLRaw.js"],"sourcesContent":["// Generated by CoffeeScript 2.4.1\n(function() {\n  var NodeType, XMLNode, XMLRaw;\n\n  NodeType = require('./NodeType');\n\n  XMLNode = require('./XMLNode');\n\n  // Represents a  raw node\n  module.exports = XMLRaw = class XMLRaw extends XMLNode {\n    // Initializes a new instance of `XMLRaw`\n\n    // `text` raw text\n    constructor(parent, text) {\n      super(parent);\n      if (text == null) {\n        throw new Error(\"Missing raw text. \" + this.debugInfo());\n      }\n      this.type = NodeType.Raw;\n      this.value = this.stringify.raw(text);\n    }\n\n    // Creates and returns a deep clone of `this`\n    clone() {\n      return Object.create(this);\n    }\n\n    // Converts the XML fragment to string\n\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation for pretty print\n    // `options.offset` how many indentations to add to every line for pretty print\n    // `options.newline` newline sequence for pretty print\n    toString(options) {\n      return this.options.writer.raw(this, this.options.writer.filterOptions(options));\n    }\n\n  };\n\n}).call(this);\n"],"mappings":"AAAA;AACA,CAAC,YAAW;EACV,IAAIA,QAAQ,EAAEC,OAAO,EAAEC,MAAM;EAE7BF,QAAQ,GAAGG,OAAO,CAAC,YAAY,CAAC;EAEhCF,OAAO,GAAGE,OAAO,CAAC,WAAW,CAAC;;EAE9B;EACAC,MAAM,CAACC,OAAO,GAAGH,MAAM,GAAG,MAAMA,MAAM,SAASD,OAAO,CAAC;IACrD;;IAEA;IACAK,WAAWA,CAACC,MAAM,EAAEC,IAAI,EAAE;MACxB,KAAK,CAACD,MAAM,CAAC;MACb,IAAIC,IAAI,IAAI,IAAI,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,oBAAoB,GAAG,IAAI,CAACC,SAAS,CAAC,CAAC,CAAC;MAC1D;MACA,IAAI,CAACC,IAAI,GAAGX,QAAQ,CAACY,GAAG;MACxB,IAAI,CAACC,KAAK,GAAG,IAAI,CAACC,SAAS,CAACC,GAAG,CAACP,IAAI,CAAC;IACvC;;IAEA;IACAQ,KAAKA,CAAA,EAAG;MACN,OAAOC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;IAC5B;;IAEA;;IAEA;IACA;IACA;IACA;IACAC,QAAQA,CAACC,OAAO,EAAE;MAChB,OAAO,IAAI,CAACA,OAAO,CAACC,MAAM,CAACN,GAAG,CAAC,IAAI,EAAE,IAAI,CAACK,OAAO,CAACC,MAAM,CAACC,aAAa,CAACF,OAAO,CAAC,CAAC;IAClF;EAEF,CAAC;AAEH,CAAC,EAAEG,IAAI,CAAC,IAAI,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}