{"ast":null,"code":"'use strict';\n\nvar common = require('../common');\nvar Type = require('../type');\nfunction isHexCode(c) {\n  return 0x30 /* 0 */ <= c && c <= 0x39 /* 9 */ || 0x41 /* A */ <= c && c <= 0x46 /* F */ || 0x61 /* a */ <= c && c <= 0x66 /* f */;\n}\n\nfunction isOctCode(c) {\n  return 0x30 /* 0 */ <= c && c <= 0x37 /* 7 */;\n}\n\nfunction isDecCode(c) {\n  return 0x30 /* 0 */ <= c && c <= 0x39 /* 9 */;\n}\n\nfunction resolveYamlInteger(data) {\n  if (null === data) {\n    return false;\n  }\n  var max = data.length,\n    index = 0,\n    hasDigits = false,\n    ch;\n  if (!max) {\n    return false;\n  }\n  ch = data[index];\n\n  // sign\n  if (ch === '-' || ch === '+') {\n    ch = data[++index];\n  }\n  if (ch === '0') {\n    // 0\n    if (index + 1 === max) {\n      return true;\n    }\n    ch = data[++index];\n\n    // base 2, base 8, base 16\n\n    if (ch === 'b') {\n      // base 2\n      index++;\n      for (; index < max; index++) {\n        ch = data[index];\n        if (ch === '_') {\n          continue;\n        }\n        if (ch !== '0' && ch !== '1') {\n          return false;\n        }\n        hasDigits = true;\n      }\n      return hasDigits;\n    }\n    if (ch === 'x') {\n      // base 16\n      index++;\n      for (; index < max; index++) {\n        ch = data[index];\n        if (ch === '_') {\n          continue;\n        }\n        if (!isHexCode(data.charCodeAt(index))) {\n          return false;\n        }\n        hasDigits = true;\n      }\n      return hasDigits;\n    }\n\n    // base 8\n    for (; index < max; index++) {\n      ch = data[index];\n      if (ch === '_') {\n        continue;\n      }\n      if (!isOctCode(data.charCodeAt(index))) {\n        return false;\n      }\n      hasDigits = true;\n    }\n    return hasDigits;\n  }\n\n  // base 10 (except 0) or base 60\n\n  for (; index < max; index++) {\n    ch = data[index];\n    if (ch === '_') {\n      continue;\n    }\n    if (ch === ':') {\n      break;\n    }\n    if (!isDecCode(data.charCodeAt(index))) {\n      return false;\n    }\n    hasDigits = true;\n  }\n  if (!hasDigits) {\n    return false;\n  }\n\n  // if !base60 - done;\n  if (ch !== ':') {\n    return true;\n  }\n\n  // base60 almost not used, no needs to optimize\n  return /^(:[0-5]?[0-9])+$/.test(data.slice(index));\n}\nfunction constructYamlInteger(data) {\n  var value = data,\n    sign = 1,\n    ch,\n    base,\n    digits = [];\n  if (value.indexOf('_') !== -1) {\n    value = value.replace(/_/g, '');\n  }\n  ch = value[0];\n  if (ch === '-' || ch === '+') {\n    if (ch === '-') {\n      sign = -1;\n    }\n    value = value.slice(1);\n    ch = value[0];\n  }\n  if ('0' === value) {\n    return 0;\n  }\n  if (ch === '0') {\n    if (value[1] === 'b') {\n      return sign * parseInt(value.slice(2), 2);\n    }\n    if (value[1] === 'x') {\n      return sign * parseInt(value, 16);\n    }\n    return sign * parseInt(value, 8);\n  }\n  if (value.indexOf(':') !== -1) {\n    value.split(':').forEach(function (v) {\n      digits.unshift(parseInt(v, 10));\n    });\n    value = 0;\n    base = 1;\n    digits.forEach(function (d) {\n      value += d * base;\n      base *= 60;\n    });\n    return sign * value;\n  }\n  return sign * parseInt(value, 10);\n}\nfunction isInteger(object) {\n  return '[object Number]' === Object.prototype.toString.call(object) && 0 === object % 1 && !common.isNegativeZero(object);\n}\nmodule.exports = new Type('tag:yaml.org,2002:int', {\n  kind: 'scalar',\n  resolve: resolveYamlInteger,\n  construct: constructYamlInteger,\n  predicate: isInteger,\n  represent: {\n    binary: function (object) {\n      return '0b' + object.toString(2);\n    },\n    octal: function (object) {\n      return '0' + object.toString(8);\n    },\n    decimal: function (object) {\n      return object.toString(10);\n    },\n    hexadecimal: function (object) {\n      return '0x' + object.toString(16).toUpperCase();\n    }\n  },\n  defaultStyle: 'decimal',\n  styleAliases: {\n    binary: [2, 'bin'],\n    octal: [8, 'oct'],\n    decimal: [10, 'dec'],\n    hexadecimal: [16, 'hex']\n  }\n});","map":{"version":3,"names":["common","require","Type","isHexCode","c","isOctCode","isDecCode","resolveYamlInteger","data","max","length","index","hasDigits","ch","charCodeAt","test","slice","constructYamlInteger","value","sign","base","digits","indexOf","replace","parseInt","split","forEach","v","unshift","d","isInteger","object","Object","prototype","toString","call","isNegativeZero","module","exports","kind","resolve","construct","predicate","represent","binary","octal","decimal","hexadecimal","toUpperCase","defaultStyle","styleAliases"],"sources":["C:/Users/SashinTulsiram/Documents/Software/react-frontend-bulma/node_modules/svgo/node_modules/js-yaml/lib/js-yaml/type/int.js"],"sourcesContent":["'use strict';\n\nvar common = require('../common');\nvar Type   = require('../type');\n\nfunction isHexCode(c) {\n  return ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) ||\n         ((0x41/* A */ <= c) && (c <= 0x46/* F */)) ||\n         ((0x61/* a */ <= c) && (c <= 0x66/* f */));\n}\n\nfunction isOctCode(c) {\n  return ((0x30/* 0 */ <= c) && (c <= 0x37/* 7 */));\n}\n\nfunction isDecCode(c) {\n  return ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */));\n}\n\nfunction resolveYamlInteger(data) {\n  if (null === data) {\n    return false;\n  }\n\n  var max = data.length,\n      index = 0,\n      hasDigits = false,\n      ch;\n\n  if (!max) { return false; }\n\n  ch = data[index];\n\n  // sign\n  if (ch === '-' || ch === '+') {\n    ch = data[++index];\n  }\n\n  if (ch === '0') {\n    // 0\n    if (index + 1 === max) { return true; }\n    ch = data[++index];\n\n    // base 2, base 8, base 16\n\n    if (ch === 'b') {\n      // base 2\n      index++;\n\n      for (; index < max; index++) {\n        ch = data[index];\n        if (ch === '_') { continue; }\n        if (ch !== '0' && ch !== '1') {\n          return false;\n        }\n        hasDigits = true;\n      }\n      return hasDigits;\n    }\n\n\n    if (ch === 'x') {\n      // base 16\n      index++;\n\n      for (; index < max; index++) {\n        ch = data[index];\n        if (ch === '_') { continue; }\n        if (!isHexCode(data.charCodeAt(index))) {\n          return false;\n        }\n        hasDigits = true;\n      }\n      return hasDigits;\n    }\n\n    // base 8\n    for (; index < max; index++) {\n      ch = data[index];\n      if (ch === '_') { continue; }\n      if (!isOctCode(data.charCodeAt(index))) {\n        return false;\n      }\n      hasDigits = true;\n    }\n    return hasDigits;\n  }\n\n  // base 10 (except 0) or base 60\n\n  for (; index < max; index++) {\n    ch = data[index];\n    if (ch === '_') { continue; }\n    if (ch === ':') { break; }\n    if (!isDecCode(data.charCodeAt(index))) {\n      return false;\n    }\n    hasDigits = true;\n  }\n\n  if (!hasDigits) { return false; }\n\n  // if !base60 - done;\n  if (ch !== ':') { return true; }\n\n  // base60 almost not used, no needs to optimize\n  return /^(:[0-5]?[0-9])+$/.test(data.slice(index));\n}\n\nfunction constructYamlInteger(data) {\n  var value = data, sign = 1, ch, base, digits = [];\n\n  if (value.indexOf('_') !== -1) {\n    value = value.replace(/_/g, '');\n  }\n\n  ch = value[0];\n\n  if (ch === '-' || ch === '+') {\n    if (ch === '-') { sign = -1; }\n    value = value.slice(1);\n    ch = value[0];\n  }\n\n  if ('0' === value) {\n    return 0;\n  }\n\n  if (ch === '0') {\n    if (value[1] === 'b') {\n      return sign * parseInt(value.slice(2), 2);\n    }\n    if (value[1] === 'x') {\n      return sign * parseInt(value, 16);\n    }\n    return sign * parseInt(value, 8);\n\n  }\n\n  if (value.indexOf(':') !== -1) {\n    value.split(':').forEach(function (v) {\n      digits.unshift(parseInt(v, 10));\n    });\n\n    value = 0;\n    base = 1;\n\n    digits.forEach(function (d) {\n      value += (d * base);\n      base *= 60;\n    });\n\n    return sign * value;\n\n  }\n\n  return sign * parseInt(value, 10);\n}\n\nfunction isInteger(object) {\n  return ('[object Number]' === Object.prototype.toString.call(object)) &&\n         (0 === object % 1 && !common.isNegativeZero(object));\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:int', {\n  kind: 'scalar',\n  resolve: resolveYamlInteger,\n  construct: constructYamlInteger,\n  predicate: isInteger,\n  represent: {\n    binary:      function (object) { return '0b' + object.toString(2); },\n    octal:       function (object) { return '0'  + object.toString(8); },\n    decimal:     function (object) { return        object.toString(10); },\n    hexadecimal: function (object) { return '0x' + object.toString(16).toUpperCase(); }\n  },\n  defaultStyle: 'decimal',\n  styleAliases: {\n    binary:      [ 2,  'bin' ],\n    octal:       [ 8,  'oct' ],\n    decimal:     [ 10, 'dec' ],\n    hexadecimal: [ 16, 'hex' ]\n  }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}