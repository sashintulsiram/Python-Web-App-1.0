{"ast":null,"code":"'use strict';\n\nexports.type = 'full';\nexports.active = true;\nexports.description = 'removes unused IDs and minifies used';\nexports.params = {\n  remove: true,\n  minify: true,\n  prefix: ''\n};\nvar referencesProps = require('./_collections').referencesProps,\n  regReferencesUrl = /^url\\((\"|')?#(.+?)\\1\\)$/,\n  regReferencesHref = /^#(.+?)$/,\n  regReferencesBegin = /^(\\w+?)\\./,\n  styleOrScript = ['style', 'script'],\n  generateIDchars = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n  maxIDindex = generateIDchars.length - 1;\n\n/**\n * Remove unused and minify used IDs\n * (only if there are no any <style> or <script>).\n *\n * @param {Object} item current iteration item\n * @param {Object} params plugin params\n *\n * @author Kir Belevich\n */\nexports.fn = function (data, params) {\n  var currentID,\n    currentIDstring,\n    IDs = {},\n    referencesIDs = {},\n    idPrefix = 'id-',\n    // prefix IDs so that values like '__proto__' don't break the work\n    hasStyleOrScript = false;\n\n  /**\n   * Bananas!\n   *\n   * @param {Array} items input items\n   * @return {Array} output items\n   */\n  function monkeys(items) {\n    for (var i = 0; i < items.content.length; i++) {\n      var item = items.content[i],\n        match;\n\n      // check if <style> of <script> presents\n      if (item.isElem(styleOrScript)) {\n        hasStyleOrScript = true;\n      }\n\n      // …and don't remove any ID if yes\n      if (!hasStyleOrScript) {\n        if (item.isElem()) {\n          item.eachAttr(function (attr) {\n            // save IDs\n            if (attr.name === 'id') {\n              if (idPrefix + attr.value in IDs) {\n                item.removeAttr('id');\n              } else {\n                IDs[idPrefix + attr.value] = item;\n              }\n            }\n\n            // save IDs url() references\n            else if (referencesProps.indexOf(attr.name) > -1) {\n              match = attr.value.match(regReferencesUrl);\n              if (match) {\n                if (referencesIDs[idPrefix + match[2]]) {\n                  referencesIDs[idPrefix + match[2]].push(attr);\n                } else {\n                  referencesIDs[idPrefix + match[2]] = [attr];\n                }\n              }\n            }\n\n            // save IDs href references\n            else if (attr.name === 'xlink:href' && (match = attr.value.match(regReferencesHref)) || attr.name === 'begin' && (match = attr.value.match(regReferencesBegin))) {\n              if (referencesIDs[idPrefix + match[1]]) {\n                referencesIDs[idPrefix + match[1]].push(attr);\n              } else {\n                referencesIDs[idPrefix + match[1]] = [attr];\n              }\n            }\n          });\n        }\n\n        // go deeper\n        if (item.content) {\n          monkeys(item);\n        }\n      }\n    }\n    return items;\n  }\n  data = monkeys(data);\n  if (!hasStyleOrScript) {\n    for (var k in referencesIDs) {\n      if (IDs[k]) {\n        // replace referenced IDs with the minified ones\n        if (params.minify) {\n          currentIDstring = getIDstring(currentID = generateID(currentID), params);\n          IDs[k].attr('id').value = currentIDstring;\n          referencesIDs[k].forEach(function (attr) {\n            k = k.replace(idPrefix, '');\n            attr.value = attr.value.replace('#' + k, '#' + currentIDstring).replace(k + '.', currentIDstring + '.');\n          });\n        }\n\n        // don't remove referenced IDs\n        delete IDs[idPrefix + k];\n      }\n    }\n\n    // remove non-referenced IDs attributes from elements\n    if (params.remove) {\n      for (var ID in IDs) {\n        IDs[ID].removeAttr('id');\n      }\n    }\n  }\n  return data;\n};\n\n/**\n * Generate unique minimal ID.\n *\n * @param {Array} [currentID] current ID\n * @return {Array} generated ID array\n */\nfunction generateID(currentID) {\n  if (!currentID) return [0];\n  currentID[currentID.length - 1]++;\n  for (var i = currentID.length - 1; i > 0; i--) {\n    if (currentID[i] > maxIDindex) {\n      currentID[i] = 0;\n      if (currentID[i - 1] !== undefined) {\n        currentID[i - 1]++;\n      }\n    }\n  }\n  if (currentID[0] > maxIDindex) {\n    currentID[0] = 0;\n    currentID.unshift(0);\n  }\n  return currentID;\n}\n\n/**\n * Get string from generated ID array.\n *\n * @param {Array} arr input ID array\n * @return {String} output ID string\n */\nfunction getIDstring(arr, params) {\n  var str = params.prefix;\n  arr.forEach(function (i) {\n    str += generateIDchars[i];\n  });\n  return str;\n}","map":{"version":3,"names":["exports","type","active","description","params","remove","minify","prefix","referencesProps","require","regReferencesUrl","regReferencesHref","regReferencesBegin","styleOrScript","generateIDchars","maxIDindex","length","fn","data","currentID","currentIDstring","IDs","referencesIDs","idPrefix","hasStyleOrScript","monkeys","items","i","content","item","match","isElem","eachAttr","attr","name","value","removeAttr","indexOf","push","k","getIDstring","generateID","forEach","replace","ID","undefined","unshift","arr","str"],"sources":["C:/Users/SashinTulsiram/Documents/Software/react-frontend-bulma/node_modules/svgo/plugins/cleanupIDs.js"],"sourcesContent":["'use strict';\n\nexports.type = 'full';\n\nexports.active = true;\n\nexports.description = 'removes unused IDs and minifies used';\n\nexports.params = {\n    remove: true,\n    minify: true,\n    prefix: ''\n};\n\nvar referencesProps = require('./_collections').referencesProps,\n    regReferencesUrl = /^url\\((\"|')?#(.+?)\\1\\)$/,\n    regReferencesHref = /^#(.+?)$/,\n    regReferencesBegin = /^(\\w+?)\\./,\n    styleOrScript = ['style', 'script'],\n    generateIDchars = [\n        'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'\n    ],\n    maxIDindex = generateIDchars.length - 1;\n\n/**\n * Remove unused and minify used IDs\n * (only if there are no any <style> or <script>).\n *\n * @param {Object} item current iteration item\n * @param {Object} params plugin params\n *\n * @author Kir Belevich\n */\nexports.fn = function(data, params) {\n\n    var currentID,\n        currentIDstring,\n        IDs = {},\n        referencesIDs = {},\n        idPrefix = 'id-', // prefix IDs so that values like '__proto__' don't break the work\n        hasStyleOrScript = false;\n\n    /**\n     * Bananas!\n     *\n     * @param {Array} items input items\n     * @return {Array} output items\n     */\n    function monkeys(items) {\n\n        for (var i = 0; i < items.content.length; i++) {\n\n            var item = items.content[i],\n                match;\n\n            // check if <style> of <script> presents\n            if (item.isElem(styleOrScript)) {\n                hasStyleOrScript = true;\n            }\n\n            // …and don't remove any ID if yes\n            if (!hasStyleOrScript) {\n\n                if (item.isElem()) {\n\n                    item.eachAttr(function(attr) {\n                        // save IDs\n                        if (attr.name === 'id') {\n                            if (idPrefix + attr.value in IDs) {\n                                item.removeAttr('id');\n                            } else {\n                                IDs[idPrefix + attr.value] = item;\n                            }\n                        }\n\n                        // save IDs url() references\n                        else if (referencesProps.indexOf(attr.name) > -1) {\n                            match = attr.value.match(regReferencesUrl);\n\n                            if (match) {\n                                if (referencesIDs[idPrefix + match[2]]) {\n                                    referencesIDs[idPrefix + match[2]].push(attr);\n                                } else {\n                                    referencesIDs[idPrefix + match[2]] = [attr];\n                                }\n                            }\n                        }\n\n                        // save IDs href references\n                        else if (\n                            attr.name === 'xlink:href' && (match = attr.value.match(regReferencesHref)) ||\n                            attr.name === 'begin' && (match = attr.value.match(regReferencesBegin))\n                        ) {\n                            if (referencesIDs[idPrefix + match[1]]) {\n                                referencesIDs[idPrefix + match[1]].push(attr);\n                            } else {\n                                referencesIDs[idPrefix + match[1]] = [attr];\n                            }\n                        }\n                    });\n\n                }\n\n                // go deeper\n                if (item.content) {\n                    monkeys(item);\n                }\n\n            }\n\n        }\n\n        return items;\n\n    }\n\n    data = monkeys(data);\n\n    if (!hasStyleOrScript) {\n\n\n        for (var k in referencesIDs) {\n            if (IDs[k]) {\n\n                // replace referenced IDs with the minified ones\n                if (params.minify) {\n\n                    currentIDstring = getIDstring(currentID = generateID(currentID), params);\n                    IDs[k].attr('id').value = currentIDstring;\n\n                    referencesIDs[k].forEach(function(attr) {\n                        k = k.replace(idPrefix, '');\n                        attr.value = attr.value\n                            .replace('#' + k, '#' + currentIDstring)\n                            .replace(k + '.', currentIDstring + '.');\n                    });\n\n                }\n\n                // don't remove referenced IDs\n                delete IDs[idPrefix + k];\n\n            }\n        }\n\n        // remove non-referenced IDs attributes from elements\n        if (params.remove) {\n\n            for(var ID in IDs) {\n                IDs[ID].removeAttr('id');\n            }\n\n        }\n\n    }\n\n    return data;\n\n};\n\n/**\n * Generate unique minimal ID.\n *\n * @param {Array} [currentID] current ID\n * @return {Array} generated ID array\n */\nfunction generateID(currentID) {\n\n    if (!currentID) return [0];\n\n    currentID[currentID.length - 1]++;\n\n    for(var i = currentID.length - 1; i > 0; i--) {\n        if (currentID[i] > maxIDindex) {\n            currentID[i] = 0;\n\n            if (currentID[i - 1] !== undefined) {\n                currentID[i - 1]++;\n            }\n        }\n    }\n\n    if (currentID[0] > maxIDindex) {\n        currentID[0] = 0;\n        currentID.unshift(0);\n    }\n\n    return currentID;\n\n}\n\n/**\n * Get string from generated ID array.\n *\n * @param {Array} arr input ID array\n * @return {String} output ID string\n */\nfunction getIDstring(arr, params) {\n\n    var str = params.prefix;\n\n    arr.forEach(function(i) {\n        str += generateIDchars[i];\n    });\n\n    return str;\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}