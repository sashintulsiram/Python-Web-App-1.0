{"ast":null,"code":"// Generated by CoffeeScript 2.4.1\n(function () {\n  // Copies all enumerable own properties from `sources` to `target`\n  var assign,\n    getValue,\n    isArray,\n    isEmpty,\n    isFunction,\n    isObject,\n    isPlainObject,\n    hasProp = {}.hasOwnProperty;\n  assign = function (target, ...sources) {\n    var i, key, len, source;\n    if (isFunction(Object.assign)) {\n      Object.assign.apply(null, arguments);\n    } else {\n      for (i = 0, len = sources.length; i < len; i++) {\n        source = sources[i];\n        if (source != null) {\n          for (key in source) {\n            if (!hasProp.call(source, key)) continue;\n            target[key] = source[key];\n          }\n        }\n      }\n    }\n    return target;\n  };\n\n  // Determines if `val` is a Function object\n  isFunction = function (val) {\n    return !!val && Object.prototype.toString.call(val) === '[object Function]';\n  };\n\n  // Determines if `val` is an Object\n  isObject = function (val) {\n    var ref;\n    return !!val && ((ref = typeof val) === 'function' || ref === 'object');\n  };\n\n  // Determines if `val` is an Array\n  isArray = function (val) {\n    if (isFunction(Array.isArray)) {\n      return Array.isArray(val);\n    } else {\n      return Object.prototype.toString.call(val) === '[object Array]';\n    }\n  };\n\n  // Determines if `val` is an empty Array or an Object with no own properties\n  isEmpty = function (val) {\n    var key;\n    if (isArray(val)) {\n      return !val.length;\n    } else {\n      for (key in val) {\n        if (!hasProp.call(val, key)) continue;\n        return false;\n      }\n      return true;\n    }\n  };\n\n  // Determines if `val` is a plain Object\n  isPlainObject = function (val) {\n    var ctor, proto;\n    return isObject(val) && (proto = Object.getPrototypeOf(val)) && (ctor = proto.constructor) && typeof ctor === 'function' && ctor instanceof ctor && Function.prototype.toString.call(ctor) === Function.prototype.toString.call(Object);\n  };\n\n  // Gets the primitive value of an object\n  getValue = function (obj) {\n    if (isFunction(obj.valueOf)) {\n      return obj.valueOf();\n    } else {\n      return obj;\n    }\n  };\n  module.exports.assign = assign;\n  module.exports.isFunction = isFunction;\n  module.exports.isObject = isObject;\n  module.exports.isArray = isArray;\n  module.exports.isEmpty = isEmpty;\n  module.exports.isPlainObject = isPlainObject;\n  module.exports.getValue = getValue;\n}).call(this);","map":{"version":3,"names":["assign","getValue","isArray","isEmpty","isFunction","isObject","isPlainObject","hasProp","hasOwnProperty","target","sources","i","key","len","source","Object","apply","arguments","length","call","val","prototype","toString","ref","Array","ctor","proto","getPrototypeOf","constructor","Function","obj","valueOf","module","exports"],"sources":["C:/Users/SashinTulsiram/Documents/Software/react-frontend-bulma/react-app/node_modules/xmlbuilder/lib/Utility.js"],"sourcesContent":["// Generated by CoffeeScript 2.4.1\n(function() {\n  // Copies all enumerable own properties from `sources` to `target`\n  var assign, getValue, isArray, isEmpty, isFunction, isObject, isPlainObject,\n    hasProp = {}.hasOwnProperty;\n\n  assign = function(target, ...sources) {\n    var i, key, len, source;\n    if (isFunction(Object.assign)) {\n      Object.assign.apply(null, arguments);\n    } else {\n      for (i = 0, len = sources.length; i < len; i++) {\n        source = sources[i];\n        if (source != null) {\n          for (key in source) {\n            if (!hasProp.call(source, key)) continue;\n            target[key] = source[key];\n          }\n        }\n      }\n    }\n    return target;\n  };\n\n  // Determines if `val` is a Function object\n  isFunction = function(val) {\n    return !!val && Object.prototype.toString.call(val) === '[object Function]';\n  };\n\n  // Determines if `val` is an Object\n  isObject = function(val) {\n    var ref;\n    return !!val && ((ref = typeof val) === 'function' || ref === 'object');\n  };\n\n  // Determines if `val` is an Array\n  isArray = function(val) {\n    if (isFunction(Array.isArray)) {\n      return Array.isArray(val);\n    } else {\n      return Object.prototype.toString.call(val) === '[object Array]';\n    }\n  };\n\n  // Determines if `val` is an empty Array or an Object with no own properties\n  isEmpty = function(val) {\n    var key;\n    if (isArray(val)) {\n      return !val.length;\n    } else {\n      for (key in val) {\n        if (!hasProp.call(val, key)) continue;\n        return false;\n      }\n      return true;\n    }\n  };\n\n  // Determines if `val` is a plain Object\n  isPlainObject = function(val) {\n    var ctor, proto;\n    return isObject(val) && (proto = Object.getPrototypeOf(val)) && (ctor = proto.constructor) && (typeof ctor === 'function') && (ctor instanceof ctor) && (Function.prototype.toString.call(ctor) === Function.prototype.toString.call(Object));\n  };\n\n  // Gets the primitive value of an object\n  getValue = function(obj) {\n    if (isFunction(obj.valueOf)) {\n      return obj.valueOf();\n    } else {\n      return obj;\n    }\n  };\n\n  module.exports.assign = assign;\n\n  module.exports.isFunction = isFunction;\n\n  module.exports.isObject = isObject;\n\n  module.exports.isArray = isArray;\n\n  module.exports.isEmpty = isEmpty;\n\n  module.exports.isPlainObject = isPlainObject;\n\n  module.exports.getValue = getValue;\n\n}).call(this);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}