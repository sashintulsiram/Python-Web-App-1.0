{"ast":null,"code":"'use strict';\n\nexports.type = 'perItem';\nexports.active = true;\nexports.description = 'rounds numeric values to the fixed precision, removes default ‘px’ units';\nexports.params = {\n  floatPrecision: 3,\n  leadingZero: true,\n  defaultPx: true,\n  convertToPx: true\n};\nvar regNumericValues = /^([\\-+]?\\d*\\.?\\d+([eE][\\-+]?\\d+)?)(px|pt|pc|mm|cm|m|in|ft|em|ex|%)?$/,\n  removeLeadingZero = require('../lib/svgo/tools').removeLeadingZero,\n  absoluteLengths = {\n    // relative to px\n    cm: 96 / 2.54,\n    mm: 9600 / 2.54,\n    in: 96,\n    pt: 4 / 3,\n    pc: 16\n  };\n\n/**\n * Round numeric values to the fixed precision,\n * remove default 'px' units.\n *\n * @param {Object} item current iteration item\n * @param {Object} params plugin params\n * @return {Boolean} if false, item will be filtered out\n *\n * @author Kir Belevich\n */\nexports.fn = function (item, params) {\n  if (item.isElem()) {\n    var match;\n    item.eachAttr(function (attr) {\n      match = attr.value.match(regNumericValues);\n\n      // if attribute value matches regNumericValues\n      if (match) {\n        // round it to the fixed precision\n        var num = +(+match[1]).toFixed(params.floatPrecision),\n          units = match[3] || '';\n\n        // convert absolute values to pixels\n        if (params.convertToPx && units && units in absoluteLengths) {\n          var pxNum = +(absoluteLengths[units] * match[1]).toFixed(params.floatPrecision);\n          if (String(pxNum).length < match[0].length) num = pxNum, units = 'px';\n        }\n\n        // and remove leading zero\n        if (params.leadingZero) {\n          num = removeLeadingZero(num);\n        }\n\n        // remove default 'px' units\n        if (params.defaultPx && units === 'px') {\n          units = '';\n        }\n        attr.value = num + units;\n      }\n    });\n  }\n};","map":{"version":3,"names":["exports","type","active","description","params","floatPrecision","leadingZero","defaultPx","convertToPx","regNumericValues","removeLeadingZero","require","absoluteLengths","cm","mm","in","pt","pc","fn","item","isElem","match","eachAttr","attr","value","num","toFixed","units","pxNum","String","length"],"sources":["C:/Users/SashinTulsiram/Documents/Software/react-frontend-bulma/node_modules/svgo/plugins/cleanupNumericValues.js"],"sourcesContent":["'use strict';\n\nexports.type = 'perItem';\n\nexports.active = true;\n\nexports.description = 'rounds numeric values to the fixed precision, removes default ‘px’ units';\n\nexports.params = {\n    floatPrecision: 3,\n    leadingZero: true,\n    defaultPx: true,\n    convertToPx: true\n};\n\nvar regNumericValues = /^([\\-+]?\\d*\\.?\\d+([eE][\\-+]?\\d+)?)(px|pt|pc|mm|cm|m|in|ft|em|ex|%)?$/,\n    removeLeadingZero = require('../lib/svgo/tools').removeLeadingZero,\n    absoluteLengths = { // relative to px\n        cm: 96/2.54,\n        mm: 9600/2.54,\n        in: 96,\n        pt: 4/3,\n        pc: 16\n    };\n\n/**\n * Round numeric values to the fixed precision,\n * remove default 'px' units.\n *\n * @param {Object} item current iteration item\n * @param {Object} params plugin params\n * @return {Boolean} if false, item will be filtered out\n *\n * @author Kir Belevich\n */\nexports.fn = function(item, params) {\n\n    if (item.isElem()) {\n\n        var match;\n\n        item.eachAttr(function(attr) {\n            match = attr.value.match(regNumericValues);\n\n            // if attribute value matches regNumericValues\n            if (match) {\n                // round it to the fixed precision\n                var num = +(+match[1]).toFixed(params.floatPrecision),\n                    units = match[3] || '';\n\n                // convert absolute values to pixels\n                if (params.convertToPx && units && (units in absoluteLengths)) {\n                    var pxNum = +(absoluteLengths[units] * match[1]).toFixed(params.floatPrecision);\n\n                    if (String(pxNum).length < match[0].length)\n                        num = pxNum,\n                        units = 'px';\n                }\n\n                // and remove leading zero\n                if (params.leadingZero) {\n                    num = removeLeadingZero(num);\n                }\n\n                // remove default 'px' units\n                if (params.defaultPx && units === 'px') {\n                    units = '';\n                }\n\n                attr.value = num + units;\n            }\n        });\n\n    }\n\n};\n"],"mappings":"AAAA,YAAY;;AAEZA,OAAO,CAACC,IAAI,GAAG,SAAS;AAExBD,OAAO,CAACE,MAAM,GAAG,IAAI;AAErBF,OAAO,CAACG,WAAW,GAAG,0EAA0E;AAEhGH,OAAO,CAACI,MAAM,GAAG;EACbC,cAAc,EAAE,CAAC;EACjBC,WAAW,EAAE,IAAI;EACjBC,SAAS,EAAE,IAAI;EACfC,WAAW,EAAE;AACjB,CAAC;AAED,IAAIC,gBAAgB,GAAG,sEAAsE;EACzFC,iBAAiB,GAAGC,OAAO,CAAC,mBAAmB,CAAC,CAACD,iBAAiB;EAClEE,eAAe,GAAG;IAAE;IAChBC,EAAE,EAAE,EAAE,GAAC,IAAI;IACXC,EAAE,EAAE,IAAI,GAAC,IAAI;IACbC,EAAE,EAAE,EAAE;IACNC,EAAE,EAAE,CAAC,GAAC,CAAC;IACPC,EAAE,EAAE;EACR,CAAC;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAjB,OAAO,CAACkB,EAAE,GAAG,UAASC,IAAI,EAAEf,MAAM,EAAE;EAEhC,IAAIe,IAAI,CAACC,MAAM,CAAC,CAAC,EAAE;IAEf,IAAIC,KAAK;IAETF,IAAI,CAACG,QAAQ,CAAC,UAASC,IAAI,EAAE;MACzBF,KAAK,GAAGE,IAAI,CAACC,KAAK,CAACH,KAAK,CAACZ,gBAAgB,CAAC;;MAE1C;MACA,IAAIY,KAAK,EAAE;QACP;QACA,IAAII,GAAG,GAAG,CAAC,CAAC,CAACJ,KAAK,CAAC,CAAC,CAAC,EAAEK,OAAO,CAACtB,MAAM,CAACC,cAAc,CAAC;UACjDsB,KAAK,GAAGN,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE;;QAE1B;QACA,IAAIjB,MAAM,CAACI,WAAW,IAAImB,KAAK,IAAKA,KAAK,IAAIf,eAAgB,EAAE;UAC3D,IAAIgB,KAAK,GAAG,CAAC,CAAChB,eAAe,CAACe,KAAK,CAAC,GAAGN,KAAK,CAAC,CAAC,CAAC,EAAEK,OAAO,CAACtB,MAAM,CAACC,cAAc,CAAC;UAE/E,IAAIwB,MAAM,CAACD,KAAK,CAAC,CAACE,MAAM,GAAGT,KAAK,CAAC,CAAC,CAAC,CAACS,MAAM,EACtCL,GAAG,GAAGG,KAAK,EACXD,KAAK,GAAG,IAAI;QACpB;;QAEA;QACA,IAAIvB,MAAM,CAACE,WAAW,EAAE;UACpBmB,GAAG,GAAGf,iBAAiB,CAACe,GAAG,CAAC;QAChC;;QAEA;QACA,IAAIrB,MAAM,CAACG,SAAS,IAAIoB,KAAK,KAAK,IAAI,EAAE;UACpCA,KAAK,GAAG,EAAE;QACd;QAEAJ,IAAI,CAACC,KAAK,GAAGC,GAAG,GAAGE,KAAK;MAC5B;IACJ,CAAC,CAAC;EAEN;AAEJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}