{"ast":null,"code":"'use strict';\n\nvar esprima;\n\n// Browserified version does not have esprima\n//\n// 1. For node.js just require module as deps\n// 2. For browser try to require mudule via external AMD system.\n//    If not found - try to fallback to window.esprima. If not\n//    found too - then fail to parse.\n//\ntry {\n  esprima = require('esprima');\n} catch (_) {\n  /*global window */\n  if (typeof window !== 'undefined') {\n    esprima = window.esprima;\n  }\n}\nvar Type = require('../../type');\nfunction resolveJavascriptFunction(data) {\n  if (null === data) {\n    return false;\n  }\n  try {\n    var source = '(' + data + ')',\n      ast = esprima.parse(source, {\n        range: true\n      }),\n      params = [],\n      body;\n    if ('Program' !== ast.type || 1 !== ast.body.length || 'ExpressionStatement' !== ast.body[0].type || 'FunctionExpression' !== ast.body[0].expression.type) {\n      return false;\n    }\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\nfunction constructJavascriptFunction(data) {\n  /*jslint evil:true*/\n\n  var source = '(' + data + ')',\n    ast = esprima.parse(source, {\n      range: true\n    }),\n    params = [],\n    body;\n  if ('Program' !== ast.type || 1 !== ast.body.length || 'ExpressionStatement' !== ast.body[0].type || 'FunctionExpression' !== ast.body[0].expression.type) {\n    throw new Error('Failed to resolve function');\n  }\n  ast.body[0].expression.params.forEach(function (param) {\n    params.push(param.name);\n  });\n  body = ast.body[0].expression.body.range;\n\n  // Esprima's ranges include the first '{' and the last '}' characters on\n  // function expressions. So cut them out.\n  /*eslint-disable no-new-func*/\n  return new Function(params, source.slice(body[0] + 1, body[1] - 1));\n}\nfunction representJavascriptFunction(object /*, style*/) {\n  return object.toString();\n}\nfunction isFunction(object) {\n  return '[object Function]' === Object.prototype.toString.call(object);\n}\nmodule.exports = new Type('tag:yaml.org,2002:js/function', {\n  kind: 'scalar',\n  resolve: resolveJavascriptFunction,\n  construct: constructJavascriptFunction,\n  predicate: isFunction,\n  represent: representJavascriptFunction\n});","map":{"version":3,"names":["esprima","require","_","window","Type","resolveJavascriptFunction","data","source","ast","parse","range","params","body","type","length","expression","err","constructJavascriptFunction","Error","forEach","param","push","name","Function","slice","representJavascriptFunction","object","toString","isFunction","Object","prototype","call","module","exports","kind","resolve","construct","predicate","represent"],"sources":["C:/Users/SashinTulsiram/Documents/Software/react-frontend-bulma/node_modules/svgo/node_modules/js-yaml/lib/js-yaml/type/js/function.js"],"sourcesContent":["'use strict';\n\nvar esprima;\n\n// Browserified version does not have esprima\n//\n// 1. For node.js just require module as deps\n// 2. For browser try to require mudule via external AMD system.\n//    If not found - try to fallback to window.esprima. If not\n//    found too - then fail to parse.\n//\ntry {\n  esprima = require('esprima');\n} catch (_) {\n  /*global window */\n  if (typeof window !== 'undefined') { esprima = window.esprima; }\n}\n\nvar Type = require('../../type');\n\nfunction resolveJavascriptFunction(data) {\n  if (null === data) {\n    return false;\n  }\n\n  try {\n    var source = '(' + data + ')',\n        ast    = esprima.parse(source, { range: true }),\n        params = [],\n        body;\n\n    if ('Program'             !== ast.type         ||\n        1                     !== ast.body.length  ||\n        'ExpressionStatement' !== ast.body[0].type ||\n        'FunctionExpression'  !== ast.body[0].expression.type) {\n      return false;\n    }\n\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\n\nfunction constructJavascriptFunction(data) {\n  /*jslint evil:true*/\n\n  var source = '(' + data + ')',\n      ast    = esprima.parse(source, { range: true }),\n      params = [],\n      body;\n\n  if ('Program'             !== ast.type         ||\n      1                     !== ast.body.length  ||\n      'ExpressionStatement' !== ast.body[0].type ||\n      'FunctionExpression'  !== ast.body[0].expression.type) {\n    throw new Error('Failed to resolve function');\n  }\n\n  ast.body[0].expression.params.forEach(function (param) {\n    params.push(param.name);\n  });\n\n  body = ast.body[0].expression.body.range;\n\n  // Esprima's ranges include the first '{' and the last '}' characters on\n  // function expressions. So cut them out.\n  /*eslint-disable no-new-func*/\n  return new Function(params, source.slice(body[0] + 1, body[1] - 1));\n}\n\nfunction representJavascriptFunction(object /*, style*/) {\n  return object.toString();\n}\n\nfunction isFunction(object) {\n  return '[object Function]' === Object.prototype.toString.call(object);\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:js/function', {\n  kind: 'scalar',\n  resolve: resolveJavascriptFunction,\n  construct: constructJavascriptFunction,\n  predicate: isFunction,\n  represent: representJavascriptFunction\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}