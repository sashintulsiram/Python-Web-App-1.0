{"ast":null,"code":"// Generated by CoffeeScript 2.4.1\n(function () {\n  var NodeType, XMLCharacterData, XMLText;\n  NodeType = require('./NodeType');\n  XMLCharacterData = require('./XMLCharacterData');\n\n  // Represents a text node\n  module.exports = XMLText = function () {\n    class XMLText extends XMLCharacterData {\n      // Initializes a new instance of `XMLText`\n\n      // `text` element text\n      constructor(parent, text) {\n        super(parent);\n        if (text == null) {\n          throw new Error(\"Missing element text. \" + this.debugInfo());\n        }\n        this.name = \"#text\";\n        this.type = NodeType.Text;\n        this.value = this.stringify.text(text);\n      }\n\n      // Creates and returns a deep clone of `this`\n      clone() {\n        return Object.create(this);\n      }\n\n      // Converts the XML fragment to string\n\n      // `options.pretty` pretty prints the result\n      // `options.indent` indentation for pretty print\n      // `options.offset` how many indentations to add to every line for pretty print\n      // `options.newline` newline sequence for pretty print\n      toString(options) {\n        return this.options.writer.text(this, this.options.writer.filterOptions(options));\n      }\n\n      // DOM level 1 functions to be implemented later\n      splitText(offset) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      // DOM level 3 functions to be implemented later\n      replaceWholeText(content) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    }\n    ;\n\n    // DOM level 3\n    Object.defineProperty(XMLText.prototype, 'isElementContentWhitespace', {\n      get: function () {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n    Object.defineProperty(XMLText.prototype, 'wholeText', {\n      get: function () {\n        var next, prev, str;\n        str = '';\n        prev = this.previousSibling;\n        while (prev) {\n          str = prev.data + str;\n          prev = prev.previousSibling;\n        }\n        str += this.data;\n        next = this.nextSibling;\n        while (next) {\n          str = str + next.data;\n          next = next.nextSibling;\n        }\n        return str;\n      }\n    });\n    return XMLText;\n  }.call(this);\n}).call(this);","map":{"version":3,"names":["NodeType","XMLCharacterData","XMLText","require","module","exports","constructor","parent","text","Error","debugInfo","name","type","Text","value","stringify","clone","Object","create","toString","options","writer","filterOptions","splitText","offset","replaceWholeText","content","defineProperty","prototype","get","next","prev","str","previousSibling","data","nextSibling","call"],"sources":["C:/Users/SashinTulsiram/Documents/Software/react-frontend-bulma/react-app/node_modules/xmlbuilder/lib/XMLText.js"],"sourcesContent":["// Generated by CoffeeScript 2.4.1\n(function() {\n  var NodeType, XMLCharacterData, XMLText;\n\n  NodeType = require('./NodeType');\n\n  XMLCharacterData = require('./XMLCharacterData');\n\n  // Represents a text node\n  module.exports = XMLText = (function() {\n    class XMLText extends XMLCharacterData {\n      // Initializes a new instance of `XMLText`\n\n      // `text` element text\n      constructor(parent, text) {\n        super(parent);\n        if (text == null) {\n          throw new Error(\"Missing element text. \" + this.debugInfo());\n        }\n        this.name = \"#text\";\n        this.type = NodeType.Text;\n        this.value = this.stringify.text(text);\n      }\n\n      // Creates and returns a deep clone of `this`\n      clone() {\n        return Object.create(this);\n      }\n\n      // Converts the XML fragment to string\n\n      // `options.pretty` pretty prints the result\n      // `options.indent` indentation for pretty print\n      // `options.offset` how many indentations to add to every line for pretty print\n      // `options.newline` newline sequence for pretty print\n      toString(options) {\n        return this.options.writer.text(this, this.options.writer.filterOptions(options));\n      }\n\n      // DOM level 1 functions to be implemented later\n      splitText(offset) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      // DOM level 3 functions to be implemented later\n      replaceWholeText(content) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n    };\n\n    // DOM level 3\n    Object.defineProperty(XMLText.prototype, 'isElementContentWhitespace', {\n      get: function() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n\n    Object.defineProperty(XMLText.prototype, 'wholeText', {\n      get: function() {\n        var next, prev, str;\n        str = '';\n        prev = this.previousSibling;\n        while (prev) {\n          str = prev.data + str;\n          prev = prev.previousSibling;\n        }\n        str += this.data;\n        next = this.nextSibling;\n        while (next) {\n          str = str + next.data;\n          next = next.nextSibling;\n        }\n        return str;\n      }\n    });\n\n    return XMLText;\n\n  }).call(this);\n\n}).call(this);\n"],"mappings":"AAAA;AACA,CAAC,YAAW;EACV,IAAIA,QAAQ,EAAEC,gBAAgB,EAAEC,OAAO;EAEvCF,QAAQ,GAAGG,OAAO,CAAC,YAAY,CAAC;EAEhCF,gBAAgB,GAAGE,OAAO,CAAC,oBAAoB,CAAC;;EAEhD;EACAC,MAAM,CAACC,OAAO,GAAGH,OAAO,GAAI,YAAW;IACrC,MAAMA,OAAO,SAASD,gBAAgB,CAAC;MACrC;;MAEA;MACAK,WAAWA,CAACC,MAAM,EAAEC,IAAI,EAAE;QACxB,KAAK,CAACD,MAAM,CAAC;QACb,IAAIC,IAAI,IAAI,IAAI,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,wBAAwB,GAAG,IAAI,CAACC,SAAS,CAAC,CAAC,CAAC;QAC9D;QACA,IAAI,CAACC,IAAI,GAAG,OAAO;QACnB,IAAI,CAACC,IAAI,GAAGZ,QAAQ,CAACa,IAAI;QACzB,IAAI,CAACC,KAAK,GAAG,IAAI,CAACC,SAAS,CAACP,IAAI,CAACA,IAAI,CAAC;MACxC;;MAEA;MACAQ,KAAKA,CAAA,EAAG;QACN,OAAOC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;MAC5B;;MAEA;;MAEA;MACA;MACA;MACA;MACAC,QAAQA,CAACC,OAAO,EAAE;QAChB,OAAO,IAAI,CAACA,OAAO,CAACC,MAAM,CAACb,IAAI,CAAC,IAAI,EAAE,IAAI,CAACY,OAAO,CAACC,MAAM,CAACC,aAAa,CAACF,OAAO,CAAC,CAAC;MACnF;;MAEA;MACAG,SAASA,CAACC,MAAM,EAAE;QAChB,MAAM,IAAIf,KAAK,CAAC,qCAAqC,GAAG,IAAI,CAACC,SAAS,CAAC,CAAC,CAAC;MAC3E;;MAEA;MACAe,gBAAgBA,CAACC,OAAO,EAAE;QACxB,MAAM,IAAIjB,KAAK,CAAC,qCAAqC,GAAG,IAAI,CAACC,SAAS,CAAC,CAAC,CAAC;MAC3E;IAEF;IAAC;;IAED;IACAO,MAAM,CAACU,cAAc,CAACzB,OAAO,CAAC0B,SAAS,EAAE,4BAA4B,EAAE;MACrEC,GAAG,EAAE,SAAAA,CAAA,EAAW;QACd,MAAM,IAAIpB,KAAK,CAAC,qCAAqC,GAAG,IAAI,CAACC,SAAS,CAAC,CAAC,CAAC;MAC3E;IACF,CAAC,CAAC;IAEFO,MAAM,CAACU,cAAc,CAACzB,OAAO,CAAC0B,SAAS,EAAE,WAAW,EAAE;MACpDC,GAAG,EAAE,SAAAA,CAAA,EAAW;QACd,IAAIC,IAAI,EAAEC,IAAI,EAAEC,GAAG;QACnBA,GAAG,GAAG,EAAE;QACRD,IAAI,GAAG,IAAI,CAACE,eAAe;QAC3B,OAAOF,IAAI,EAAE;UACXC,GAAG,GAAGD,IAAI,CAACG,IAAI,GAAGF,GAAG;UACrBD,IAAI,GAAGA,IAAI,CAACE,eAAe;QAC7B;QACAD,GAAG,IAAI,IAAI,CAACE,IAAI;QAChBJ,IAAI,GAAG,IAAI,CAACK,WAAW;QACvB,OAAOL,IAAI,EAAE;UACXE,GAAG,GAAGA,GAAG,GAAGF,IAAI,CAACI,IAAI;UACrBJ,IAAI,GAAGA,IAAI,CAACK,WAAW;QACzB;QACA,OAAOH,GAAG;MACZ;IACF,CAAC,CAAC;IAEF,OAAO9B,OAAO;EAEhB,CAAC,CAAEkC,IAAI,CAAC,IAAI,CAAC;AAEf,CAAC,EAAEA,IAAI,CAAC,IAAI,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}