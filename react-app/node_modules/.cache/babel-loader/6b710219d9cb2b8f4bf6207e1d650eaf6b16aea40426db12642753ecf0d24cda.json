{"ast":null,"code":"// Generated by CoffeeScript 2.4.1\n(function () {\n  var NodeType, XMLCharacterData, XMLProcessingInstruction;\n  NodeType = require('./NodeType');\n  XMLCharacterData = require('./XMLCharacterData');\n\n  // Represents a processing instruction\n  module.exports = XMLProcessingInstruction = class XMLProcessingInstruction extends XMLCharacterData {\n    // Initializes a new instance of `XMLProcessingInstruction`\n\n    // `parent` the parent node\n    // `target` instruction target\n    // `value` instruction value\n    constructor(parent, target, value) {\n      super(parent);\n      if (target == null) {\n        throw new Error(\"Missing instruction target. \" + this.debugInfo());\n      }\n      this.type = NodeType.ProcessingInstruction;\n      this.target = this.stringify.insTarget(target);\n      this.name = this.target;\n      if (value) {\n        this.value = this.stringify.insValue(value);\n      }\n    }\n\n    // Creates and returns a deep clone of `this`\n    clone() {\n      return Object.create(this);\n    }\n\n    // Converts the XML fragment to string\n\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation for pretty print\n    // `options.offset` how many indentations to add to every line for pretty print\n    // `options.newline` newline sequence for pretty print\n    toString(options) {\n      return this.options.writer.processingInstruction(this, this.options.writer.filterOptions(options));\n    }\n    isEqualNode(node) {\n      if (!super.isEqualNode(node)) {\n        return false;\n      }\n      if (node.target !== this.target) {\n        return false;\n      }\n      return true;\n    }\n  };\n}).call(this);","map":{"version":3,"names":["NodeType","XMLCharacterData","XMLProcessingInstruction","require","module","exports","constructor","parent","target","value","Error","debugInfo","type","ProcessingInstruction","stringify","insTarget","name","insValue","clone","Object","create","toString","options","writer","processingInstruction","filterOptions","isEqualNode","node","call"],"sources":["C:/Users/SashinTulsiram/Documents/Software/react-frontend-bulma/react-app/node_modules/xmlbuilder/lib/XMLProcessingInstruction.js"],"sourcesContent":["// Generated by CoffeeScript 2.4.1\n(function() {\n  var NodeType, XMLCharacterData, XMLProcessingInstruction;\n\n  NodeType = require('./NodeType');\n\n  XMLCharacterData = require('./XMLCharacterData');\n\n  // Represents a processing instruction\n  module.exports = XMLProcessingInstruction = class XMLProcessingInstruction extends XMLCharacterData {\n    // Initializes a new instance of `XMLProcessingInstruction`\n\n    // `parent` the parent node\n    // `target` instruction target\n    // `value` instruction value\n    constructor(parent, target, value) {\n      super(parent);\n      if (target == null) {\n        throw new Error(\"Missing instruction target. \" + this.debugInfo());\n      }\n      this.type = NodeType.ProcessingInstruction;\n      this.target = this.stringify.insTarget(target);\n      this.name = this.target;\n      if (value) {\n        this.value = this.stringify.insValue(value);\n      }\n    }\n\n    // Creates and returns a deep clone of `this`\n    clone() {\n      return Object.create(this);\n    }\n\n    // Converts the XML fragment to string\n\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation for pretty print\n    // `options.offset` how many indentations to add to every line for pretty print\n    // `options.newline` newline sequence for pretty print\n    toString(options) {\n      return this.options.writer.processingInstruction(this, this.options.writer.filterOptions(options));\n    }\n\n    isEqualNode(node) {\n      if (!super.isEqualNode(node)) {\n        return false;\n      }\n      if (node.target !== this.target) {\n        return false;\n      }\n      return true;\n    }\n\n  };\n\n}).call(this);\n"],"mappings":"AAAA;AACA,CAAC,YAAW;EACV,IAAIA,QAAQ,EAAEC,gBAAgB,EAAEC,wBAAwB;EAExDF,QAAQ,GAAGG,OAAO,CAAC,YAAY,CAAC;EAEhCF,gBAAgB,GAAGE,OAAO,CAAC,oBAAoB,CAAC;;EAEhD;EACAC,MAAM,CAACC,OAAO,GAAGH,wBAAwB,GAAG,MAAMA,wBAAwB,SAASD,gBAAgB,CAAC;IAClG;;IAEA;IACA;IACA;IACAK,WAAWA,CAACC,MAAM,EAAEC,MAAM,EAAEC,KAAK,EAAE;MACjC,KAAK,CAACF,MAAM,CAAC;MACb,IAAIC,MAAM,IAAI,IAAI,EAAE;QAClB,MAAM,IAAIE,KAAK,CAAC,8BAA8B,GAAG,IAAI,CAACC,SAAS,CAAC,CAAC,CAAC;MACpE;MACA,IAAI,CAACC,IAAI,GAAGZ,QAAQ,CAACa,qBAAqB;MAC1C,IAAI,CAACL,MAAM,GAAG,IAAI,CAACM,SAAS,CAACC,SAAS,CAACP,MAAM,CAAC;MAC9C,IAAI,CAACQ,IAAI,GAAG,IAAI,CAACR,MAAM;MACvB,IAAIC,KAAK,EAAE;QACT,IAAI,CAACA,KAAK,GAAG,IAAI,CAACK,SAAS,CAACG,QAAQ,CAACR,KAAK,CAAC;MAC7C;IACF;;IAEA;IACAS,KAAKA,CAAA,EAAG;MACN,OAAOC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;IAC5B;;IAEA;;IAEA;IACA;IACA;IACA;IACAC,QAAQA,CAACC,OAAO,EAAE;MAChB,OAAO,IAAI,CAACA,OAAO,CAACC,MAAM,CAACC,qBAAqB,CAAC,IAAI,EAAE,IAAI,CAACF,OAAO,CAACC,MAAM,CAACE,aAAa,CAACH,OAAO,CAAC,CAAC;IACpG;IAEAI,WAAWA,CAACC,IAAI,EAAE;MAChB,IAAI,CAAC,KAAK,CAACD,WAAW,CAACC,IAAI,CAAC,EAAE;QAC5B,OAAO,KAAK;MACd;MACA,IAAIA,IAAI,CAACnB,MAAM,KAAK,IAAI,CAACA,MAAM,EAAE;QAC/B,OAAO,KAAK;MACd;MACA,OAAO,IAAI;IACb;EAEF,CAAC;AAEH,CAAC,EAAEoB,IAAI,CAAC,IAAI,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}