{"ast":null,"code":"// Generated by CoffeeScript 2.4.1\n(function () {\n  var XMLStringWriter, XMLWriterBase;\n  XMLWriterBase = require('./XMLWriterBase');\n\n  // Prints XML nodes as plain text\n  module.exports = XMLStringWriter = class XMLStringWriter extends XMLWriterBase {\n    // Initializes a new instance of `XMLStringWriter`\n\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation string\n    // `options.newline` newline sequence\n    // `options.offset` a fixed number of indentations to add to every line\n    // `options.allowEmpty` do not self close empty element tags\n    // 'options.dontPrettyTextNodes' if any text is present in node, don't indent or LF\n    // `options.spaceBeforeSlash` add a space before the closing slash of empty elements\n    constructor(options) {\n      super(options);\n    }\n    document(doc, options) {\n      var child, i, len, r, ref;\n      options = this.filterOptions(options);\n      r = '';\n      ref = doc.children;\n      for (i = 0, len = ref.length; i < len; i++) {\n        child = ref[i];\n        r += this.writeChildNode(child, options, 0);\n      }\n      // remove trailing newline\n      if (options.pretty && r.slice(-options.newline.length) === options.newline) {\n        r = r.slice(0, -options.newline.length);\n      }\n      return r;\n    }\n  };\n}).call(this);","map":{"version":3,"names":["XMLStringWriter","XMLWriterBase","require","module","exports","constructor","options","document","doc","child","i","len","r","ref","filterOptions","children","length","writeChildNode","pretty","slice","newline","call"],"sources":["C:/Users/SashinTulsiram/Documents/Software/react-frontend-bulma/react-app/node_modules/xmlbuilder/lib/XMLStringWriter.js"],"sourcesContent":["// Generated by CoffeeScript 2.4.1\n(function() {\n  var XMLStringWriter, XMLWriterBase;\n\n  XMLWriterBase = require('./XMLWriterBase');\n\n  // Prints XML nodes as plain text\n  module.exports = XMLStringWriter = class XMLStringWriter extends XMLWriterBase {\n    // Initializes a new instance of `XMLStringWriter`\n\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation string\n    // `options.newline` newline sequence\n    // `options.offset` a fixed number of indentations to add to every line\n    // `options.allowEmpty` do not self close empty element tags\n    // 'options.dontPrettyTextNodes' if any text is present in node, don't indent or LF\n    // `options.spaceBeforeSlash` add a space before the closing slash of empty elements\n    constructor(options) {\n      super(options);\n    }\n\n    document(doc, options) {\n      var child, i, len, r, ref;\n      options = this.filterOptions(options);\n      r = '';\n      ref = doc.children;\n      for (i = 0, len = ref.length; i < len; i++) {\n        child = ref[i];\n        r += this.writeChildNode(child, options, 0);\n      }\n      // remove trailing newline\n      if (options.pretty && r.slice(-options.newline.length) === options.newline) {\n        r = r.slice(0, -options.newline.length);\n      }\n      return r;\n    }\n\n  };\n\n}).call(this);\n"],"mappings":"AAAA;AACA,CAAC,YAAW;EACV,IAAIA,eAAe,EAAEC,aAAa;EAElCA,aAAa,GAAGC,OAAO,CAAC,iBAAiB,CAAC;;EAE1C;EACAC,MAAM,CAACC,OAAO,GAAGJ,eAAe,GAAG,MAAMA,eAAe,SAASC,aAAa,CAAC;IAC7E;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACAI,WAAWA,CAACC,OAAO,EAAE;MACnB,KAAK,CAACA,OAAO,CAAC;IAChB;IAEAC,QAAQA,CAACC,GAAG,EAAEF,OAAO,EAAE;MACrB,IAAIG,KAAK,EAAEC,CAAC,EAAEC,GAAG,EAAEC,CAAC,EAAEC,GAAG;MACzBP,OAAO,GAAG,IAAI,CAACQ,aAAa,CAACR,OAAO,CAAC;MACrCM,CAAC,GAAG,EAAE;MACNC,GAAG,GAAGL,GAAG,CAACO,QAAQ;MAClB,KAAKL,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGE,GAAG,CAACG,MAAM,EAAEN,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;QAC1CD,KAAK,GAAGI,GAAG,CAACH,CAAC,CAAC;QACdE,CAAC,IAAI,IAAI,CAACK,cAAc,CAACR,KAAK,EAAEH,OAAO,EAAE,CAAC,CAAC;MAC7C;MACA;MACA,IAAIA,OAAO,CAACY,MAAM,IAAIN,CAAC,CAACO,KAAK,CAAC,CAACb,OAAO,CAACc,OAAO,CAACJ,MAAM,CAAC,KAAKV,OAAO,CAACc,OAAO,EAAE;QAC1ER,CAAC,GAAGA,CAAC,CAACO,KAAK,CAAC,CAAC,EAAE,CAACb,OAAO,CAACc,OAAO,CAACJ,MAAM,CAAC;MACzC;MACA,OAAOJ,CAAC;IACV;EAEF,CAAC;AAEH,CAAC,EAAES,IAAI,CAAC,IAAI,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}