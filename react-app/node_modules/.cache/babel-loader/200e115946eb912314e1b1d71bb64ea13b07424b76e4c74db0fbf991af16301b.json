{"ast":null,"code":"'use strict';\n\nexports.type = 'perItem';\nexports.active = true;\nexports.description = 'converts basic shapes to more compact path form';\nvar none = {\n    value: 0\n  },\n  regNumber = /[-+]?(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][-+]?\\d+)?/g;\n\n/**\n * Converts basic shape to more compact path.\n * It also allows further optimizations like\n * combining paths with similar attributes.\n *\n * @see http://www.w3.org/TR/SVG/shapes.html\n *\n * @param {Object} item current iteration item\n * @param {Object} params plugin params\n * @return {Boolean} if false, item will be filtered out\n *\n * @author Lev Solntsev\n */\nexports.fn = function (item) {\n  if (item.isElem('rect') && item.hasAttr('width') && item.hasAttr('height') && !item.hasAttr('rx') && !item.hasAttr('ry')) {\n    var x = +(item.attr('x') || none).value,\n      y = +(item.attr('y') || none).value,\n      width = +item.attr('width').value,\n      height = +item.attr('height').value;\n\n    // Values like '100%' compute to NaN, thus running after\n    // cleanupNumericValues when 'px' units has already been removed.\n    // TODO: Calculate sizes from % and non-px units if possible.\n    if (isNaN(x - y + width - height)) return;\n    var pathData = 'M' + x + ' ' + y + 'H' + (x + width) + 'V' + (y + height) + 'H' + x + 'z';\n    item.addAttr({\n      name: 'd',\n      value: pathData,\n      prefix: '',\n      local: 'd'\n    });\n    item.renameElem('path').removeAttr(['x', 'y', 'width', 'height']);\n  } else if (item.isElem('line')) {\n    var x1 = +(item.attr('x1') || none).value,\n      y1 = +(item.attr('y1') || none).value,\n      x2 = +(item.attr('x2') || none).value,\n      y2 = +(item.attr('y2') || none).value;\n    if (isNaN(x1 - y1 + x2 - y2)) return;\n    item.addAttr({\n      name: 'd',\n      value: 'M' + x1 + ' ' + y1 + 'L' + x2 + ' ' + y2,\n      prefix: '',\n      local: 'd'\n    });\n    item.renameElem('path').removeAttr(['x1', 'y1', 'x2', 'y2']);\n  } else if ((item.isElem('polyline') || item.isElem('polygon')) && item.hasAttr('points')) {\n    var coords = (item.attr('points').value.match(regNumber) || []).map(Number);\n    if (coords.length < 4) return false;\n    var closePath = item.isElem('polygon') && (item.computedAttr('id') || (item.computedAttr('stroke') || 'none') != 'none');\n    item.addAttr({\n      name: 'd',\n      value: 'M' + coords.slice(0, 2).join(' ') + 'L' + coords.slice(2).join(' ') + (closePath ? 'z' : ''),\n      prefix: '',\n      local: 'd'\n    });\n    item.renameElem('path').removeAttr('points');\n  }\n};","map":{"version":3,"names":["exports","type","active","description","none","value","regNumber","fn","item","isElem","hasAttr","x","attr","y","width","height","isNaN","pathData","addAttr","name","prefix","local","renameElem","removeAttr","x1","y1","x2","y2","coords","match","map","Number","length","closePath","computedAttr","slice","join"],"sources":["C:/Users/SashinTulsiram/Documents/Software/react-frontend-bulma/node_modules/svgo/plugins/convertShapeToPath.js"],"sourcesContent":["'use strict';\n\nexports.type = 'perItem';\n\nexports.active = true;\n\nexports.description = 'converts basic shapes to more compact path form';\n\nvar none = { value: 0 },\n    regNumber = /[-+]?(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][-+]?\\d+)?/g;\n\n/**\n * Converts basic shape to more compact path.\n * It also allows further optimizations like\n * combining paths with similar attributes.\n *\n * @see http://www.w3.org/TR/SVG/shapes.html\n *\n * @param {Object} item current iteration item\n * @param {Object} params plugin params\n * @return {Boolean} if false, item will be filtered out\n *\n * @author Lev Solntsev\n */\nexports.fn = function(item) {\n\n    if (\n        item.isElem('rect') &&\n        item.hasAttr('width') &&\n        item.hasAttr('height') &&\n        !item.hasAttr('rx') &&\n        !item.hasAttr('ry')\n    ) {\n\n        var x = +(item.attr('x') || none).value,\n            y = +(item.attr('y') || none).value,\n            width  = +item.attr('width').value,\n            height = +item.attr('height').value;\n\n            // Values like '100%' compute to NaN, thus running after\n            // cleanupNumericValues when 'px' units has already been removed.\n            // TODO: Calculate sizes from % and non-px units if possible.\n        if (isNaN(x - y + width - height)) return;\n\n        var pathData =\n            'M' + x + ' ' + y +\n            'H' + (x + width) +\n            'V' + (y + height) +\n            'H' + x +\n            'z';\n\n        item.addAttr({\n                name: 'd',\n                value: pathData,\n                prefix: '',\n                local: 'd'\n            });\n\n        item.renameElem('path')\n            .removeAttr(['x', 'y', 'width', 'height']);\n\n    } else if (item.isElem('line')) {\n\n        var x1 = +(item.attr('x1') || none).value,\n            y1 = +(item.attr('y1') || none).value,\n            x2 = +(item.attr('x2') || none).value,\n            y2 = +(item.attr('y2') || none).value;\n        if (isNaN(x1 - y1 + x2 - y2)) return;\n\n        item.addAttr({\n                name: 'd',\n                value: 'M' + x1 + ' ' + y1 + 'L' + x2 + ' ' + y2,\n                prefix: '',\n                local: 'd'\n            });\n\n        item.renameElem('path')\n            .removeAttr(['x1', 'y1', 'x2', 'y2']);\n\n    } else if ((\n            item.isElem('polyline') ||\n            item.isElem('polygon')\n        ) &&\n        item.hasAttr('points')\n    ) {\n\n        var coords = (item.attr('points').value.match(regNumber) || []).map(Number);\n        if (coords.length < 4) return false;\n\n        var closePath = item.isElem('polygon') &&\n                (item.computedAttr('id') || (item.computedAttr('stroke') || 'none') != 'none');\n\n        item.addAttr({\n                name: 'd',\n                value: 'M' + coords.slice(0,2).join(' ') +\n                       'L' + coords.slice(2).join(' ') +\n                       (closePath ? 'z' : ''),\n                prefix: '',\n                local: 'd'\n            });\n\n        item.renameElem('path')\n            .removeAttr('points');\n    }\n\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}