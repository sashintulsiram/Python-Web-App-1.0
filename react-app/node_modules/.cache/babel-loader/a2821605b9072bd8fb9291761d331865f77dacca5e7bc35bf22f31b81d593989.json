{"ast":null,"code":"import 'babel-polyfill';\nimport path from 'path';\nimport SVGO from 'svgo';\nimport Promise from 'bluebird';\nimport svg2js from 'svgo/lib/svgo/svg2js';\nimport js2svg from './js2svg';\nconst svgo = new SVGO();\nconst fs = Promise.promisifyAll(require('fs'));\nconst glob = Promise.promisify(require('glob'));\nexport default (async (input, output, template, component) => {\n  const camelCaps = str => str.split('-').map(s => s.substring(0, 1).toUpperCase() + s.substring(1, s.length)).join('');\n  try {\n    const matches = await glob(input);\n    const files = await Promise.all(matches.map(async match => ({\n      name: camelCaps(path.basename(match)),\n      content: await fs.readFileAsync(match, 'utf-8')\n    })));\n    const svg = await Promise.all(files.map(({\n      name,\n      content\n    }) => new Promise((resolve, reject) => {\n      svgo.optimize(content, result => resolve({\n        name,\n        content: result.data\n      }));\n    })));\n    const jsx = await Promise.all(svg.map(({\n      name,\n      content\n    }) => new Promise((resolve, reject) => {\n      svg2js(content, result => resolve({\n        name,\n        content: addStyleJSXAttribute(result, component)\n      }));\n    })));\n    const jsSVG = jsx.map(({\n      name,\n      content\n    }) => ({\n      name,\n      content: js2svg(content).data\n    }));\n    const programs = jsSVG.map(({\n      name,\n      content\n    }) => ({\n      name,\n      content: template(name.split('.')[0], content)\n    }));\n    for (const {\n      name,\n      content\n    } of programs) {\n      const fileName = name.split('.')[0] + '.js';\n      await fs.writeFileAsync(path.resolve(output, fileName), content);\n    }\n  } catch (e) {\n    console.error(e);\n  }\n});\nfunction addStyleJSXAttribute(svg, component) {\n  const styledSVG = {\n    ...svg\n  };\n  const propValue = component ? 'this.props' : 'props';\n  styledSVG.content[0].attrs = {\n    ...svg.content[0].attrs,\n    style: {\n      name: propValue,\n      value: '',\n      prefix: '',\n      local: '',\n      type: 'JSX'\n    }\n  };\n  delete styledSVG.content[0].content[1].attrs.fill;\n  return styledSVG;\n}","map":{"version":3,"names":["path","SVGO","Promise","svg2js","js2svg","svgo","fs","promisifyAll","require","glob","promisify","input","output","template","component","camelCaps","str","split","map","s","substring","toUpperCase","length","join","matches","files","all","match","name","basename","content","readFileAsync","svg","resolve","reject","optimize","result","data","jsx","addStyleJSXAttribute","jsSVG","programs","fileName","writeFileAsync","e","console","error","styledSVG","propValue","attrs","style","value","prefix","local","type","fill"],"sources":["C:/Users/SashinTulsiram/Documents/Software/react-frontend-bulma/node_modules/react-svg-converter/src/index.js"],"sourcesContent":["import 'babel-polyfill';\n\nimport path from 'path';\nimport SVGO from 'svgo';\nimport Promise from 'bluebird';\nimport svg2js from 'svgo/lib/svgo/svg2js';\nimport js2svg from './js2svg';\n\nconst svgo = new SVGO();\nconst fs = Promise.promisifyAll(require('fs'));\nconst glob = Promise.promisify(require('glob'));\n\nexport default async (input, output, template, component) => {\n  const camelCaps = (str) => str.split('-')\n    .map((s) => s.substring(0, 1).toUpperCase() + s.substring(1, s.length))\n    .join('');\n\n  try {\n    const matches = await glob(input);\n    const files = await Promise.all(matches.map(async (match) => ({\n      name: camelCaps(path.basename(match)),\n      content: await fs.readFileAsync(match, 'utf-8')\n    })));\n\n    const svg = await Promise.all(files.map(\n      ({ name, content }) => new Promise((resolve, reject) => {\n        svgo.optimize(content,\n          (result) => resolve({ name, content: result.data }));\n    })));\n\n    const jsx = await Promise.all(\n      svg.map(({ name, content }) => new Promise((resolve, reject) => {\n        svg2js(content, (result) => resolve({\n          name,\n          content: addStyleJSXAttribute(result, component)\n        }));\n      })));\n\n    const jsSVG = jsx.map(\n      ({ name, content }) => ({ name, content: js2svg(content).data }));\n\n    const programs = jsSVG.map(({ name, content }) => ({\n      name,\n      content: template(name.split('.')[0], content)\n    }));\n\n    for (const { name, content } of programs) {\n      const fileName = name.split('.')[0] + '.js';\n\n      await fs.writeFileAsync(path.resolve(output, fileName), content);\n    }\n  } catch (e) {\n    console.error(e);\n  }\n}\n\nfunction addStyleJSXAttribute(svg, component) {\n  const styledSVG = { ...svg };\n  const propValue = component ? 'this.props' : 'props';\n\n  styledSVG.content[0].attrs = { ...svg.content[0].attrs,\n    style: {\n      name: propValue,\n      value: '',\n      prefix: '',\n      local: '',\n      type: 'JSX'\n    }\n  };\n\n  delete styledSVG.content[0].content[1].attrs.fill\n\n  return styledSVG;\n}\n"],"mappings":"AAAA,OAAO,gBAAgB;AAEvB,OAAOA,IAAI,MAAM,MAAM;AACvB,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,OAAO,MAAM,UAAU;AAC9B,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,MAAM,MAAM,UAAU;AAE7B,MAAMC,IAAI,GAAG,IAAIJ,IAAI,CAAC,CAAC;AACvB,MAAMK,EAAE,GAAGJ,OAAO,CAACK,YAAY,CAACC,OAAO,CAAC,IAAI,CAAC,CAAC;AAC9C,MAAMC,IAAI,GAAGP,OAAO,CAACQ,SAAS,CAACF,OAAO,CAAC,MAAM,CAAC,CAAC;AAE/C,gBAAe,OAAOG,KAAK,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,SAAS,KAAK;EAC3D,MAAMC,SAAS,GAAIC,GAAG,IAAKA,GAAG,CAACC,KAAK,CAAC,GAAG,CAAC,CACtCC,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGF,CAAC,CAACC,SAAS,CAAC,CAAC,EAAED,CAAC,CAACG,MAAM,CAAC,CAAC,CACtEC,IAAI,CAAC,EAAE,CAAC;EAEX,IAAI;IACF,MAAMC,OAAO,GAAG,MAAMf,IAAI,CAACE,KAAK,CAAC;IACjC,MAAMc,KAAK,GAAG,MAAMvB,OAAO,CAACwB,GAAG,CAACF,OAAO,CAACN,GAAG,CAAC,MAAOS,KAAK,KAAM;MAC5DC,IAAI,EAAEb,SAAS,CAACf,IAAI,CAAC6B,QAAQ,CAACF,KAAK,CAAC,CAAC;MACrCG,OAAO,EAAE,MAAMxB,EAAE,CAACyB,aAAa,CAACJ,KAAK,EAAE,OAAO;IAChD,CAAC,CAAC,CAAC,CAAC;IAEJ,MAAMK,GAAG,GAAG,MAAM9B,OAAO,CAACwB,GAAG,CAACD,KAAK,CAACP,GAAG,CACrC,CAAC;MAAEU,IAAI;MAAEE;IAAQ,CAAC,KAAK,IAAI5B,OAAO,CAAC,CAAC+B,OAAO,EAAEC,MAAM,KAAK;MACtD7B,IAAI,CAAC8B,QAAQ,CAACL,OAAO,EAClBM,MAAM,IAAKH,OAAO,CAAC;QAAEL,IAAI;QAAEE,OAAO,EAAEM,MAAM,CAACC;MAAK,CAAC,CAAC,CAAC;IAC1D,CAAC,CAAC,CAAC,CAAC;IAEJ,MAAMC,GAAG,GAAG,MAAMpC,OAAO,CAACwB,GAAG,CAC3BM,GAAG,CAACd,GAAG,CAAC,CAAC;MAAEU,IAAI;MAAEE;IAAQ,CAAC,KAAK,IAAI5B,OAAO,CAAC,CAAC+B,OAAO,EAAEC,MAAM,KAAK;MAC9D/B,MAAM,CAAC2B,OAAO,EAAGM,MAAM,IAAKH,OAAO,CAAC;QAClCL,IAAI;QACJE,OAAO,EAAES,oBAAoB,CAACH,MAAM,EAAEtB,SAAS;MACjD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC,CAAC;IAEN,MAAM0B,KAAK,GAAGF,GAAG,CAACpB,GAAG,CACnB,CAAC;MAAEU,IAAI;MAAEE;IAAQ,CAAC,MAAM;MAAEF,IAAI;MAAEE,OAAO,EAAE1B,MAAM,CAAC0B,OAAO,CAAC,CAACO;IAAK,CAAC,CAAC,CAAC;IAEnE,MAAMI,QAAQ,GAAGD,KAAK,CAACtB,GAAG,CAAC,CAAC;MAAEU,IAAI;MAAEE;IAAQ,CAAC,MAAM;MACjDF,IAAI;MACJE,OAAO,EAAEjB,QAAQ,CAACe,IAAI,CAACX,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAEa,OAAO;IAC/C,CAAC,CAAC,CAAC;IAEH,KAAK,MAAM;MAAEF,IAAI;MAAEE;IAAQ,CAAC,IAAIW,QAAQ,EAAE;MACxC,MAAMC,QAAQ,GAAGd,IAAI,CAACX,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK;MAE3C,MAAMX,EAAE,CAACqC,cAAc,CAAC3C,IAAI,CAACiC,OAAO,CAACrB,MAAM,EAAE8B,QAAQ,CAAC,EAAEZ,OAAO,CAAC;IAClE;EACF,CAAC,CAAC,OAAOc,CAAC,EAAE;IACVC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;EAClB;AACF,CAAC;AAED,SAASL,oBAAoBA,CAACP,GAAG,EAAElB,SAAS,EAAE;EAC5C,MAAMiC,SAAS,GAAG;IAAE,GAAGf;EAAI,CAAC;EAC5B,MAAMgB,SAAS,GAAGlC,SAAS,GAAG,YAAY,GAAG,OAAO;EAEpDiC,SAAS,CAACjB,OAAO,CAAC,CAAC,CAAC,CAACmB,KAAK,GAAG;IAAE,GAAGjB,GAAG,CAACF,OAAO,CAAC,CAAC,CAAC,CAACmB,KAAK;IACpDC,KAAK,EAAE;MACLtB,IAAI,EAAEoB,SAAS;MACfG,KAAK,EAAE,EAAE;MACTC,MAAM,EAAE,EAAE;MACVC,KAAK,EAAE,EAAE;MACTC,IAAI,EAAE;IACR;EACF,CAAC;EAED,OAAOP,SAAS,CAACjB,OAAO,CAAC,CAAC,CAAC,CAACA,OAAO,CAAC,CAAC,CAAC,CAACmB,KAAK,CAACM,IAAI;EAEjD,OAAOR,SAAS;AAClB"},"metadata":{},"sourceType":"module","externalDependencies":[]}