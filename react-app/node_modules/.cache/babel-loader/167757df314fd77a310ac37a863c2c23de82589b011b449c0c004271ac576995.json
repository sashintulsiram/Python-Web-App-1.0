{"ast":null,"code":"'use strict';\n\nexports.type = 'perItem';\nexports.active = true;\nexports.description = 'collapses multiple transformations and optimizes it';\nexports.params = {\n  convertToShorts: true,\n  // degPrecision: 3, // transformPrecision (or matrix precision) - 2 by default\n  floatPrecision: 3,\n  transformPrecision: 5,\n  matrixToTransform: true,\n  shortTranslate: true,\n  shortScale: true,\n  shortRotate: true,\n  removeUseless: true,\n  collapseIntoOne: true,\n  leadingZero: true,\n  negativeExtraSpace: false\n};\nvar cleanupOutData = require('../lib/svgo/tools').cleanupOutData,\n  transform2js = require('./_transforms.js').transform2js,\n  transformsMultiply = require('./_transforms.js').transformsMultiply,\n  matrixToTransform = require('./_transforms.js').matrixToTransform,\n  degRound,\n  floatRound,\n  transformRound;\n\n/**\n * Convert matrices to the short aliases,\n * convert long translate, scale or rotate transform notations to the shorts ones,\n * convert transforms to the matrices and multiply them all into one,\n * remove useless transforms.\n *\n * @see http://www.w3.org/TR/SVG/coords.html#TransformMatrixDefined\n *\n * @param {Object} item current iteration item\n * @param {Object} params plugin params\n * @return {Boolean} if false, item will be filtered out\n *\n * @author Kir Belevich\n */\nexports.fn = function (item, params) {\n  if (item.elem) {\n    // transform\n    if (item.hasAttr('transform')) {\n      convertTransform(item, 'transform', params);\n    }\n\n    // gradientTransform\n    if (item.hasAttr('gradientTransform')) {\n      convertTransform(item, 'gradientTransform', params);\n    }\n\n    // patternTransform\n    if (item.hasAttr('patternTransform')) {\n      convertTransform(item, 'patternTransform', params);\n    }\n  }\n};\n\n/**\n * Main function.\n *\n * @param {Object} item input item\n * @param {String} attrName attribute name\n * @param {Object} params plugin params\n */\nfunction convertTransform(item, attrName, params) {\n  var data = transform2js(item.attr(attrName).value);\n  definePrecision(data, params);\n  if (params.collapseIntoOne && data.length > 1) {\n    data = [transformsMultiply(data)];\n  }\n  if (params.convertToShorts) {\n    data = convertToShorts(data, params);\n  } else {\n    data.forEach(function (transform) {\n      transform = roundTransform(transform, params);\n    });\n  }\n  if (params.removeUseless) {\n    data = removeUseless(data);\n  }\n  if (data.length) {\n    item.attr(attrName).value = js2transform(data, params);\n  } else {\n    item.removeAttr(attrName);\n  }\n}\n\n/**\n * Defines precision to work with certain parts.\n * transformPrecision - for scale and four first matrix parameters (needs a better precision due to multiplying),\n * floatPrecision - for translate including two last matrix and rotate parameters,\n * degPrecision - for rotate and skew. By default it's equal to (rougly)\n * transformPrecision - 2 or floatPrecision whichever is lower. Can be set in params.\n *\n * @param {Array} transforms input array\n * @param {Object} params plugin params\n * @return {Array} output array\n */\nfunction definePrecision(data, params) {\n  /* jshint validthis: true */\n  var matrixData = data.reduce(getMatrixData, []),\n    significantDigits = params.transformPrecision;\n\n  // Limit transform precision with matrix one. Calculating with larger precision doesn't add any value.\n  if (matrixData.length) {\n    params.transformPrecision = Math.min(params.transformPrecision, Math.max.apply(Math, matrixData.map(floatDigits)) || params.transformPrecision);\n    significantDigits = Math.max.apply(Math, matrixData.map(function (n) {\n      return String(n).replace(/\\D+/g, '').length; // Number of digits in a number. 123.45 → 5\n    }));\n  }\n  // No sense in angle precision more then number of significant digits in matrix.\n  if (!('degPrecision' in params)) {\n    params.degPrecision = Math.max(0, Math.min(params.floatPrecision, significantDigits - 2));\n  }\n  degRound = params.degPrecision >= 1 ? smartRound.bind(this, params.degPrecision) : round;\n  floatRound = params.floatPrecision >= 1 ? smartRound.bind(this, params.floatPrecision) : round;\n  transformRound = params.transformPrecision >= 1 ? smartRound.bind(this, params.transformPrecision) : round;\n}\n\n/**\n * Gathers four first matrix parameters.\n *\n * @param {Array} a array of data\n * @param {Object} transform\n * @return {Array} output array\n */\nfunction getMatrixData(a, b) {\n  return b.name == 'matrix' ? a.concat(b.data.slice(0, 4)) : a;\n}\n\n/**\n * Returns number of digits after the point. 0.125 → 3\n */\nfunction floatDigits(n) {\n  return (n = String(n)).slice(n.indexOf('.')).length - 1;\n}\n\n/**\n * Convert transforms to the shorthand alternatives.\n *\n * @param {Array} transforms input array\n * @param {Object} params plugin params\n * @return {Array} output array\n */\nfunction convertToShorts(transforms, params) {\n  for (var i = 0; i < transforms.length; i++) {\n    var transform = transforms[i];\n\n    // convert matrix to the short aliases\n    if (params.matrixToTransform && transform.name === 'matrix') {\n      var decomposed = matrixToTransform(transform, params);\n      if (decomposed != transform && js2transform(decomposed, params).length <= js2transform([transform], params).length) {\n        transforms.splice.apply(transforms, [i, 1].concat(decomposed));\n      }\n      transform = transforms[i];\n    }\n    transform = roundTransform(transform, params);\n\n    // fixed-point numbers\n    // 12.754997 → 12.755\n    if (params.transformPrecision !== false) {\n      transform.data = transform.data.map(function (num) {\n        return +num.toFixed(params.transformPrecision);\n      });\n    }\n\n    // convert long translate transform notation to the shorts one\n    // translate(10 0) → translate(10)\n    if (params.shortTranslate && transform.name === 'translate' && transform.data.length === 2 && !transform.data[1]) {\n      transform.data.pop();\n    }\n\n    // convert long scale transform notation to the shorts one\n    // scale(2 2) → scale(2)\n    if (params.shortScale && transform.name === 'scale' && transform.data.length === 2 && transform.data[0] === transform.data[1]) {\n      transform.data.pop();\n    }\n\n    // convert long rotate transform notation to the short one\n    // translate(cx cy) rotate(a) translate(-cx -cy) → rotate(a cx cy)\n    if (params.shortRotate && transforms[i - 2] && transforms[i - 2].name === 'translate' && transforms[i - 1].name === 'rotate' && transforms[i].name === 'translate' && transforms[i - 2].data[0] === -transforms[i].data[0] && transforms[i - 2].data[1] === -transforms[i].data[1]) {\n      transforms.splice(i - 2, 3, {\n        name: 'rotate',\n        data: [transforms[i - 1].data[0], transforms[i - 2].data[0], transforms[i - 2].data[1]]\n      });\n\n      // splice compensation\n      i -= 2;\n      transform = transforms[i];\n    }\n  }\n  return transforms;\n}\n\n/**\n * Remove useless transforms.\n *\n * @param {Array} transforms input array\n * @return {Array} output array\n */\nfunction removeUseless(transforms) {\n  return transforms.filter(function (transform) {\n    // translate(0), rotate(0[, cx, cy]), skewX(0), skewY(0)\n    if (['translate', 'rotate', 'skewX', 'skewY'].indexOf(transform.name) > -1 && (transform.data.length == 1 || transform.name == 'rotate') && !transform.data[0] ||\n    // translate(0, 0)\n    transform.name == 'translate' && !transform.data[0] && !transform.data[1] ||\n    // scale(1)\n    transform.name == 'scale' && transform.data[0] == 1 && (transform.data.length < 2 || transform.data[1] == 1) ||\n    // matrix(1 0 0 1 0 0)\n    transform.name == 'matrix' && transform.data[0] == 1 && transform.data[3] == 1 && !(transform.data[1] || transform.data[2] || transform.data[4] || transform.data[5])) {\n      return false;\n    }\n    return true;\n  });\n}\n\n/**\n * Convert transforms JS representation to string.\n *\n * @param {Array} transformJS JS representation array\n * @param {Object} params plugin params\n * @return {String} output string\n */\nfunction js2transform(transformJS, params) {\n  var transformString = '';\n\n  // collect output value string\n  transformJS.forEach(function (transform) {\n    transform = roundTransform(transform, params);\n    transformString += (transformString && ' ') + transform.name + '(' + cleanupOutData(transform.data, params) + ')';\n  });\n  return transformString;\n}\nfunction roundTransform(transform) {\n  switch (transform.name) {\n    case 'translate':\n      transform.data = floatRound(transform.data);\n      break;\n    case 'rotate':\n      transform.data = degRound(transform.data.slice(0, 1)).concat(floatRound(transform.data.slice(1)));\n      break;\n    case 'skewX':\n    case 'skewY':\n      transform.data = degRound(transform.data);\n      break;\n    case 'scale':\n      transform.data = transformRound(transform.data);\n      break;\n    case 'matrix':\n      transform.data = transformRound(transform.data.slice(0, 4)).concat(floatRound(transform.data.slice(4)));\n      break;\n  }\n  return transform;\n}\n\n/**\n * Rounds numbers in array.\n *\n * @param {Array} data input data array\n * @return {Array} output data array\n */\nfunction round(data) {\n  return data.map(Math.round);\n}\n\n/**\n * Decrease accuracy of floating-point numbers\n * in transforms keeping a specified number of decimals.\n * Smart rounds values like 2.349 to 2.35.\n *\n * @param {Number} fixed number of decimals\n * @param {Array} data input data array\n * @return {Array} output data array\n */\nfunction smartRound(precision, data) {\n  for (var i = data.length, tolerance = Math.pow(.1, precision); i--;) {\n    var rounded = +data[i].toFixed(precision - 1);\n    data[i] = +Math.abs(rounded - data[i]).toFixed(precision) >= tolerance ? +data[i].toFixed(precision) : rounded;\n  }\n  return data;\n}","map":{"version":3,"names":["exports","type","active","description","params","convertToShorts","floatPrecision","transformPrecision","matrixToTransform","shortTranslate","shortScale","shortRotate","removeUseless","collapseIntoOne","leadingZero","negativeExtraSpace","cleanupOutData","require","transform2js","transformsMultiply","degRound","floatRound","transformRound","fn","item","elem","hasAttr","convertTransform","attrName","data","attr","value","definePrecision","length","forEach","transform","roundTransform","js2transform","removeAttr","matrixData","reduce","getMatrixData","significantDigits","Math","min","max","apply","map","floatDigits","n","String","replace","degPrecision","smartRound","bind","round","a","b","name","concat","slice","indexOf","transforms","i","decomposed","splice","num","toFixed","pop","filter","transformJS","transformString","precision","tolerance","pow","rounded","abs"],"sources":["C:/Users/SashinTulsiram/Documents/Software/react-frontend-bulma/node_modules/svgo/plugins/convertTransform.js"],"sourcesContent":["'use strict';\n\nexports.type = 'perItem';\n\nexports.active = true;\n\nexports.description = 'collapses multiple transformations and optimizes it';\n\nexports.params = {\n    convertToShorts: true,\n    // degPrecision: 3, // transformPrecision (or matrix precision) - 2 by default\n    floatPrecision: 3,\n    transformPrecision: 5,\n    matrixToTransform: true,\n    shortTranslate: true,\n    shortScale: true,\n    shortRotate: true,\n    removeUseless: true,\n    collapseIntoOne: true,\n    leadingZero: true,\n    negativeExtraSpace: false\n};\n\nvar cleanupOutData = require('../lib/svgo/tools').cleanupOutData,\n    transform2js = require('./_transforms.js').transform2js,\n    transformsMultiply = require('./_transforms.js').transformsMultiply,\n    matrixToTransform = require('./_transforms.js').matrixToTransform,\n    degRound,\n    floatRound,\n    transformRound;\n\n/**\n * Convert matrices to the short aliases,\n * convert long translate, scale or rotate transform notations to the shorts ones,\n * convert transforms to the matrices and multiply them all into one,\n * remove useless transforms.\n *\n * @see http://www.w3.org/TR/SVG/coords.html#TransformMatrixDefined\n *\n * @param {Object} item current iteration item\n * @param {Object} params plugin params\n * @return {Boolean} if false, item will be filtered out\n *\n * @author Kir Belevich\n */\nexports.fn = function(item, params) {\n\n    if (item.elem) {\n\n        // transform\n        if (item.hasAttr('transform')) {\n            convertTransform(item, 'transform', params);\n        }\n\n        // gradientTransform\n        if (item.hasAttr('gradientTransform')) {\n            convertTransform(item, 'gradientTransform', params);\n        }\n\n        // patternTransform\n        if (item.hasAttr('patternTransform')) {\n            convertTransform(item, 'patternTransform', params);\n        }\n\n    }\n\n};\n\n/**\n * Main function.\n *\n * @param {Object} item input item\n * @param {String} attrName attribute name\n * @param {Object} params plugin params\n */\nfunction convertTransform(item, attrName, params) {\n    var data = transform2js(item.attr(attrName).value);\n    definePrecision(data, params);\n\n    if (params.collapseIntoOne && data.length > 1) {\n        data = [transformsMultiply(data)];\n    }\n\n    if (params.convertToShorts) {\n        data = convertToShorts(data, params);\n    } else {\n        data.forEach(function(transform) {\n            transform = roundTransform(transform, params);\n        });\n    }\n\n    if (params.removeUseless) {\n        data = removeUseless(data);\n    }\n\n    if (data.length) {\n        item.attr(attrName).value = js2transform(data, params);\n    } else {\n        item.removeAttr(attrName);\n    }\n}\n\n/**\n * Defines precision to work with certain parts.\n * transformPrecision - for scale and four first matrix parameters (needs a better precision due to multiplying),\n * floatPrecision - for translate including two last matrix and rotate parameters,\n * degPrecision - for rotate and skew. By default it's equal to (rougly)\n * transformPrecision - 2 or floatPrecision whichever is lower. Can be set in params.\n *\n * @param {Array} transforms input array\n * @param {Object} params plugin params\n * @return {Array} output array\n */\nfunction definePrecision(data, params) {\n    /* jshint validthis: true */\n    var matrixData = data.reduce(getMatrixData, []),\n        significantDigits = params.transformPrecision;\n\n    // Limit transform precision with matrix one. Calculating with larger precision doesn't add any value.\n    if (matrixData.length) {\n        params.transformPrecision = Math.min(params.transformPrecision,\n            Math.max.apply(Math, matrixData.map(floatDigits)) || params.transformPrecision);\n\n        significantDigits = Math.max.apply(Math, matrixData.map(function(n) {\n            return String(n).replace(/\\D+/g, '').length; // Number of digits in a number. 123.45 → 5\n        }));\n    }\n    // No sense in angle precision more then number of significant digits in matrix.\n    if (!('degPrecision' in params)) {\n        params.degPrecision = Math.max(0, Math.min(params.floatPrecision, significantDigits - 2));\n    }\n\n    degRound = params.degPrecision >= 1 ? smartRound.bind(this, params.degPrecision) : round;\n    floatRound = params.floatPrecision >= 1 ? smartRound.bind(this, params.floatPrecision) : round;\n    transformRound = params.transformPrecision >= 1 ? smartRound.bind(this, params.transformPrecision) : round;\n}\n\n/**\n * Gathers four first matrix parameters.\n *\n * @param {Array} a array of data\n * @param {Object} transform\n * @return {Array} output array\n */\nfunction getMatrixData(a, b) {\n    return b.name == 'matrix' ? a.concat(b.data.slice(0, 4)) : a;\n}\n\n/**\n * Returns number of digits after the point. 0.125 → 3\n */\nfunction floatDigits(n) {\n    return (n = String(n)).slice(n.indexOf('.')).length - 1;\n}\n\n/**\n * Convert transforms to the shorthand alternatives.\n *\n * @param {Array} transforms input array\n * @param {Object} params plugin params\n * @return {Array} output array\n */\nfunction convertToShorts(transforms, params) {\n\n    for(var i = 0; i < transforms.length; i++) {\n\n        var transform = transforms[i];\n\n        // convert matrix to the short aliases\n        if (\n            params.matrixToTransform &&\n            transform.name === 'matrix'\n        ) {\n            var decomposed = matrixToTransform(transform, params);\n            if (decomposed != transform &&\n                js2transform(decomposed, params).length <= js2transform([transform], params).length) {\n\n                transforms.splice.apply(transforms, [i, 1].concat(decomposed));\n            }\n            transform = transforms[i];\n        }\n\n        transform = roundTransform(transform, params);\n\n        // fixed-point numbers\n        // 12.754997 → 12.755\n        if (params.transformPrecision !== false) {\n            transform.data = transform.data.map(function(num) {\n                return +num.toFixed(params.transformPrecision);\n            });\n        }\n\n        // convert long translate transform notation to the shorts one\n        // translate(10 0) → translate(10)\n        if (\n            params.shortTranslate &&\n            transform.name === 'translate' &&\n            transform.data.length === 2 &&\n            !transform.data[1]\n        ) {\n            transform.data.pop();\n        }\n\n        // convert long scale transform notation to the shorts one\n        // scale(2 2) → scale(2)\n        if (\n            params.shortScale &&\n            transform.name === 'scale' &&\n            transform.data.length === 2 &&\n            transform.data[0] === transform.data[1]\n        ) {\n            transform.data.pop();\n        }\n\n        // convert long rotate transform notation to the short one\n        // translate(cx cy) rotate(a) translate(-cx -cy) → rotate(a cx cy)\n        if (\n            params.shortRotate &&\n            transforms[i - 2] &&\n            transforms[i - 2].name === 'translate' &&\n            transforms[i - 1].name === 'rotate' &&\n            transforms[i].name === 'translate' &&\n            transforms[i - 2].data[0] === -transforms[i].data[0] &&\n            transforms[i - 2].data[1] === -transforms[i].data[1]\n        ) {\n            transforms.splice(i - 2, 3, {\n                name: 'rotate',\n                data: [\n                    transforms[i - 1].data[0],\n                    transforms[i - 2].data[0],\n                    transforms[i - 2].data[1]\n                ]\n            });\n\n            // splice compensation\n            i -= 2;\n\n            transform = transforms[i];\n        }\n\n    }\n\n    return transforms;\n\n}\n\n/**\n * Remove useless transforms.\n *\n * @param {Array} transforms input array\n * @return {Array} output array\n */\nfunction removeUseless(transforms) {\n\n    return transforms.filter(function(transform) {\n\n        // translate(0), rotate(0[, cx, cy]), skewX(0), skewY(0)\n        if (\n            ['translate', 'rotate', 'skewX', 'skewY'].indexOf(transform.name) > -1 &&\n            (transform.data.length == 1 || transform.name == 'rotate') &&\n            !transform.data[0] ||\n\n            // translate(0, 0)\n            transform.name == 'translate' &&\n            !transform.data[0] &&\n            !transform.data[1] ||\n\n            // scale(1)\n            transform.name == 'scale' &&\n            transform.data[0] == 1 &&\n            (transform.data.length < 2 || transform.data[1] == 1) ||\n\n            // matrix(1 0 0 1 0 0)\n            transform.name == 'matrix' &&\n            transform.data[0] == 1 &&\n            transform.data[3] == 1 &&\n            !(transform.data[1] || transform.data[2] || transform.data[4] || transform.data[5])\n        ) {\n            return false;\n        }\n\n        return true;\n\n    });\n\n}\n\n/**\n * Convert transforms JS representation to string.\n *\n * @param {Array} transformJS JS representation array\n * @param {Object} params plugin params\n * @return {String} output string\n */\nfunction js2transform(transformJS, params) {\n\n    var transformString = '';\n\n    // collect output value string\n    transformJS.forEach(function(transform) {\n        transform = roundTransform(transform, params);\n        transformString += (transformString && ' ') + transform.name + '(' + cleanupOutData(transform.data, params) + ')';\n    });\n\n    return transformString;\n\n}\n\nfunction roundTransform(transform) {\n    switch (transform.name) {\n        case 'translate':\n            transform.data = floatRound(transform.data);\n            break;\n        case 'rotate':\n            transform.data = degRound(transform.data.slice(0, 1)).concat(floatRound(transform.data.slice(1)));\n            break;\n        case 'skewX':\n        case 'skewY':\n            transform.data = degRound(transform.data);\n            break;\n        case 'scale':\n            transform.data = transformRound(transform.data);\n            break;\n        case 'matrix':\n            transform.data = transformRound(transform.data.slice(0, 4)).concat(floatRound(transform.data.slice(4)));\n            break;\n    }\n    return transform;\n}\n\n/**\n * Rounds numbers in array.\n *\n * @param {Array} data input data array\n * @return {Array} output data array\n */\nfunction round(data) {\n    return data.map(Math.round);\n}\n\n/**\n * Decrease accuracy of floating-point numbers\n * in transforms keeping a specified number of decimals.\n * Smart rounds values like 2.349 to 2.35.\n *\n * @param {Number} fixed number of decimals\n * @param {Array} data input data array\n * @return {Array} output data array\n */\nfunction smartRound(precision, data) {\n    for (var i = data.length, tolerance = Math.pow(.1, precision); i--;) {\n        var rounded = +data[i].toFixed(precision - 1);\n        data[i] = +Math.abs(rounded - data[i]).toFixed(precision) >= tolerance ?\n            +data[i].toFixed(precision) :\n            rounded;\n    }\n    return data;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}