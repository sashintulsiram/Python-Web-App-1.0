{"ast":null,"code":"'use strict';\n\n/**\n * SVGO is a Nodejs-based tool for optimizing SVG vector graphics files.\n *\n * @see https://github.com/svg/svgo\n *\n * @author Kir Belevich <kir@soulshine.in> (https://github.com/deepsweet)\n * @copyright © 2012 Kir Belevich\n * @license MIT https://raw.githubusercontent.com/svg/svgo/master/LICENSE\n */\nvar CONFIG = require('./svgo/config'),\n  SVG2JS = require('./svgo/svg2js'),\n  PLUGINS = require('./svgo/plugins'),\n  JSAPI = require('./svgo/jsAPI.js'),\n  JS2SVG = require('./svgo/js2svg');\nvar SVGO = module.exports = function (config) {\n  this.config = CONFIG(config);\n};\nSVGO.prototype.optimize = function (svgstr, callback) {\n  var _this = this,\n    config = this.config,\n    maxPassCount = config.multipass ? 10 : 1,\n    counter = 0,\n    prevResultSize = Number.POSITIVE_INFINITY,\n    optimizeOnceCallback = function (svgjs) {\n      if (svgjs.error) {\n        callback(svgjs);\n        return;\n      }\n      if (++counter < maxPassCount && svgjs.data.length < prevResultSize) {\n        prevResultSize = svgjs.data.length;\n        _this._optimizeOnce(svgjs.data, optimizeOnceCallback);\n      } else {\n        callback(svgjs);\n      }\n    };\n  _this._optimizeOnce(svgstr, optimizeOnceCallback);\n};\nSVGO.prototype._optimizeOnce = function (svgstr, callback) {\n  var config = this.config;\n  SVG2JS(svgstr, function (svgjs) {\n    if (svgjs.error) {\n      callback(svgjs);\n      return;\n    }\n    svgjs = PLUGINS(svgjs, config.plugins);\n    callback(JS2SVG(svgjs, config.js2svg));\n  });\n};\n\n/**\n * The factory that creates a content item with the helper methods.\n *\n * @param {Object} data which passed to jsAPI constructor\n * @returns {JSAPI} content item\n */\nSVGO.prototype.createContentItem = function (data) {\n  return new JSAPI(data);\n};","map":{"version":3,"names":["CONFIG","require","SVG2JS","PLUGINS","JSAPI","JS2SVG","SVGO","module","exports","config","prototype","optimize","svgstr","callback","_this","maxPassCount","multipass","counter","prevResultSize","Number","POSITIVE_INFINITY","optimizeOnceCallback","svgjs","error","data","length","_optimizeOnce","plugins","js2svg","createContentItem"],"sources":["C:/Users/SashinTulsiram/Documents/Software/react-frontend-bulma/node_modules/svgo/lib/svgo.js"],"sourcesContent":["'use strict';\n\n/**\n * SVGO is a Nodejs-based tool for optimizing SVG vector graphics files.\n *\n * @see https://github.com/svg/svgo\n *\n * @author Kir Belevich <kir@soulshine.in> (https://github.com/deepsweet)\n * @copyright © 2012 Kir Belevich\n * @license MIT https://raw.githubusercontent.com/svg/svgo/master/LICENSE\n */\n\nvar CONFIG = require('./svgo/config'),\n    SVG2JS = require('./svgo/svg2js'),\n    PLUGINS = require('./svgo/plugins'),\n    JSAPI = require('./svgo/jsAPI.js'),\n    JS2SVG = require('./svgo/js2svg');\n\nvar SVGO = module.exports = function(config) {\n\n    this.config = CONFIG(config);\n\n};\n\nSVGO.prototype.optimize = function(svgstr, callback) {\n\n    var _this = this,\n        config = this.config,\n        maxPassCount = config.multipass ? 10 : 1,\n        counter = 0,\n        prevResultSize = Number.POSITIVE_INFINITY,\n        optimizeOnceCallback = function(svgjs) {\n\n            if (svgjs.error) {\n                callback(svgjs);\n                return;\n            }\n\n            if (++counter < maxPassCount && svgjs.data.length < prevResultSize) {\n                prevResultSize = svgjs.data.length;\n                _this._optimizeOnce(svgjs.data, optimizeOnceCallback);\n            } else {\n                callback(svgjs);\n            }\n\n        };\n\n    _this._optimizeOnce(svgstr, optimizeOnceCallback);\n\n};\n\nSVGO.prototype._optimizeOnce = function(svgstr, callback) {\n\n    var config = this.config;\n\n    SVG2JS(svgstr, function(svgjs) {\n\n        if (svgjs.error) {\n            callback(svgjs);\n            return;\n        }\n\n        svgjs = PLUGINS(svgjs, config.plugins);\n\n        callback(JS2SVG(svgjs, config.js2svg));\n\n    });\n\n};\n\n/**\n * The factory that creates a content item with the helper methods.\n *\n * @param {Object} data which passed to jsAPI constructor\n * @returns {JSAPI} content item\n */\nSVGO.prototype.createContentItem = function(data) {\n\n    return new JSAPI(data);\n\n};\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,eAAe,CAAC;EACjCC,MAAM,GAAGD,OAAO,CAAC,eAAe,CAAC;EACjCE,OAAO,GAAGF,OAAO,CAAC,gBAAgB,CAAC;EACnCG,KAAK,GAAGH,OAAO,CAAC,iBAAiB,CAAC;EAClCI,MAAM,GAAGJ,OAAO,CAAC,eAAe,CAAC;AAErC,IAAIK,IAAI,GAAGC,MAAM,CAACC,OAAO,GAAG,UAASC,MAAM,EAAE;EAEzC,IAAI,CAACA,MAAM,GAAGT,MAAM,CAACS,MAAM,CAAC;AAEhC,CAAC;AAEDH,IAAI,CAACI,SAAS,CAACC,QAAQ,GAAG,UAASC,MAAM,EAAEC,QAAQ,EAAE;EAEjD,IAAIC,KAAK,GAAG,IAAI;IACZL,MAAM,GAAG,IAAI,CAACA,MAAM;IACpBM,YAAY,GAAGN,MAAM,CAACO,SAAS,GAAG,EAAE,GAAG,CAAC;IACxCC,OAAO,GAAG,CAAC;IACXC,cAAc,GAAGC,MAAM,CAACC,iBAAiB;IACzCC,oBAAoB,GAAG,SAAAA,CAASC,KAAK,EAAE;MAEnC,IAAIA,KAAK,CAACC,KAAK,EAAE;QACbV,QAAQ,CAACS,KAAK,CAAC;QACf;MACJ;MAEA,IAAI,EAAEL,OAAO,GAAGF,YAAY,IAAIO,KAAK,CAACE,IAAI,CAACC,MAAM,GAAGP,cAAc,EAAE;QAChEA,cAAc,GAAGI,KAAK,CAACE,IAAI,CAACC,MAAM;QAClCX,KAAK,CAACY,aAAa,CAACJ,KAAK,CAACE,IAAI,EAAEH,oBAAoB,CAAC;MACzD,CAAC,MAAM;QACHR,QAAQ,CAACS,KAAK,CAAC;MACnB;IAEJ,CAAC;EAELR,KAAK,CAACY,aAAa,CAACd,MAAM,EAAES,oBAAoB,CAAC;AAErD,CAAC;AAEDf,IAAI,CAACI,SAAS,CAACgB,aAAa,GAAG,UAASd,MAAM,EAAEC,QAAQ,EAAE;EAEtD,IAAIJ,MAAM,GAAG,IAAI,CAACA,MAAM;EAExBP,MAAM,CAACU,MAAM,EAAE,UAASU,KAAK,EAAE;IAE3B,IAAIA,KAAK,CAACC,KAAK,EAAE;MACbV,QAAQ,CAACS,KAAK,CAAC;MACf;IACJ;IAEAA,KAAK,GAAGnB,OAAO,CAACmB,KAAK,EAAEb,MAAM,CAACkB,OAAO,CAAC;IAEtCd,QAAQ,CAACR,MAAM,CAACiB,KAAK,EAAEb,MAAM,CAACmB,MAAM,CAAC,CAAC;EAE1C,CAAC,CAAC;AAEN,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAtB,IAAI,CAACI,SAAS,CAACmB,iBAAiB,GAAG,UAASL,IAAI,EAAE;EAE9C,OAAO,IAAIpB,KAAK,CAACoB,IAAI,CAAC;AAE1B,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}