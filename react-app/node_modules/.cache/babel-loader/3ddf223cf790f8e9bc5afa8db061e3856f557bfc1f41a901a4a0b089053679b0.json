{"ast":null,"code":"// Generated by CoffeeScript 2.4.1\n(function () {\n  var NodeType,\n    WriterState,\n    XMLCData,\n    XMLComment,\n    XMLDTDAttList,\n    XMLDTDElement,\n    XMLDTDEntity,\n    XMLDTDNotation,\n    XMLDeclaration,\n    XMLDocType,\n    XMLDummy,\n    XMLElement,\n    XMLProcessingInstruction,\n    XMLRaw,\n    XMLText,\n    XMLWriterBase,\n    assign,\n    hasProp = {}.hasOwnProperty;\n  ({\n    assign\n  } = require('./Utility'));\n  NodeType = require('./NodeType');\n  XMLDeclaration = require('./XMLDeclaration');\n  XMLDocType = require('./XMLDocType');\n  XMLCData = require('./XMLCData');\n  XMLComment = require('./XMLComment');\n  XMLElement = require('./XMLElement');\n  XMLRaw = require('./XMLRaw');\n  XMLText = require('./XMLText');\n  XMLProcessingInstruction = require('./XMLProcessingInstruction');\n  XMLDummy = require('./XMLDummy');\n  XMLDTDAttList = require('./XMLDTDAttList');\n  XMLDTDElement = require('./XMLDTDElement');\n  XMLDTDEntity = require('./XMLDTDEntity');\n  XMLDTDNotation = require('./XMLDTDNotation');\n  WriterState = require('./WriterState');\n\n  // Base class for XML writers\n  module.exports = XMLWriterBase = class XMLWriterBase {\n    // Initializes a new instance of `XMLWriterBase`\n\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation string\n    // `options.newline` newline sequence\n    // `options.offset` a fixed number of indentations to add to every line\n    // `options.width` maximum column width\n    // `options.allowEmpty` do not self close empty element tags\n    // 'options.dontPrettyTextNodes' if any text is present in node, don't indent or LF\n    // `options.spaceBeforeSlash` add a space before the closing slash of empty elements\n    constructor(options) {\n      var key, ref, value;\n      options || (options = {});\n      this.options = options;\n      ref = options.writer || {};\n      for (key in ref) {\n        if (!hasProp.call(ref, key)) continue;\n        value = ref[key];\n        this[\"_\" + key] = this[key];\n        this[key] = value;\n      }\n    }\n\n    // Filters writer options and provides defaults\n\n    // `options` writer options\n    filterOptions(options) {\n      var filteredOptions, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7;\n      options || (options = {});\n      options = assign({}, this.options, options);\n      filteredOptions = {\n        writer: this\n      };\n      filteredOptions.pretty = options.pretty || false;\n      filteredOptions.allowEmpty = options.allowEmpty || false;\n      filteredOptions.indent = (ref = options.indent) != null ? ref : '  ';\n      filteredOptions.newline = (ref1 = options.newline) != null ? ref1 : '\\n';\n      filteredOptions.offset = (ref2 = options.offset) != null ? ref2 : 0;\n      filteredOptions.width = (ref3 = options.width) != null ? ref3 : 0;\n      filteredOptions.dontPrettyTextNodes = (ref4 = (ref5 = options.dontPrettyTextNodes) != null ? ref5 : options.dontprettytextnodes) != null ? ref4 : 0;\n      filteredOptions.spaceBeforeSlash = (ref6 = (ref7 = options.spaceBeforeSlash) != null ? ref7 : options.spacebeforeslash) != null ? ref6 : '';\n      if (filteredOptions.spaceBeforeSlash === true) {\n        filteredOptions.spaceBeforeSlash = ' ';\n      }\n      filteredOptions.suppressPrettyCount = 0;\n      filteredOptions.user = {};\n      filteredOptions.state = WriterState.None;\n      return filteredOptions;\n    }\n\n    // Returns the indentation string for the current level\n\n    // `node` current node\n    // `options` writer options\n    // `level` current indentation level\n    indent(node, options, level) {\n      var indentLevel;\n      if (!options.pretty || options.suppressPrettyCount) {\n        return '';\n      } else if (options.pretty) {\n        indentLevel = (level || 0) + options.offset + 1;\n        if (indentLevel > 0) {\n          return new Array(indentLevel).join(options.indent);\n        }\n      }\n      return '';\n    }\n\n    // Returns the newline string\n\n    // `node` current node\n    // `options` writer options\n    // `level` current indentation level\n    endline(node, options, level) {\n      if (!options.pretty || options.suppressPrettyCount) {\n        return '';\n      } else {\n        return options.newline;\n      }\n    }\n    attribute(att, options, level) {\n      var r;\n      this.openAttribute(att, options, level);\n      if (options.pretty && options.width > 0) {\n        r = att.name + '=\"' + att.value + '\"';\n      } else {\n        r = ' ' + att.name + '=\"' + att.value + '\"';\n      }\n      this.closeAttribute(att, options, level);\n      return r;\n    }\n    cdata(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<![CDATA[';\n      options.state = WriterState.InsideTag;\n      r += node.value;\n      options.state = WriterState.CloseTag;\n      r += ']]>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n    comment(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!-- ';\n      options.state = WriterState.InsideTag;\n      r += node.value;\n      options.state = WriterState.CloseTag;\n      r += ' -->' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n    declaration(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<?xml';\n      options.state = WriterState.InsideTag;\n      r += ' version=\"' + node.version + '\"';\n      if (node.encoding != null) {\n        r += ' encoding=\"' + node.encoding + '\"';\n      }\n      if (node.standalone != null) {\n        r += ' standalone=\"' + node.standalone + '\"';\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '?>';\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n    docType(node, options, level) {\n      var child, i, len1, r, ref;\n      level || (level = 0);\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level);\n      r += '<!DOCTYPE ' + node.root().name;\n      // external identifier\n      if (node.pubID && node.sysID) {\n        r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n      } else if (node.sysID) {\n        r += ' SYSTEM \"' + node.sysID + '\"';\n      }\n      // internal subset\n      if (node.children.length > 0) {\n        r += ' [';\n        r += this.endline(node, options, level);\n        options.state = WriterState.InsideTag;\n        ref = node.children;\n        for (i = 0, len1 = ref.length; i < len1; i++) {\n          child = ref[i];\n          r += this.writeChildNode(child, options, level + 1);\n        }\n        options.state = WriterState.CloseTag;\n        r += ']';\n      }\n      // close tag\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>';\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n    element(node, options, level) {\n      var att, attLen, child, childNodeCount, firstChildNode, i, j, len, len1, len2, name, prettySuppressed, r, ratt, ref, ref1, ref2, ref3, rline;\n      level || (level = 0);\n      prettySuppressed = false;\n      // open tag\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<' + node.name;\n      // attributes\n      if (options.pretty && options.width > 0) {\n        len = r.length;\n        ref = node.attribs;\n        for (name in ref) {\n          if (!hasProp.call(ref, name)) continue;\n          att = ref[name];\n          ratt = this.attribute(att, options, level);\n          attLen = ratt.length;\n          if (len + attLen > options.width) {\n            rline = this.indent(node, options, level + 1) + ratt;\n            r += this.endline(node, options, level) + rline;\n            len = rline.length;\n          } else {\n            rline = ' ' + ratt;\n            r += rline;\n            len += rline.length;\n          }\n        }\n      } else {\n        ref1 = node.attribs;\n        for (name in ref1) {\n          if (!hasProp.call(ref1, name)) continue;\n          att = ref1[name];\n          r += this.attribute(att, options, level);\n        }\n      }\n      childNodeCount = node.children.length;\n      firstChildNode = childNodeCount === 0 ? null : node.children[0];\n      if (childNodeCount === 0 || node.children.every(function (e) {\n        return (e.type === NodeType.Text || e.type === NodeType.Raw) && e.value === '';\n      })) {\n        // empty element\n        if (options.allowEmpty) {\n          r += '>';\n          options.state = WriterState.CloseTag;\n          r += '</' + node.name + '>' + this.endline(node, options, level);\n        } else {\n          options.state = WriterState.CloseTag;\n          r += options.spaceBeforeSlash + '/>' + this.endline(node, options, level);\n        }\n      } else if (options.pretty && childNodeCount === 1 && (firstChildNode.type === NodeType.Text || firstChildNode.type === NodeType.Raw) && firstChildNode.value != null) {\n        // do not indent text-only nodes\n        r += '>';\n        options.state = WriterState.InsideTag;\n        options.suppressPrettyCount++;\n        prettySuppressed = true;\n        r += this.writeChildNode(firstChildNode, options, level + 1);\n        options.suppressPrettyCount--;\n        prettySuppressed = false;\n        options.state = WriterState.CloseTag;\n        r += '</' + node.name + '>' + this.endline(node, options, level);\n      } else {\n        // if ANY are a text node, then suppress pretty now\n        if (options.dontPrettyTextNodes) {\n          ref2 = node.children;\n          for (i = 0, len1 = ref2.length; i < len1; i++) {\n            child = ref2[i];\n            if ((child.type === NodeType.Text || child.type === NodeType.Raw) && child.value != null) {\n              options.suppressPrettyCount++;\n              prettySuppressed = true;\n              break;\n            }\n          }\n        }\n        // close the opening tag, after dealing with newline\n        r += '>' + this.endline(node, options, level);\n        options.state = WriterState.InsideTag;\n        ref3 = node.children;\n        // inner tags\n        for (j = 0, len2 = ref3.length; j < len2; j++) {\n          child = ref3[j];\n          r += this.writeChildNode(child, options, level + 1);\n        }\n        // close tag\n        options.state = WriterState.CloseTag;\n        r += this.indent(node, options, level) + '</' + node.name + '>';\n        if (prettySuppressed) {\n          options.suppressPrettyCount--;\n        }\n        r += this.endline(node, options, level);\n        options.state = WriterState.None;\n      }\n      this.closeNode(node, options, level);\n      return r;\n    }\n    writeChildNode(node, options, level) {\n      switch (node.type) {\n        case NodeType.CData:\n          return this.cdata(node, options, level);\n        case NodeType.Comment:\n          return this.comment(node, options, level);\n        case NodeType.Element:\n          return this.element(node, options, level);\n        case NodeType.Raw:\n          return this.raw(node, options, level);\n        case NodeType.Text:\n          return this.text(node, options, level);\n        case NodeType.ProcessingInstruction:\n          return this.processingInstruction(node, options, level);\n        case NodeType.Dummy:\n          return '';\n        case NodeType.Declaration:\n          return this.declaration(node, options, level);\n        case NodeType.DocType:\n          return this.docType(node, options, level);\n        case NodeType.AttributeDeclaration:\n          return this.dtdAttList(node, options, level);\n        case NodeType.ElementDeclaration:\n          return this.dtdElement(node, options, level);\n        case NodeType.EntityDeclaration:\n          return this.dtdEntity(node, options, level);\n        case NodeType.NotationDeclaration:\n          return this.dtdNotation(node, options, level);\n        default:\n          throw new Error(\"Unknown XML node type: \" + node.constructor.name);\n      }\n    }\n    processingInstruction(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<?';\n      options.state = WriterState.InsideTag;\n      r += node.target;\n      if (node.value) {\n        r += ' ' + node.value;\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '?>';\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n    raw(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level);\n      options.state = WriterState.InsideTag;\n      r += node.value;\n      options.state = WriterState.CloseTag;\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n    text(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level);\n      options.state = WriterState.InsideTag;\n      r += node.value;\n      options.state = WriterState.CloseTag;\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n    dtdAttList(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!ATTLIST';\n      options.state = WriterState.InsideTag;\n      r += ' ' + node.elementName + ' ' + node.attributeName + ' ' + node.attributeType;\n      if (node.defaultValueType !== '#DEFAULT') {\n        r += ' ' + node.defaultValueType;\n      }\n      if (node.defaultValue) {\n        r += ' \"' + node.defaultValue + '\"';\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n    dtdElement(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!ELEMENT';\n      options.state = WriterState.InsideTag;\n      r += ' ' + node.name + ' ' + node.value;\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n    dtdEntity(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!ENTITY';\n      options.state = WriterState.InsideTag;\n      if (node.pe) {\n        r += ' %';\n      }\n      r += ' ' + node.name;\n      if (node.value) {\n        r += ' \"' + node.value + '\"';\n      } else {\n        if (node.pubID && node.sysID) {\n          r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n        } else if (node.sysID) {\n          r += ' SYSTEM \"' + node.sysID + '\"';\n        }\n        if (node.nData) {\n          r += ' NDATA ' + node.nData;\n        }\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n    dtdNotation(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!NOTATION';\n      options.state = WriterState.InsideTag;\n      r += ' ' + node.name;\n      if (node.pubID && node.sysID) {\n        r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n      } else if (node.pubID) {\n        r += ' PUBLIC \"' + node.pubID + '\"';\n      } else if (node.sysID) {\n        r += ' SYSTEM \"' + node.sysID + '\"';\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n    openNode(node, options, level) {}\n    closeNode(node, options, level) {}\n    openAttribute(att, options, level) {}\n    closeAttribute(att, options, level) {}\n  };\n}).call(this);","map":{"version":3,"names":["NodeType","WriterState","XMLCData","XMLComment","XMLDTDAttList","XMLDTDElement","XMLDTDEntity","XMLDTDNotation","XMLDeclaration","XMLDocType","XMLDummy","XMLElement","XMLProcessingInstruction","XMLRaw","XMLText","XMLWriterBase","assign","hasProp","hasOwnProperty","require","module","exports","constructor","options","key","ref","value","writer","call","filterOptions","filteredOptions","ref1","ref2","ref3","ref4","ref5","ref6","ref7","pretty","allowEmpty","indent","newline","offset","width","dontPrettyTextNodes","dontprettytextnodes","spaceBeforeSlash","spacebeforeslash","suppressPrettyCount","user","state","None","node","level","indentLevel","Array","join","endline","attribute","att","r","openAttribute","name","closeAttribute","cdata","openNode","OpenTag","InsideTag","CloseTag","closeNode","comment","declaration","version","encoding","standalone","docType","child","i","len1","root","pubID","sysID","children","length","writeChildNode","element","attLen","childNodeCount","firstChildNode","j","len","len2","prettySuppressed","ratt","rline","attribs","every","e","type","Text","Raw","CData","Comment","Element","raw","text","ProcessingInstruction","processingInstruction","Dummy","Declaration","DocType","AttributeDeclaration","dtdAttList","ElementDeclaration","dtdElement","EntityDeclaration","dtdEntity","NotationDeclaration","dtdNotation","Error","target","elementName","attributeName","attributeType","defaultValueType","defaultValue","pe","nData"],"sources":["C:/Users/SashinTulsiram/Documents/Software/react-frontend-bulma/react-app/node_modules/xmlbuilder/lib/XMLWriterBase.js"],"sourcesContent":["// Generated by CoffeeScript 2.4.1\n(function() {\n  var NodeType, WriterState, XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLDummy, XMLElement, XMLProcessingInstruction, XMLRaw, XMLText, XMLWriterBase, assign,\n    hasProp = {}.hasOwnProperty;\n\n  ({assign} = require('./Utility'));\n\n  NodeType = require('./NodeType');\n\n  XMLDeclaration = require('./XMLDeclaration');\n\n  XMLDocType = require('./XMLDocType');\n\n  XMLCData = require('./XMLCData');\n\n  XMLComment = require('./XMLComment');\n\n  XMLElement = require('./XMLElement');\n\n  XMLRaw = require('./XMLRaw');\n\n  XMLText = require('./XMLText');\n\n  XMLProcessingInstruction = require('./XMLProcessingInstruction');\n\n  XMLDummy = require('./XMLDummy');\n\n  XMLDTDAttList = require('./XMLDTDAttList');\n\n  XMLDTDElement = require('./XMLDTDElement');\n\n  XMLDTDEntity = require('./XMLDTDEntity');\n\n  XMLDTDNotation = require('./XMLDTDNotation');\n\n  WriterState = require('./WriterState');\n\n  // Base class for XML writers\n  module.exports = XMLWriterBase = class XMLWriterBase {\n    // Initializes a new instance of `XMLWriterBase`\n\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation string\n    // `options.newline` newline sequence\n    // `options.offset` a fixed number of indentations to add to every line\n    // `options.width` maximum column width\n    // `options.allowEmpty` do not self close empty element tags\n    // 'options.dontPrettyTextNodes' if any text is present in node, don't indent or LF\n    // `options.spaceBeforeSlash` add a space before the closing slash of empty elements\n    constructor(options) {\n      var key, ref, value;\n      options || (options = {});\n      this.options = options;\n      ref = options.writer || {};\n      for (key in ref) {\n        if (!hasProp.call(ref, key)) continue;\n        value = ref[key];\n        this[\"_\" + key] = this[key];\n        this[key] = value;\n      }\n    }\n\n    // Filters writer options and provides defaults\n\n    // `options` writer options\n    filterOptions(options) {\n      var filteredOptions, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7;\n      options || (options = {});\n      options = assign({}, this.options, options);\n      filteredOptions = {\n        writer: this\n      };\n      filteredOptions.pretty = options.pretty || false;\n      filteredOptions.allowEmpty = options.allowEmpty || false;\n      filteredOptions.indent = (ref = options.indent) != null ? ref : '  ';\n      filteredOptions.newline = (ref1 = options.newline) != null ? ref1 : '\\n';\n      filteredOptions.offset = (ref2 = options.offset) != null ? ref2 : 0;\n      filteredOptions.width = (ref3 = options.width) != null ? ref3 : 0;\n      filteredOptions.dontPrettyTextNodes = (ref4 = (ref5 = options.dontPrettyTextNodes) != null ? ref5 : options.dontprettytextnodes) != null ? ref4 : 0;\n      filteredOptions.spaceBeforeSlash = (ref6 = (ref7 = options.spaceBeforeSlash) != null ? ref7 : options.spacebeforeslash) != null ? ref6 : '';\n      if (filteredOptions.spaceBeforeSlash === true) {\n        filteredOptions.spaceBeforeSlash = ' ';\n      }\n      filteredOptions.suppressPrettyCount = 0;\n      filteredOptions.user = {};\n      filteredOptions.state = WriterState.None;\n      return filteredOptions;\n    }\n\n    // Returns the indentation string for the current level\n\n    // `node` current node\n    // `options` writer options\n    // `level` current indentation level\n    indent(node, options, level) {\n      var indentLevel;\n      if (!options.pretty || options.suppressPrettyCount) {\n        return '';\n      } else if (options.pretty) {\n        indentLevel = (level || 0) + options.offset + 1;\n        if (indentLevel > 0) {\n          return new Array(indentLevel).join(options.indent);\n        }\n      }\n      return '';\n    }\n\n    // Returns the newline string\n\n    // `node` current node\n    // `options` writer options\n    // `level` current indentation level\n    endline(node, options, level) {\n      if (!options.pretty || options.suppressPrettyCount) {\n        return '';\n      } else {\n        return options.newline;\n      }\n    }\n\n    attribute(att, options, level) {\n      var r;\n      this.openAttribute(att, options, level);\n      if (options.pretty && options.width > 0) {\n        r = att.name + '=\"' + att.value + '\"';\n      } else {\n        r = ' ' + att.name + '=\"' + att.value + '\"';\n      }\n      this.closeAttribute(att, options, level);\n      return r;\n    }\n\n    cdata(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<![CDATA[';\n      options.state = WriterState.InsideTag;\n      r += node.value;\n      options.state = WriterState.CloseTag;\n      r += ']]>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    comment(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!-- ';\n      options.state = WriterState.InsideTag;\n      r += node.value;\n      options.state = WriterState.CloseTag;\n      r += ' -->' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    declaration(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<?xml';\n      options.state = WriterState.InsideTag;\n      r += ' version=\"' + node.version + '\"';\n      if (node.encoding != null) {\n        r += ' encoding=\"' + node.encoding + '\"';\n      }\n      if (node.standalone != null) {\n        r += ' standalone=\"' + node.standalone + '\"';\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '?>';\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    docType(node, options, level) {\n      var child, i, len1, r, ref;\n      level || (level = 0);\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level);\n      r += '<!DOCTYPE ' + node.root().name;\n      // external identifier\n      if (node.pubID && node.sysID) {\n        r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n      } else if (node.sysID) {\n        r += ' SYSTEM \"' + node.sysID + '\"';\n      }\n      // internal subset\n      if (node.children.length > 0) {\n        r += ' [';\n        r += this.endline(node, options, level);\n        options.state = WriterState.InsideTag;\n        ref = node.children;\n        for (i = 0, len1 = ref.length; i < len1; i++) {\n          child = ref[i];\n          r += this.writeChildNode(child, options, level + 1);\n        }\n        options.state = WriterState.CloseTag;\n        r += ']';\n      }\n      // close tag\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>';\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    element(node, options, level) {\n      var att, attLen, child, childNodeCount, firstChildNode, i, j, len, len1, len2, name, prettySuppressed, r, ratt, ref, ref1, ref2, ref3, rline;\n      level || (level = 0);\n      prettySuppressed = false;\n      // open tag\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<' + node.name;\n      // attributes\n      if (options.pretty && options.width > 0) {\n        len = r.length;\n        ref = node.attribs;\n        for (name in ref) {\n          if (!hasProp.call(ref, name)) continue;\n          att = ref[name];\n          ratt = this.attribute(att, options, level);\n          attLen = ratt.length;\n          if (len + attLen > options.width) {\n            rline = this.indent(node, options, level + 1) + ratt;\n            r += this.endline(node, options, level) + rline;\n            len = rline.length;\n          } else {\n            rline = ' ' + ratt;\n            r += rline;\n            len += rline.length;\n          }\n        }\n      } else {\n        ref1 = node.attribs;\n        for (name in ref1) {\n          if (!hasProp.call(ref1, name)) continue;\n          att = ref1[name];\n          r += this.attribute(att, options, level);\n        }\n      }\n      childNodeCount = node.children.length;\n      firstChildNode = childNodeCount === 0 ? null : node.children[0];\n      if (childNodeCount === 0 || node.children.every(function(e) {\n        return (e.type === NodeType.Text || e.type === NodeType.Raw) && e.value === '';\n      })) {\n        // empty element\n        if (options.allowEmpty) {\n          r += '>';\n          options.state = WriterState.CloseTag;\n          r += '</' + node.name + '>' + this.endline(node, options, level);\n        } else {\n          options.state = WriterState.CloseTag;\n          r += options.spaceBeforeSlash + '/>' + this.endline(node, options, level);\n        }\n      } else if (options.pretty && childNodeCount === 1 && (firstChildNode.type === NodeType.Text || firstChildNode.type === NodeType.Raw) && (firstChildNode.value != null)) {\n        // do not indent text-only nodes\n        r += '>';\n        options.state = WriterState.InsideTag;\n        options.suppressPrettyCount++;\n        prettySuppressed = true;\n        r += this.writeChildNode(firstChildNode, options, level + 1);\n        options.suppressPrettyCount--;\n        prettySuppressed = false;\n        options.state = WriterState.CloseTag;\n        r += '</' + node.name + '>' + this.endline(node, options, level);\n      } else {\n        // if ANY are a text node, then suppress pretty now\n        if (options.dontPrettyTextNodes) {\n          ref2 = node.children;\n          for (i = 0, len1 = ref2.length; i < len1; i++) {\n            child = ref2[i];\n            if ((child.type === NodeType.Text || child.type === NodeType.Raw) && (child.value != null)) {\n              options.suppressPrettyCount++;\n              prettySuppressed = true;\n              break;\n            }\n          }\n        }\n        // close the opening tag, after dealing with newline\n        r += '>' + this.endline(node, options, level);\n        options.state = WriterState.InsideTag;\n        ref3 = node.children;\n        // inner tags\n        for (j = 0, len2 = ref3.length; j < len2; j++) {\n          child = ref3[j];\n          r += this.writeChildNode(child, options, level + 1);\n        }\n        // close tag\n        options.state = WriterState.CloseTag;\n        r += this.indent(node, options, level) + '</' + node.name + '>';\n        if (prettySuppressed) {\n          options.suppressPrettyCount--;\n        }\n        r += this.endline(node, options, level);\n        options.state = WriterState.None;\n      }\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    writeChildNode(node, options, level) {\n      switch (node.type) {\n        case NodeType.CData:\n          return this.cdata(node, options, level);\n        case NodeType.Comment:\n          return this.comment(node, options, level);\n        case NodeType.Element:\n          return this.element(node, options, level);\n        case NodeType.Raw:\n          return this.raw(node, options, level);\n        case NodeType.Text:\n          return this.text(node, options, level);\n        case NodeType.ProcessingInstruction:\n          return this.processingInstruction(node, options, level);\n        case NodeType.Dummy:\n          return '';\n        case NodeType.Declaration:\n          return this.declaration(node, options, level);\n        case NodeType.DocType:\n          return this.docType(node, options, level);\n        case NodeType.AttributeDeclaration:\n          return this.dtdAttList(node, options, level);\n        case NodeType.ElementDeclaration:\n          return this.dtdElement(node, options, level);\n        case NodeType.EntityDeclaration:\n          return this.dtdEntity(node, options, level);\n        case NodeType.NotationDeclaration:\n          return this.dtdNotation(node, options, level);\n        default:\n          throw new Error(\"Unknown XML node type: \" + node.constructor.name);\n      }\n    }\n\n    processingInstruction(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<?';\n      options.state = WriterState.InsideTag;\n      r += node.target;\n      if (node.value) {\n        r += ' ' + node.value;\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '?>';\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    raw(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level);\n      options.state = WriterState.InsideTag;\n      r += node.value;\n      options.state = WriterState.CloseTag;\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    text(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level);\n      options.state = WriterState.InsideTag;\n      r += node.value;\n      options.state = WriterState.CloseTag;\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    dtdAttList(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!ATTLIST';\n      options.state = WriterState.InsideTag;\n      r += ' ' + node.elementName + ' ' + node.attributeName + ' ' + node.attributeType;\n      if (node.defaultValueType !== '#DEFAULT') {\n        r += ' ' + node.defaultValueType;\n      }\n      if (node.defaultValue) {\n        r += ' \"' + node.defaultValue + '\"';\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    dtdElement(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!ELEMENT';\n      options.state = WriterState.InsideTag;\n      r += ' ' + node.name + ' ' + node.value;\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    dtdEntity(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!ENTITY';\n      options.state = WriterState.InsideTag;\n      if (node.pe) {\n        r += ' %';\n      }\n      r += ' ' + node.name;\n      if (node.value) {\n        r += ' \"' + node.value + '\"';\n      } else {\n        if (node.pubID && node.sysID) {\n          r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n        } else if (node.sysID) {\n          r += ' SYSTEM \"' + node.sysID + '\"';\n        }\n        if (node.nData) {\n          r += ' NDATA ' + node.nData;\n        }\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    dtdNotation(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!NOTATION';\n      options.state = WriterState.InsideTag;\n      r += ' ' + node.name;\n      if (node.pubID && node.sysID) {\n        r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n      } else if (node.pubID) {\n        r += ' PUBLIC \"' + node.pubID + '\"';\n      } else if (node.sysID) {\n        r += ' SYSTEM \"' + node.sysID + '\"';\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    openNode(node, options, level) {}\n\n    closeNode(node, options, level) {}\n\n    openAttribute(att, options, level) {}\n\n    closeAttribute(att, options, level) {}\n\n  };\n\n}).call(this);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}