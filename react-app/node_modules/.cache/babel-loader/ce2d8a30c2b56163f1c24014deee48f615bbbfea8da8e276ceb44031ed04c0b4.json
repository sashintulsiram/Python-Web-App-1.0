{"ast":null,"code":"// Generated by CoffeeScript 2.4.1\n(function () {\n  var NodeType, XMLCharacterData, XMLComment;\n  NodeType = require('./NodeType');\n  XMLCharacterData = require('./XMLCharacterData');\n\n  // Represents a comment node\n  module.exports = XMLComment = class XMLComment extends XMLCharacterData {\n    // Initializes a new instance of `XMLComment`\n\n    // `text` comment text\n    constructor(parent, text) {\n      super(parent);\n      if (text == null) {\n        throw new Error(\"Missing comment text. \" + this.debugInfo());\n      }\n      this.name = \"#comment\";\n      this.type = NodeType.Comment;\n      this.value = this.stringify.comment(text);\n    }\n\n    // Creates and returns a deep clone of `this`\n    clone() {\n      return Object.create(this);\n    }\n\n    // Converts the XML fragment to string\n\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation for pretty print\n    // `options.offset` how many indentations to add to every line for pretty print\n    // `options.newline` newline sequence for pretty print\n    toString(options) {\n      return this.options.writer.comment(this, this.options.writer.filterOptions(options));\n    }\n  };\n}).call(this);","map":{"version":3,"names":["NodeType","XMLCharacterData","XMLComment","require","module","exports","constructor","parent","text","Error","debugInfo","name","type","Comment","value","stringify","comment","clone","Object","create","toString","options","writer","filterOptions","call"],"sources":["C:/Users/SashinTulsiram/Documents/Software/react-frontend-bulma/react-app/node_modules/xmlbuilder/lib/XMLComment.js"],"sourcesContent":["// Generated by CoffeeScript 2.4.1\n(function() {\n  var NodeType, XMLCharacterData, XMLComment;\n\n  NodeType = require('./NodeType');\n\n  XMLCharacterData = require('./XMLCharacterData');\n\n  // Represents a comment node\n  module.exports = XMLComment = class XMLComment extends XMLCharacterData {\n    // Initializes a new instance of `XMLComment`\n\n    // `text` comment text\n    constructor(parent, text) {\n      super(parent);\n      if (text == null) {\n        throw new Error(\"Missing comment text. \" + this.debugInfo());\n      }\n      this.name = \"#comment\";\n      this.type = NodeType.Comment;\n      this.value = this.stringify.comment(text);\n    }\n\n    // Creates and returns a deep clone of `this`\n    clone() {\n      return Object.create(this);\n    }\n\n    // Converts the XML fragment to string\n\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation for pretty print\n    // `options.offset` how many indentations to add to every line for pretty print\n    // `options.newline` newline sequence for pretty print\n    toString(options) {\n      return this.options.writer.comment(this, this.options.writer.filterOptions(options));\n    }\n\n  };\n\n}).call(this);\n"],"mappings":"AAAA;AACA,CAAC,YAAW;EACV,IAAIA,QAAQ,EAAEC,gBAAgB,EAAEC,UAAU;EAE1CF,QAAQ,GAAGG,OAAO,CAAC,YAAY,CAAC;EAEhCF,gBAAgB,GAAGE,OAAO,CAAC,oBAAoB,CAAC;;EAEhD;EACAC,MAAM,CAACC,OAAO,GAAGH,UAAU,GAAG,MAAMA,UAAU,SAASD,gBAAgB,CAAC;IACtE;;IAEA;IACAK,WAAWA,CAACC,MAAM,EAAEC,IAAI,EAAE;MACxB,KAAK,CAACD,MAAM,CAAC;MACb,IAAIC,IAAI,IAAI,IAAI,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,wBAAwB,GAAG,IAAI,CAACC,SAAS,CAAC,CAAC,CAAC;MAC9D;MACA,IAAI,CAACC,IAAI,GAAG,UAAU;MACtB,IAAI,CAACC,IAAI,GAAGZ,QAAQ,CAACa,OAAO;MAC5B,IAAI,CAACC,KAAK,GAAG,IAAI,CAACC,SAAS,CAACC,OAAO,CAACR,IAAI,CAAC;IAC3C;;IAEA;IACAS,KAAKA,CAAA,EAAG;MACN,OAAOC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;IAC5B;;IAEA;;IAEA;IACA;IACA;IACA;IACAC,QAAQA,CAACC,OAAO,EAAE;MAChB,OAAO,IAAI,CAACA,OAAO,CAACC,MAAM,CAACN,OAAO,CAAC,IAAI,EAAE,IAAI,CAACK,OAAO,CAACC,MAAM,CAACC,aAAa,CAACF,OAAO,CAAC,CAAC;IACtF;EAEF,CAAC;AAEH,CAAC,EAAEG,IAAI,CAAC,IAAI,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}